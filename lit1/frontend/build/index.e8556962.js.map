{"mappings":"I2C4FW,EAEA,EVvDP,EmByjBY,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I7B/jBJ,EAoCA,EAQA,EASA,EAQA,EAUA,EAkBA,EAmCA,EAgDA,E6B9HkC,EAkDA,EAuFA,EA0BA,EAeA,EAeA,EAiBA,EAmBA,EA4CA,EAmCA,EAmCA,EAgCA,EAuBA,EA8BA,EAwCA,EAyBA,EA4BA,EAqCA,EkEtWA,E3FqGA,E4G3XnC,EMQC,EIHA,EMGA,EYPA,EMAA,EQAA,EIAA,EsBAA,EhD4BA,EwEvBA,EELA,EkBAA,EJKA,EJYA,E3NWD,EJdH,E,EOiBI,EAoCA,EAQA,GASA,GAQA,GAUA,GAkBA,GAmCA,GAgDA,GgH7MD,GMSC,GIHA,GMGA,GYPA,GMAA,GQAA,GIAA,GsBAA,GhD4BA,GwEvBA,GELA,GkBAA,GJKA,GJYA,G3NUR,G,G,W,G,C,E,G,C,E,G,G,iB,A,O,K,A,C,G,S,C,E,G,K,G,O,E,C,E,C,O,C,G,K,G,C,I,E,E,C,E,A,Q,E,C,E,C,I,E,C,G,E,Q,C,C,E,O,E,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,E,C,E,C,C,E,G,iB,C,I,I,G,G,Q,C,G,Q,S,C,C,C,E,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,iB,I,E,A,G,E,G,E,E,O,C,kB,I,E,A,G,E,G,E,E,O,C,kB,I,E,A,G,E,G,E,E,O,C,U,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,O,I,E,A,G,E,G,E,E,O,C,O,I,E,A,G,E,G,E,E,O,C,S,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,c,I,E,A,G,E,G,E,E,O,C,mB,I,E,A,G,E,G,E,E,O,C,oB,I,E,A,G,E,G,E,E,O,C,oB,I,E,A,G,E,G,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,e,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,S,I,E,A,G,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,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,CAAA,CAAE,EAAE,EAAe,C,G,G,Q,S,C,C,C,E,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,qD,I,E,A,G,E,G,E,E,O,C,e,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,iB,I,E,A,G,E,G,E,E,O,C,O,I,E,A,G,E,G,E,E,O,C,O,I,E,A,G,E,G,E,E,O,C,c,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,gB,I,E,A,G,E,G,E,E,O,C,Y,I,E,A,G,E,G,E,E,O,C,sB,I,E,A,G,E,G,E,E,O,C,kB,I,E,A,G,E,G,E,E,O,C,U,I,E,A,G,E,G,E,E,O,C,a,I,E,A,G,E,G,E,E,O,C,S,I,E,A,G,E,G,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,U,I,E,A,G,E,G,ICK1L,EACzI,EAAoB,EAAmB,EAAmB,EAAwB,EAAqB,EAAmB,EAC1H,EAC+B,EAAoO,EAAwB,EAA0E,EAAmD,EAA4D,EACpd,EAA6E,EAAgF,EAA+D,EAA6D,EAAmC,EAA2D,EACvX,EAAuE,EAAuD,EAAiE,EAAiD,EAAqD,E,E,G,SAfzP,EAAE,YAAa,OAAO,QAAQ,OAAO,GAAG,CAAC,EAAE,EAAE,OAAO,GAAG,CAAC,iBAAiB,MAAM,EAAE,EAAE,OAAO,GAAG,CAAC,gBAAgB,MAAM,EAAE,EAAE,OAAO,GAAG,CAAC,kBAAkB,MAAM,EAAE,EAAE,OAAO,GAAG,CAAC,qBAAqB,MAAM,EAAE,EAAE,OAAO,GAAG,CAAC,kBAAkB,MAAM,EAAE,EAAE,OAAO,GAAG,CAAC,kBAAkB,MAAM,EAAE,EAAE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","sources":["<anon>","node_modules/react-is/cjs/react-is.production.min.js","node_modules/react/cjs/react.production.min.js","node_modules/object-assign/index.js","src/index.js","node_modules/@lit/reactive-element/reactive-element.js","node_modules/@lit/reactive-element/src/reactive-element.ts","node_modules/@lit/reactive-element/css-tag.js","node_modules/@lit/reactive-element/src/css-tag.ts","node_modules/lit-html/lit-html.js","node_modules/lit-html/src/lit-html.ts","node_modules/lit-element/lit-element.js","node_modules/lit-element/src/lit-element.ts","node_modules/lit-html/is-server.js","node_modules/lit-html/src/is-server.ts","node_modules/streamlit-component-lib/dist/index.js","node_modules/streamlit-component-lib/dist/StreamlitReact.js","node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","node_modules/react-is/index.js","node_modules/react/index.js","node_modules/streamlit-component-lib/dist/streamlit.js","node_modules/streamlit-component-lib/dist/ArrowTable.js","node_modules/apache-arrow/enum.mjs","node_modules/apache-arrow/src/enum.ts","node_modules/apache-arrow/ipc/serialization.mjs","node_modules/apache-arrow/src/ipc/serialization.ts","node_modules/apache-arrow/table.mjs","node_modules/apache-arrow/src/table.ts","node_modules/apache-arrow/data.mjs","node_modules/apache-arrow/src/data.ts","node_modules/apache-arrow/vector.mjs","node_modules/apache-arrow/src/vector.ts","node_modules/apache-arrow/util/vector.mjs","node_modules/apache-arrow/src/util/vector.ts","node_modules/apache-arrow/row/map.mjs","node_modules/apache-arrow/src/row/map.ts","node_modules/apache-arrow/util/pretty.mjs","node_modules/apache-arrow/src/util/pretty.ts","node_modules/apache-arrow/util/compat.mjs","node_modules/apache-arrow/src/util/compat.ts","node_modules/apache-arrow/visitor/get.mjs","node_modules/apache-arrow/src/visitor/get.ts","node_modules/apache-arrow/util/bn.mjs","node_modules/apache-arrow/src/util/bn.ts","node_modules/apache-arrow/util/buffer.mjs","node_modules/apache-arrow/src/util/buffer.ts","node_modules/tslib/tslib.es6.js","node_modules/apache-arrow/util/utf8.mjs","node_modules/apache-arrow/src/util/utf8.ts","node_modules/apache-arrow/visitor.mjs","node_modules/apache-arrow/src/visitor.ts","node_modules/apache-arrow/type.mjs","node_modules/apache-arrow/src/type.ts","node_modules/apache-arrow/row/struct.mjs","node_modules/apache-arrow/src/row/struct.ts","node_modules/apache-arrow/visitor/set.mjs","node_modules/apache-arrow/src/visitor/set.ts","node_modules/apache-arrow/util/math.mjs","node_modules/apache-arrow/src/util/math.ts","node_modules/apache-arrow/util/chunk.mjs","node_modules/apache-arrow/src/util/chunk.ts","node_modules/apache-arrow/visitor/indexof.mjs","node_modules/apache-arrow/src/visitor/indexof.ts","node_modules/apache-arrow/util/bit.mjs","node_modules/apache-arrow/src/util/bit.ts","node_modules/apache-arrow/visitor/iterator.mjs","node_modules/apache-arrow/src/visitor/iterator.ts","node_modules/apache-arrow/visitor/bytelength.mjs","node_modules/apache-arrow/src/visitor/bytelength.ts","node_modules/apache-arrow/factories.mjs","node_modules/apache-arrow/src/factories.ts","node_modules/apache-arrow/schema.mjs","node_modules/apache-arrow/src/schema.ts","node_modules/apache-arrow/visitor/builderctor.mjs","node_modules/apache-arrow/src/visitor/builderctor.ts","node_modules/apache-arrow/builder/binary.mjs","node_modules/apache-arrow/src/builder/binary.ts","node_modules/apache-arrow/builder/buffer.mjs","node_modules/apache-arrow/src/builder/buffer.ts","node_modules/apache-arrow/builder.mjs","node_modules/apache-arrow/src/builder.ts","node_modules/apache-arrow/builder/valid.mjs","node_modules/apache-arrow/src/builder/valid.ts","node_modules/apache-arrow/builder/bool.mjs","node_modules/apache-arrow/src/builder/bool.ts","node_modules/apache-arrow/builder/date.mjs","node_modules/apache-arrow/src/builder/date.ts","node_modules/apache-arrow/builder/decimal.mjs","node_modules/apache-arrow/src/builder/decimal.ts","node_modules/apache-arrow/builder/dictionary.mjs","node_modules/apache-arrow/src/builder/dictionary.ts","node_modules/apache-arrow/builder/fixedsizebinary.mjs","node_modules/apache-arrow/src/builder/fixedsizebinary.ts","node_modules/apache-arrow/builder/fixedsizelist.mjs","node_modules/apache-arrow/src/builder/fixedsizelist.ts","node_modules/apache-arrow/builder/float.mjs","node_modules/apache-arrow/src/builder/float.ts","node_modules/apache-arrow/builder/interval.mjs","node_modules/apache-arrow/src/builder/interval.ts","node_modules/apache-arrow/builder/int.mjs","node_modules/apache-arrow/src/builder/int.ts","node_modules/apache-arrow/builder/list.mjs","node_modules/apache-arrow/src/builder/list.ts","node_modules/apache-arrow/builder/map.mjs","node_modules/apache-arrow/src/builder/map.ts","node_modules/apache-arrow/builder/null.mjs","node_modules/apache-arrow/src/builder/null.ts","node_modules/apache-arrow/builder/struct.mjs","node_modules/apache-arrow/src/builder/struct.ts","node_modules/apache-arrow/builder/timestamp.mjs","node_modules/apache-arrow/src/builder/timestamp.ts","node_modules/apache-arrow/builder/time.mjs","node_modules/apache-arrow/src/builder/time.ts","node_modules/apache-arrow/builder/union.mjs","node_modules/apache-arrow/src/builder/union.ts","node_modules/apache-arrow/builder/utf8.mjs","node_modules/apache-arrow/src/builder/utf8.ts","node_modules/apache-arrow/recordbatch.mjs","node_modules/apache-arrow/src/recordbatch.ts","node_modules/apache-arrow/visitor/typecomparator.mjs","node_modules/apache-arrow/src/visitor/typecomparator.ts","node_modules/apache-arrow/util/recordbatch.mjs","node_modules/apache-arrow/src/util/recordbatch.ts","node_modules/apache-arrow/ipc/reader.mjs","node_modules/apache-arrow/src/ipc/reader.ts","node_modules/apache-arrow/ipc/metadata/file.mjs","node_modules/apache-arrow/src/ipc/metadata/file.ts","node_modules/apache-arrow/fb/block.mjs","node_modules/apache-arrow/src/fb/block.ts","node_modules/apache-arrow/fb/footer.mjs","node_modules/apache-arrow/src/fb/footer.ts","node_modules/flatbuffers/mjs/flatbuffers.js","node_modules/flatbuffers/mjs/constants.js","node_modules/flatbuffers/mjs/utils.js","node_modules/flatbuffers/mjs/long.js","node_modules/flatbuffers/mjs/encoding.js","node_modules/flatbuffers/mjs/builder.js","node_modules/flatbuffers/mjs/byte-buffer.js","node_modules/apache-arrow/fb/key-value.mjs","node_modules/apache-arrow/src/fb/key-value.ts","node_modules/apache-arrow/fb/metadata-version.mjs","node_modules/apache-arrow/src/fb/metadata-version.ts","node_modules/apache-arrow/fb/schema.mjs","node_modules/apache-arrow/src/fb/schema.ts","node_modules/apache-arrow/fb/endianness.mjs","node_modules/apache-arrow/src/fb/endianness.ts","node_modules/apache-arrow/fb/field.mjs","node_modules/apache-arrow/src/fb/field.ts","node_modules/apache-arrow/fb/dictionary-encoding.mjs","node_modules/apache-arrow/src/fb/dictionary-encoding.ts","node_modules/apache-arrow/fb/dictionary-kind.mjs","node_modules/apache-arrow/src/fb/dictionary-kind.ts","node_modules/apache-arrow/fb/int.mjs","node_modules/apache-arrow/src/fb/int.ts","node_modules/apache-arrow/fb/type.mjs","node_modules/apache-arrow/src/fb/type.ts","node_modules/apache-arrow/fb/binary.mjs","node_modules/apache-arrow/src/fb/binary.ts","node_modules/apache-arrow/fb/bool.mjs","node_modules/apache-arrow/src/fb/bool.ts","node_modules/apache-arrow/fb/date.mjs","node_modules/apache-arrow/src/fb/date.ts","node_modules/apache-arrow/fb/date-unit.mjs","node_modules/apache-arrow/src/fb/date-unit.ts","node_modules/apache-arrow/fb/decimal.mjs","node_modules/apache-arrow/src/fb/decimal.ts","node_modules/apache-arrow/fb/duration.mjs","node_modules/apache-arrow/src/fb/duration.ts","node_modules/apache-arrow/fb/time-unit.mjs","node_modules/apache-arrow/src/fb/time-unit.ts","node_modules/apache-arrow/fb/fixed-size-binary.mjs","node_modules/apache-arrow/src/fb/fixed-size-binary.ts","node_modules/apache-arrow/fb/fixed-size-list.mjs","node_modules/apache-arrow/src/fb/fixed-size-list.ts","node_modules/apache-arrow/fb/floating-point.mjs","node_modules/apache-arrow/src/fb/floating-point.ts","node_modules/apache-arrow/fb/precision.mjs","node_modules/apache-arrow/src/fb/precision.ts","node_modules/apache-arrow/fb/interval.mjs","node_modules/apache-arrow/src/fb/interval.ts","node_modules/apache-arrow/fb/interval-unit.mjs","node_modules/apache-arrow/src/fb/interval-unit.ts","node_modules/apache-arrow/fb/large-binary.mjs","node_modules/apache-arrow/src/fb/large-binary.ts","node_modules/apache-arrow/fb/large-list.mjs","node_modules/apache-arrow/src/fb/large-list.ts","node_modules/apache-arrow/fb/large-utf8.mjs","node_modules/apache-arrow/src/fb/large-utf8.ts","node_modules/apache-arrow/fb/list.mjs","node_modules/apache-arrow/src/fb/list.ts","node_modules/apache-arrow/fb/map.mjs","node_modules/apache-arrow/src/fb/map.ts","node_modules/apache-arrow/fb/null.mjs","node_modules/apache-arrow/src/fb/null.ts","node_modules/apache-arrow/fb/struct_.mjs","node_modules/apache-arrow/src/fb/struct_.ts","node_modules/apache-arrow/fb/time.mjs","node_modules/apache-arrow/src/fb/time.ts","node_modules/apache-arrow/fb/timestamp.mjs","node_modules/apache-arrow/src/fb/timestamp.ts","node_modules/apache-arrow/fb/union.mjs","node_modules/apache-arrow/src/fb/union.ts","node_modules/apache-arrow/fb/union-mode.mjs","node_modules/apache-arrow/src/fb/union-mode.ts","node_modules/apache-arrow/fb/utf8.mjs","node_modules/apache-arrow/src/fb/utf8.ts","node_modules/apache-arrow/io/adapters.mjs","node_modules/apache-arrow/src/io/adapters.ts","node_modules/apache-arrow/io/stream.mjs","node_modules/apache-arrow/src/io/stream.ts","node_modules/apache-arrow/io/interfaces.mjs","node_modules/apache-arrow/src/io/interfaces.ts","node_modules/apache-arrow/io/file.mjs","node_modules/apache-arrow/src/io/file.ts","node_modules/apache-arrow/visitor/vectorloader.mjs","node_modules/apache-arrow/src/visitor/vectorloader.ts","node_modules/apache-arrow/util/int.mjs","node_modules/apache-arrow/src/util/int.ts","node_modules/apache-arrow/ipc/message.mjs","node_modules/apache-arrow/src/ipc/message.ts","node_modules/apache-arrow/ipc/metadata/message.mjs","node_modules/apache-arrow/src/ipc/metadata/message.ts","node_modules/apache-arrow/fb/record-batch.mjs","node_modules/apache-arrow/src/fb/record-batch.ts","node_modules/apache-arrow/fb/body-compression.mjs","node_modules/apache-arrow/src/fb/body-compression.ts","node_modules/apache-arrow/fb/body-compression-method.mjs","node_modules/apache-arrow/src/fb/body-compression-method.ts","node_modules/apache-arrow/fb/compression-type.mjs","node_modules/apache-arrow/src/fb/compression-type.ts","node_modules/apache-arrow/fb/buffer.mjs","node_modules/apache-arrow/src/fb/buffer.ts","node_modules/apache-arrow/fb/field-node.mjs","node_modules/apache-arrow/src/fb/field-node.ts","node_modules/apache-arrow/fb/dictionary-batch.mjs","node_modules/apache-arrow/src/fb/dictionary-batch.ts","node_modules/apache-arrow/fb/message.mjs","node_modules/apache-arrow/src/fb/message.ts","node_modules/apache-arrow/fb/message-header.mjs","node_modules/apache-arrow/src/fb/message-header.ts","node_modules/apache-arrow/fb/sparse-tensor.mjs","node_modules/apache-arrow/src/fb/sparse-tensor.ts","node_modules/apache-arrow/fb/sparse-tensor-index.mjs","node_modules/apache-arrow/src/fb/sparse-tensor-index.ts","node_modules/apache-arrow/fb/sparse-matrix-index-c-s-x.mjs","node_modules/apache-arrow/src/fb/sparse-matrix-index-c-s-x.ts","node_modules/apache-arrow/fb/sparse-matrix-compressed-axis.mjs","node_modules/apache-arrow/src/fb/sparse-matrix-compressed-axis.ts","node_modules/apache-arrow/fb/sparse-tensor-index-c-o-o.mjs","node_modules/apache-arrow/src/fb/sparse-tensor-index-c-o-o.ts","node_modules/apache-arrow/fb/sparse-tensor-index-c-s-f.mjs","node_modules/apache-arrow/src/fb/sparse-tensor-index-c-s-f.ts","node_modules/apache-arrow/fb/tensor-dim.mjs","node_modules/apache-arrow/src/fb/tensor-dim.ts","node_modules/apache-arrow/fb/tensor.mjs","node_modules/apache-arrow/src/fb/tensor.ts","node_modules/apache-arrow/visitor/typeassembler.mjs","node_modules/apache-arrow/src/visitor/typeassembler.ts","node_modules/apache-arrow/ipc/metadata/json.mjs","node_modules/apache-arrow/src/ipc/metadata/json.ts","node_modules/apache-arrow/ipc/writer.mjs","node_modules/apache-arrow/src/ipc/writer.ts","node_modules/apache-arrow/visitor/vectorassembler.mjs","node_modules/apache-arrow/src/visitor/vectorassembler.ts","node_modules/apache-arrow/visitor/jsontypeassembler.mjs","node_modules/apache-arrow/src/visitor/jsontypeassembler.ts","node_modules/apache-arrow/visitor/jsonvectorassembler.mjs","node_modules/apache-arrow/src/visitor/jsonvectorassembler.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired611\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired611\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"9cCWX\", function(module, exports) {\n\n$parcel$export(module.exports, \"AsyncMode\", () => $6b3372b60d35b33f$export$2b8d127b894957b9, (v) => $6b3372b60d35b33f$export$2b8d127b894957b9 = v);\n$parcel$export(module.exports, \"ConcurrentMode\", () => $6b3372b60d35b33f$export$cea3a54a6425200c, (v) => $6b3372b60d35b33f$export$cea3a54a6425200c = v);\n$parcel$export(module.exports, \"ContextConsumer\", () => $6b3372b60d35b33f$export$a7c73072b1a182ae, (v) => $6b3372b60d35b33f$export$a7c73072b1a182ae = v);\n$parcel$export(module.exports, \"ContextProvider\", () => $6b3372b60d35b33f$export$9f27bc3417b4524d, (v) => $6b3372b60d35b33f$export$9f27bc3417b4524d = v);\n$parcel$export(module.exports, \"Element\", () => $6b3372b60d35b33f$export$db77ccec0bb4ccac, (v) => $6b3372b60d35b33f$export$db77ccec0bb4ccac = v);\n$parcel$export(module.exports, \"ForwardRef\", () => $6b3372b60d35b33f$export$8392c0c9d3dcbd35, (v) => $6b3372b60d35b33f$export$8392c0c9d3dcbd35 = v);\n$parcel$export(module.exports, \"Fragment\", () => $6b3372b60d35b33f$export$ffb0004e005737fa, (v) => $6b3372b60d35b33f$export$ffb0004e005737fa = v);\n$parcel$export(module.exports, \"Lazy\", () => $6b3372b60d35b33f$export$b624eff549462981, (v) => $6b3372b60d35b33f$export$b624eff549462981 = v);\n$parcel$export(module.exports, \"Memo\", () => $6b3372b60d35b33f$export$7897aa7841a5380c, (v) => $6b3372b60d35b33f$export$7897aa7841a5380c = v);\n$parcel$export(module.exports, \"Portal\", () => $6b3372b60d35b33f$export$602eac185826482c, (v) => $6b3372b60d35b33f$export$602eac185826482c = v);\n$parcel$export(module.exports, \"Profiler\", () => $6b3372b60d35b33f$export$e2c29f18771995cb, (v) => $6b3372b60d35b33f$export$e2c29f18771995cb = v);\n$parcel$export(module.exports, \"StrictMode\", () => $6b3372b60d35b33f$export$5f8d39834fd61797, (v) => $6b3372b60d35b33f$export$5f8d39834fd61797 = v);\n$parcel$export(module.exports, \"Suspense\", () => $6b3372b60d35b33f$export$74bf444e3cd11ea5, (v) => $6b3372b60d35b33f$export$74bf444e3cd11ea5 = v);\n$parcel$export(module.exports, \"isAsyncMode\", () => $6b3372b60d35b33f$export$92387174baf9b227, (v) => $6b3372b60d35b33f$export$92387174baf9b227 = v);\n$parcel$export(module.exports, \"isConcurrentMode\", () => $6b3372b60d35b33f$export$ec112efeb987d9c6, (v) => $6b3372b60d35b33f$export$ec112efeb987d9c6 = v);\n$parcel$export(module.exports, \"isContextConsumer\", () => $6b3372b60d35b33f$export$b706b080d889d2c9, (v) => $6b3372b60d35b33f$export$b706b080d889d2c9 = v);\n$parcel$export(module.exports, \"isContextProvider\", () => $6b3372b60d35b33f$export$5be5a87408f70ddc, (v) => $6b3372b60d35b33f$export$5be5a87408f70ddc = v);\n$parcel$export(module.exports, \"isElement\", () => $6b3372b60d35b33f$export$45a5e7f76e0caa8d, (v) => $6b3372b60d35b33f$export$45a5e7f76e0caa8d = v);\n$parcel$export(module.exports, \"isForwardRef\", () => $6b3372b60d35b33f$export$455c2e768291efa6, (v) => $6b3372b60d35b33f$export$455c2e768291efa6 = v);\n$parcel$export(module.exports, \"isFragment\", () => $6b3372b60d35b33f$export$9522e17588c12572, (v) => $6b3372b60d35b33f$export$9522e17588c12572 = v);\n$parcel$export(module.exports, \"isLazy\", () => $6b3372b60d35b33f$export$2110ac352bb060b9, (v) => $6b3372b60d35b33f$export$2110ac352bb060b9 = v);\n$parcel$export(module.exports, \"isMemo\", () => $6b3372b60d35b33f$export$56885ab8b9c456ab, (v) => $6b3372b60d35b33f$export$56885ab8b9c456ab = v);\n$parcel$export(module.exports, \"isPortal\", () => $6b3372b60d35b33f$export$d927fcb6adf8f9de, (v) => $6b3372b60d35b33f$export$d927fcb6adf8f9de = v);\n$parcel$export(module.exports, \"isProfiler\", () => $6b3372b60d35b33f$export$b82d16f27459e05a, (v) => $6b3372b60d35b33f$export$b82d16f27459e05a = v);\n$parcel$export(module.exports, \"isStrictMode\", () => $6b3372b60d35b33f$export$522c17b4f5e123e8, (v) => $6b3372b60d35b33f$export$522c17b4f5e123e8 = v);\n$parcel$export(module.exports, \"isSuspense\", () => $6b3372b60d35b33f$export$1aabd8a0274ecfd6, (v) => $6b3372b60d35b33f$export$1aabd8a0274ecfd6 = v);\n$parcel$export(module.exports, \"isValidElementType\", () => $6b3372b60d35b33f$export$9b621391a187a31a, (v) => $6b3372b60d35b33f$export$9b621391a187a31a = v);\n$parcel$export(module.exports, \"typeOf\", () => $6b3372b60d35b33f$export$f5bbd400c2f4426f, (v) => $6b3372b60d35b33f$export$f5bbd400c2f4426f = v);\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var $6b3372b60d35b33f$export$2b8d127b894957b9;\nvar $6b3372b60d35b33f$export$cea3a54a6425200c;\nvar $6b3372b60d35b33f$export$a7c73072b1a182ae;\nvar $6b3372b60d35b33f$export$9f27bc3417b4524d;\nvar $6b3372b60d35b33f$export$db77ccec0bb4ccac;\nvar $6b3372b60d35b33f$export$8392c0c9d3dcbd35;\nvar $6b3372b60d35b33f$export$ffb0004e005737fa;\nvar $6b3372b60d35b33f$export$b624eff549462981;\nvar $6b3372b60d35b33f$export$7897aa7841a5380c;\nvar $6b3372b60d35b33f$export$602eac185826482c;\nvar $6b3372b60d35b33f$export$e2c29f18771995cb;\nvar $6b3372b60d35b33f$export$5f8d39834fd61797;\nvar $6b3372b60d35b33f$export$74bf444e3cd11ea5;\nvar $6b3372b60d35b33f$export$92387174baf9b227;\nvar $6b3372b60d35b33f$export$ec112efeb987d9c6;\nvar $6b3372b60d35b33f$export$b706b080d889d2c9;\nvar $6b3372b60d35b33f$export$5be5a87408f70ddc;\nvar $6b3372b60d35b33f$export$45a5e7f76e0caa8d;\nvar $6b3372b60d35b33f$export$455c2e768291efa6;\nvar $6b3372b60d35b33f$export$9522e17588c12572;\nvar $6b3372b60d35b33f$export$2110ac352bb060b9;\nvar $6b3372b60d35b33f$export$56885ab8b9c456ab;\nvar $6b3372b60d35b33f$export$d927fcb6adf8f9de;\nvar $6b3372b60d35b33f$export$b82d16f27459e05a;\nvar $6b3372b60d35b33f$export$522c17b4f5e123e8;\nvar $6b3372b60d35b33f$export$1aabd8a0274ecfd6;\nvar $6b3372b60d35b33f$export$9b621391a187a31a;\nvar $6b3372b60d35b33f$export$f5bbd400c2f4426f;\n\"use strict\";\nvar $6b3372b60d35b33f$var$b = \"function\" === typeof Symbol && Symbol.for, $6b3372b60d35b33f$var$c = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.element\") : 60103, $6b3372b60d35b33f$var$d = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.portal\") : 60106, $6b3372b60d35b33f$var$e = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.fragment\") : 60107, $6b3372b60d35b33f$var$f = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.strict_mode\") : 60108, $6b3372b60d35b33f$var$g = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.profiler\") : 60114, $6b3372b60d35b33f$var$h = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.provider\") : 60109, $6b3372b60d35b33f$var$k = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.context\") : 60110, $6b3372b60d35b33f$var$l = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.async_mode\") : 60111, $6b3372b60d35b33f$var$m = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.concurrent_mode\") : 60111, $6b3372b60d35b33f$var$n = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.forward_ref\") : 60112, $6b3372b60d35b33f$var$p = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.suspense\") : 60113, $6b3372b60d35b33f$var$q = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.suspense_list\") : 60120, $6b3372b60d35b33f$var$r = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.memo\") : 60115, $6b3372b60d35b33f$var$t = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.lazy\") : 60116, $6b3372b60d35b33f$var$v = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.block\") : 60121, $6b3372b60d35b33f$var$w = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.fundamental\") : 60117, $6b3372b60d35b33f$var$x = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.responder\") : 60118, $6b3372b60d35b33f$var$y = $6b3372b60d35b33f$var$b ? Symbol.for(\"react.scope\") : 60119;\nfunction $6b3372b60d35b33f$var$z(a) {\n    if (\"object\" === typeof a && null !== a) {\n        var u = a.$$typeof;\n        switch(u){\n            case $6b3372b60d35b33f$var$c:\n                switch(a = a.type, a){\n                    case $6b3372b60d35b33f$var$l:\n                    case $6b3372b60d35b33f$var$m:\n                    case $6b3372b60d35b33f$var$e:\n                    case $6b3372b60d35b33f$var$g:\n                    case $6b3372b60d35b33f$var$f:\n                    case $6b3372b60d35b33f$var$p:\n                        return a;\n                    default:\n                        switch(a = a && a.$$typeof, a){\n                            case $6b3372b60d35b33f$var$k:\n                            case $6b3372b60d35b33f$var$n:\n                            case $6b3372b60d35b33f$var$t:\n                            case $6b3372b60d35b33f$var$r:\n                            case $6b3372b60d35b33f$var$h:\n                                return a;\n                            default:\n                                return u;\n                        }\n                }\n            case $6b3372b60d35b33f$var$d:\n                return u;\n        }\n    }\n}\nfunction $6b3372b60d35b33f$var$A(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$m;\n}\n$6b3372b60d35b33f$export$2b8d127b894957b9 = $6b3372b60d35b33f$var$l;\n$6b3372b60d35b33f$export$cea3a54a6425200c = $6b3372b60d35b33f$var$m;\n$6b3372b60d35b33f$export$a7c73072b1a182ae = $6b3372b60d35b33f$var$k;\n$6b3372b60d35b33f$export$9f27bc3417b4524d = $6b3372b60d35b33f$var$h;\n$6b3372b60d35b33f$export$db77ccec0bb4ccac = $6b3372b60d35b33f$var$c;\n$6b3372b60d35b33f$export$8392c0c9d3dcbd35 = $6b3372b60d35b33f$var$n;\n$6b3372b60d35b33f$export$ffb0004e005737fa = $6b3372b60d35b33f$var$e;\n$6b3372b60d35b33f$export$b624eff549462981 = $6b3372b60d35b33f$var$t;\n$6b3372b60d35b33f$export$7897aa7841a5380c = $6b3372b60d35b33f$var$r;\n$6b3372b60d35b33f$export$602eac185826482c = $6b3372b60d35b33f$var$d;\n$6b3372b60d35b33f$export$e2c29f18771995cb = $6b3372b60d35b33f$var$g;\n$6b3372b60d35b33f$export$5f8d39834fd61797 = $6b3372b60d35b33f$var$f;\n$6b3372b60d35b33f$export$74bf444e3cd11ea5 = $6b3372b60d35b33f$var$p;\n$6b3372b60d35b33f$export$92387174baf9b227 = function(a) {\n    return $6b3372b60d35b33f$var$A(a) || $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$l;\n};\n$6b3372b60d35b33f$export$ec112efeb987d9c6 = $6b3372b60d35b33f$var$A;\n$6b3372b60d35b33f$export$b706b080d889d2c9 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$k;\n};\n$6b3372b60d35b33f$export$5be5a87408f70ddc = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$h;\n};\n$6b3372b60d35b33f$export$45a5e7f76e0caa8d = function(a) {\n    return \"object\" === typeof a && null !== a && a.$$typeof === $6b3372b60d35b33f$var$c;\n};\n$6b3372b60d35b33f$export$455c2e768291efa6 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$n;\n};\n$6b3372b60d35b33f$export$9522e17588c12572 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$e;\n};\n$6b3372b60d35b33f$export$2110ac352bb060b9 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$t;\n};\n$6b3372b60d35b33f$export$56885ab8b9c456ab = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$r;\n};\n$6b3372b60d35b33f$export$d927fcb6adf8f9de = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$d;\n};\n$6b3372b60d35b33f$export$b82d16f27459e05a = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$g;\n};\n$6b3372b60d35b33f$export$522c17b4f5e123e8 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$f;\n};\n$6b3372b60d35b33f$export$1aabd8a0274ecfd6 = function(a) {\n    return $6b3372b60d35b33f$var$z(a) === $6b3372b60d35b33f$var$p;\n};\n$6b3372b60d35b33f$export$9b621391a187a31a = function(a) {\n    return \"string\" === typeof a || \"function\" === typeof a || a === $6b3372b60d35b33f$var$e || a === $6b3372b60d35b33f$var$m || a === $6b3372b60d35b33f$var$g || a === $6b3372b60d35b33f$var$f || a === $6b3372b60d35b33f$var$p || a === $6b3372b60d35b33f$var$q || \"object\" === typeof a && null !== a && (a.$$typeof === $6b3372b60d35b33f$var$t || a.$$typeof === $6b3372b60d35b33f$var$r || a.$$typeof === $6b3372b60d35b33f$var$h || a.$$typeof === $6b3372b60d35b33f$var$k || a.$$typeof === $6b3372b60d35b33f$var$n || a.$$typeof === $6b3372b60d35b33f$var$w || a.$$typeof === $6b3372b60d35b33f$var$x || a.$$typeof === $6b3372b60d35b33f$var$y || a.$$typeof === $6b3372b60d35b33f$var$v);\n};\n$6b3372b60d35b33f$export$f5bbd400c2f4426f = $6b3372b60d35b33f$var$z;\n\n});\n\nparcelRegister(\"2pUnB\", function(module, exports) {\n\n$parcel$export(module.exports, \"Children\", () => $1c29a66706a62afd$export$dca3b0875bd9a954, (v) => $1c29a66706a62afd$export$dca3b0875bd9a954 = v);\n$parcel$export(module.exports, \"Component\", () => $1c29a66706a62afd$export$16fa2f45be04daa8, (v) => $1c29a66706a62afd$export$16fa2f45be04daa8 = v);\n$parcel$export(module.exports, \"Fragment\", () => $1c29a66706a62afd$export$ffb0004e005737fa, (v) => $1c29a66706a62afd$export$ffb0004e005737fa = v);\n$parcel$export(module.exports, \"Profiler\", () => $1c29a66706a62afd$export$e2c29f18771995cb, (v) => $1c29a66706a62afd$export$e2c29f18771995cb = v);\n$parcel$export(module.exports, \"PureComponent\", () => $1c29a66706a62afd$export$221d75b3f55bb0bd, (v) => $1c29a66706a62afd$export$221d75b3f55bb0bd = v);\n$parcel$export(module.exports, \"StrictMode\", () => $1c29a66706a62afd$export$5f8d39834fd61797, (v) => $1c29a66706a62afd$export$5f8d39834fd61797 = v);\n$parcel$export(module.exports, \"Suspense\", () => $1c29a66706a62afd$export$74bf444e3cd11ea5, (v) => $1c29a66706a62afd$export$74bf444e3cd11ea5 = v);\n$parcel$export(module.exports, \"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\", () => $1c29a66706a62afd$export$ae55be85d98224ed, (v) => $1c29a66706a62afd$export$ae55be85d98224ed = v);\n$parcel$export(module.exports, \"cloneElement\", () => $1c29a66706a62afd$export$e530037191fcd5d7, (v) => $1c29a66706a62afd$export$e530037191fcd5d7 = v);\n$parcel$export(module.exports, \"createContext\", () => $1c29a66706a62afd$export$fd42f52fd3ae1109, (v) => $1c29a66706a62afd$export$fd42f52fd3ae1109 = v);\n$parcel$export(module.exports, \"createElement\", () => $1c29a66706a62afd$export$c8a8987d4410bf2d, (v) => $1c29a66706a62afd$export$c8a8987d4410bf2d = v);\n$parcel$export(module.exports, \"createFactory\", () => $1c29a66706a62afd$export$d38cd72104c1f0e9, (v) => $1c29a66706a62afd$export$d38cd72104c1f0e9 = v);\n$parcel$export(module.exports, \"createRef\", () => $1c29a66706a62afd$export$7d1e3a5e95ceca43, (v) => $1c29a66706a62afd$export$7d1e3a5e95ceca43 = v);\n$parcel$export(module.exports, \"forwardRef\", () => $1c29a66706a62afd$export$257a8862b851cb5b, (v) => $1c29a66706a62afd$export$257a8862b851cb5b = v);\n$parcel$export(module.exports, \"isValidElement\", () => $1c29a66706a62afd$export$a8257692ac88316c, (v) => $1c29a66706a62afd$export$a8257692ac88316c = v);\n$parcel$export(module.exports, \"lazy\", () => $1c29a66706a62afd$export$488013bae63b21da, (v) => $1c29a66706a62afd$export$488013bae63b21da = v);\n$parcel$export(module.exports, \"memo\", () => $1c29a66706a62afd$export$7c73462e0d25e514, (v) => $1c29a66706a62afd$export$7c73462e0d25e514 = v);\n$parcel$export(module.exports, \"useCallback\", () => $1c29a66706a62afd$export$35808ee640e87ca7, (v) => $1c29a66706a62afd$export$35808ee640e87ca7 = v);\n$parcel$export(module.exports, \"useContext\", () => $1c29a66706a62afd$export$fae74005e78b1a27, (v) => $1c29a66706a62afd$export$fae74005e78b1a27 = v);\n$parcel$export(module.exports, \"useDebugValue\", () => $1c29a66706a62afd$export$dc8fbce3eb94dc1e, (v) => $1c29a66706a62afd$export$dc8fbce3eb94dc1e = v);\n$parcel$export(module.exports, \"useEffect\", () => $1c29a66706a62afd$export$6d9c69b0de29b591, (v) => $1c29a66706a62afd$export$6d9c69b0de29b591 = v);\n$parcel$export(module.exports, \"useImperativeHandle\", () => $1c29a66706a62afd$export$d5a552a76deda3c2, (v) => $1c29a66706a62afd$export$d5a552a76deda3c2 = v);\n$parcel$export(module.exports, \"useLayoutEffect\", () => $1c29a66706a62afd$export$e5c5a5f917a5871c, (v) => $1c29a66706a62afd$export$e5c5a5f917a5871c = v);\n$parcel$export(module.exports, \"useMemo\", () => $1c29a66706a62afd$export$1538c33de8887b59, (v) => $1c29a66706a62afd$export$1538c33de8887b59 = v);\n$parcel$export(module.exports, \"useReducer\", () => $1c29a66706a62afd$export$13e3392192263954, (v) => $1c29a66706a62afd$export$13e3392192263954 = v);\n$parcel$export(module.exports, \"useRef\", () => $1c29a66706a62afd$export$b8f5890fc79d6aca, (v) => $1c29a66706a62afd$export$b8f5890fc79d6aca = v);\n$parcel$export(module.exports, \"useState\", () => $1c29a66706a62afd$export$60241385465d0a34, (v) => $1c29a66706a62afd$export$60241385465d0a34 = v);\n$parcel$export(module.exports, \"version\", () => $1c29a66706a62afd$export$83d89fbfd8236492, (v) => $1c29a66706a62afd$export$83d89fbfd8236492 = v);\n/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var $1c29a66706a62afd$export$dca3b0875bd9a954;\nvar $1c29a66706a62afd$export$16fa2f45be04daa8;\nvar $1c29a66706a62afd$export$ffb0004e005737fa;\nvar $1c29a66706a62afd$export$e2c29f18771995cb;\nvar $1c29a66706a62afd$export$221d75b3f55bb0bd;\nvar $1c29a66706a62afd$export$5f8d39834fd61797;\nvar $1c29a66706a62afd$export$74bf444e3cd11ea5;\nvar $1c29a66706a62afd$export$ae55be85d98224ed;\nvar $1c29a66706a62afd$export$e530037191fcd5d7;\nvar $1c29a66706a62afd$export$fd42f52fd3ae1109;\nvar $1c29a66706a62afd$export$c8a8987d4410bf2d;\nvar $1c29a66706a62afd$export$d38cd72104c1f0e9;\nvar $1c29a66706a62afd$export$7d1e3a5e95ceca43;\nvar $1c29a66706a62afd$export$257a8862b851cb5b;\nvar $1c29a66706a62afd$export$a8257692ac88316c;\nvar $1c29a66706a62afd$export$488013bae63b21da;\nvar $1c29a66706a62afd$export$7c73462e0d25e514;\nvar $1c29a66706a62afd$export$35808ee640e87ca7;\nvar $1c29a66706a62afd$export$fae74005e78b1a27;\nvar $1c29a66706a62afd$export$dc8fbce3eb94dc1e;\nvar $1c29a66706a62afd$export$6d9c69b0de29b591;\nvar $1c29a66706a62afd$export$d5a552a76deda3c2;\nvar $1c29a66706a62afd$export$e5c5a5f917a5871c;\nvar $1c29a66706a62afd$export$1538c33de8887b59;\nvar $1c29a66706a62afd$export$13e3392192263954;\nvar $1c29a66706a62afd$export$b8f5890fc79d6aca;\nvar $1c29a66706a62afd$export$60241385465d0a34;\nvar $1c29a66706a62afd$export$83d89fbfd8236492;\n\"use strict\";\n\nvar $8coUR = parcelRequire(\"8coUR\");\nvar $1c29a66706a62afd$var$n = \"function\" === typeof Symbol && Symbol.for, $1c29a66706a62afd$var$p = $1c29a66706a62afd$var$n ? Symbol.for(\"react.element\") : 60103, $1c29a66706a62afd$var$q = $1c29a66706a62afd$var$n ? Symbol.for(\"react.portal\") : 60106, $1c29a66706a62afd$var$r = $1c29a66706a62afd$var$n ? Symbol.for(\"react.fragment\") : 60107, $1c29a66706a62afd$var$t = $1c29a66706a62afd$var$n ? Symbol.for(\"react.strict_mode\") : 60108, $1c29a66706a62afd$var$u = $1c29a66706a62afd$var$n ? Symbol.for(\"react.profiler\") : 60114, $1c29a66706a62afd$var$v = $1c29a66706a62afd$var$n ? Symbol.for(\"react.provider\") : 60109, $1c29a66706a62afd$var$w = $1c29a66706a62afd$var$n ? Symbol.for(\"react.context\") : 60110, $1c29a66706a62afd$var$x = $1c29a66706a62afd$var$n ? Symbol.for(\"react.forward_ref\") : 60112, $1c29a66706a62afd$var$y = $1c29a66706a62afd$var$n ? Symbol.for(\"react.suspense\") : 60113, $1c29a66706a62afd$var$z = $1c29a66706a62afd$var$n ? Symbol.for(\"react.memo\") : 60115, $1c29a66706a62afd$var$A = $1c29a66706a62afd$var$n ? Symbol.for(\"react.lazy\") : 60116, $1c29a66706a62afd$var$B = \"function\" === typeof Symbol && Symbol.iterator;\nfunction $1c29a66706a62afd$var$C(a) {\n    for(var b = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 1; c < arguments.length; c++)b += \"&args[]=\" + encodeURIComponent(arguments[c]);\n    return \"Minified React error #\" + a + \"; visit \" + b + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\";\n}\nvar $1c29a66706a62afd$var$D = {\n    isMounted: function() {\n        return !1;\n    },\n    enqueueForceUpdate: function() {},\n    enqueueReplaceState: function() {},\n    enqueueSetState: function() {}\n}, $1c29a66706a62afd$var$E = {};\nfunction $1c29a66706a62afd$var$F(a, b, c) {\n    this.props = a;\n    this.context = b;\n    this.refs = $1c29a66706a62afd$var$E;\n    this.updater = c || $1c29a66706a62afd$var$D;\n}\n$1c29a66706a62afd$var$F.prototype.isReactComponent = {};\n$1c29a66706a62afd$var$F.prototype.setState = function(a, b) {\n    if (\"object\" !== typeof a && \"function\" !== typeof a && null != a) throw Error($1c29a66706a62afd$var$C(85));\n    this.updater.enqueueSetState(this, a, b, \"setState\");\n};\n$1c29a66706a62afd$var$F.prototype.forceUpdate = function(a) {\n    this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n};\nfunction $1c29a66706a62afd$var$G() {}\n$1c29a66706a62afd$var$G.prototype = $1c29a66706a62afd$var$F.prototype;\nfunction $1c29a66706a62afd$var$H(a, b, c) {\n    this.props = a;\n    this.context = b;\n    this.refs = $1c29a66706a62afd$var$E;\n    this.updater = c || $1c29a66706a62afd$var$D;\n}\nvar $1c29a66706a62afd$var$I = $1c29a66706a62afd$var$H.prototype = new $1c29a66706a62afd$var$G;\n$1c29a66706a62afd$var$I.constructor = $1c29a66706a62afd$var$H;\n$8coUR($1c29a66706a62afd$var$I, $1c29a66706a62afd$var$F.prototype);\n$1c29a66706a62afd$var$I.isPureReactComponent = !0;\nvar $1c29a66706a62afd$var$J = {\n    current: null\n}, $1c29a66706a62afd$var$K = Object.prototype.hasOwnProperty, $1c29a66706a62afd$var$L = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n};\nfunction $1c29a66706a62afd$var$M(a, b, c) {\n    var e, d = {}, g = null, k = null;\n    if (null != b) for(e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = \"\" + b.key), b)$1c29a66706a62afd$var$K.call(b, e) && !$1c29a66706a62afd$var$L.hasOwnProperty(e) && (d[e] = b[e]);\n    var f = arguments.length - 2;\n    if (1 === f) d.children = c;\n    else if (1 < f) {\n        for(var h = Array(f), m = 0; m < f; m++)h[m] = arguments[m + 2];\n        d.children = h;\n    }\n    if (a && a.defaultProps) for(e in f = a.defaultProps, f)void 0 === d[e] && (d[e] = f[e]);\n    return {\n        $$typeof: $1c29a66706a62afd$var$p,\n        type: a,\n        key: g,\n        ref: k,\n        props: d,\n        _owner: $1c29a66706a62afd$var$J.current\n    };\n}\nfunction $1c29a66706a62afd$var$N(a, b) {\n    return {\n        $$typeof: $1c29a66706a62afd$var$p,\n        type: a.type,\n        key: b,\n        ref: a.ref,\n        props: a.props,\n        _owner: a._owner\n    };\n}\nfunction $1c29a66706a62afd$var$O(a) {\n    return \"object\" === typeof a && null !== a && a.$$typeof === $1c29a66706a62afd$var$p;\n}\nfunction $1c29a66706a62afd$var$escape(a) {\n    var b = {\n        \"=\": \"=0\",\n        \":\": \"=2\"\n    };\n    return \"$\" + (\"\" + a).replace(/[=:]/g, function(a) {\n        return b[a];\n    });\n}\nvar $1c29a66706a62afd$var$P = /\\/+/g, $1c29a66706a62afd$var$Q = [];\nfunction $1c29a66706a62afd$var$R(a, b, c, e) {\n    if ($1c29a66706a62afd$var$Q.length) {\n        var d = $1c29a66706a62afd$var$Q.pop();\n        d.result = a;\n        d.keyPrefix = b;\n        d.func = c;\n        d.context = e;\n        d.count = 0;\n        return d;\n    }\n    return {\n        result: a,\n        keyPrefix: b,\n        func: c,\n        context: e,\n        count: 0\n    };\n}\nfunction $1c29a66706a62afd$var$S(a) {\n    a.result = null;\n    a.keyPrefix = null;\n    a.func = null;\n    a.context = null;\n    a.count = 0;\n    10 > $1c29a66706a62afd$var$Q.length && $1c29a66706a62afd$var$Q.push(a);\n}\nfunction $1c29a66706a62afd$var$T(a, b, c, e) {\n    var d = typeof a;\n    if (\"undefined\" === d || \"boolean\" === d) a = null;\n    var g = !1;\n    if (null === a) g = !0;\n    else switch(d){\n        case \"string\":\n        case \"number\":\n            g = !0;\n            break;\n        case \"object\":\n            switch(a.$$typeof){\n                case $1c29a66706a62afd$var$p:\n                case $1c29a66706a62afd$var$q:\n                    g = !0;\n            }\n    }\n    if (g) return c(e, a, \"\" === b ? \".\" + $1c29a66706a62afd$var$U(a, 0) : b), 1;\n    g = 0;\n    b = \"\" === b ? \".\" : b + \":\";\n    if (Array.isArray(a)) for(var k = 0; k < a.length; k++){\n        d = a[k];\n        var f = b + $1c29a66706a62afd$var$U(d, k);\n        g += $1c29a66706a62afd$var$T(d, f, c, e);\n    }\n    else if (null === a || \"object\" !== typeof a ? f = null : (f = $1c29a66706a62afd$var$B && a[$1c29a66706a62afd$var$B] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f) for(a = f.call(a), k = 0; !(d = a.next()).done;)d = d.value, f = b + $1c29a66706a62afd$var$U(d, k++), g += $1c29a66706a62afd$var$T(d, f, c, e);\n    else if (\"object\" === d) throw c = \"\" + a, Error($1c29a66706a62afd$var$C(31, \"[object Object]\" === c ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : c, \"\"));\n    return g;\n}\nfunction $1c29a66706a62afd$var$V(a, b, c) {\n    return null == a ? 0 : $1c29a66706a62afd$var$T(a, \"\", b, c);\n}\nfunction $1c29a66706a62afd$var$U(a, b) {\n    return \"object\" === typeof a && null !== a && null != a.key ? $1c29a66706a62afd$var$escape(a.key) : b.toString(36);\n}\nfunction $1c29a66706a62afd$var$W(a, b) {\n    a.func.call(a.context, b, a.count++);\n}\nfunction $1c29a66706a62afd$var$aa(a, b, c) {\n    var e = a.result, d = a.keyPrefix;\n    a = a.func.call(a.context, b, a.count++);\n    Array.isArray(a) ? $1c29a66706a62afd$var$X(a, e, c, function(a) {\n        return a;\n    }) : null != a && ($1c29a66706a62afd$var$O(a) && (a = $1c29a66706a62afd$var$N(a, d + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace($1c29a66706a62afd$var$P, \"$&/\") + \"/\") + c)), e.push(a));\n}\nfunction $1c29a66706a62afd$var$X(a, b, c, e, d) {\n    var g = \"\";\n    null != c && (g = (\"\" + c).replace($1c29a66706a62afd$var$P, \"$&/\") + \"/\");\n    b = $1c29a66706a62afd$var$R(b, g, e, d);\n    $1c29a66706a62afd$var$V(a, $1c29a66706a62afd$var$aa, b);\n    $1c29a66706a62afd$var$S(b);\n}\nvar $1c29a66706a62afd$var$Y = {\n    current: null\n};\nfunction $1c29a66706a62afd$var$Z() {\n    var a = $1c29a66706a62afd$var$Y.current;\n    if (null === a) throw Error($1c29a66706a62afd$var$C(321));\n    return a;\n}\nvar $1c29a66706a62afd$var$ba = {\n    ReactCurrentDispatcher: $1c29a66706a62afd$var$Y,\n    ReactCurrentBatchConfig: {\n        suspense: null\n    },\n    ReactCurrentOwner: $1c29a66706a62afd$var$J,\n    IsSomeRendererActing: {\n        current: !1\n    },\n    assign: $8coUR\n};\n$1c29a66706a62afd$export$dca3b0875bd9a954 = {\n    map: function(a, b, c) {\n        if (null == a) return a;\n        var e = [];\n        $1c29a66706a62afd$var$X(a, e, null, b, c);\n        return e;\n    },\n    forEach: function(a, b, c) {\n        if (null == a) return a;\n        b = $1c29a66706a62afd$var$R(null, null, b, c);\n        $1c29a66706a62afd$var$V(a, $1c29a66706a62afd$var$W, b);\n        $1c29a66706a62afd$var$S(b);\n    },\n    count: function(a) {\n        return $1c29a66706a62afd$var$V(a, function() {\n            return null;\n        }, null);\n    },\n    toArray: function(a) {\n        var b = [];\n        $1c29a66706a62afd$var$X(a, b, null, function(a) {\n            return a;\n        });\n        return b;\n    },\n    only: function(a) {\n        if (!$1c29a66706a62afd$var$O(a)) throw Error($1c29a66706a62afd$var$C(143));\n        return a;\n    }\n};\n$1c29a66706a62afd$export$16fa2f45be04daa8 = $1c29a66706a62afd$var$F;\n$1c29a66706a62afd$export$ffb0004e005737fa = $1c29a66706a62afd$var$r;\n$1c29a66706a62afd$export$e2c29f18771995cb = $1c29a66706a62afd$var$u;\n$1c29a66706a62afd$export$221d75b3f55bb0bd = $1c29a66706a62afd$var$H;\n$1c29a66706a62afd$export$5f8d39834fd61797 = $1c29a66706a62afd$var$t;\n$1c29a66706a62afd$export$74bf444e3cd11ea5 = $1c29a66706a62afd$var$y;\n$1c29a66706a62afd$export$ae55be85d98224ed = $1c29a66706a62afd$var$ba;\n$1c29a66706a62afd$export$e530037191fcd5d7 = function(a, b, c) {\n    if (null === a || void 0 === a) throw Error($1c29a66706a62afd$var$C(267, a));\n    var e = $8coUR({}, a.props), d = a.key, g = a.ref, k = a._owner;\n    if (null != b) {\n        void 0 !== b.ref && (g = b.ref, k = $1c29a66706a62afd$var$J.current);\n        void 0 !== b.key && (d = \"\" + b.key);\n        if (a.type && a.type.defaultProps) var f = a.type.defaultProps;\n        for(h in b)$1c29a66706a62afd$var$K.call(b, h) && !$1c29a66706a62afd$var$L.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);\n    }\n    var h = arguments.length - 2;\n    if (1 === h) e.children = c;\n    else if (1 < h) {\n        f = Array(h);\n        for(var m = 0; m < h; m++)f[m] = arguments[m + 2];\n        e.children = f;\n    }\n    return {\n        $$typeof: $1c29a66706a62afd$var$p,\n        type: a.type,\n        key: d,\n        ref: g,\n        props: e,\n        _owner: k\n    };\n};\n$1c29a66706a62afd$export$fd42f52fd3ae1109 = function(a, b) {\n    void 0 === b && (b = null);\n    a = {\n        $$typeof: $1c29a66706a62afd$var$w,\n        _calculateChangedBits: b,\n        _currentValue: a,\n        _currentValue2: a,\n        _threadCount: 0,\n        Provider: null,\n        Consumer: null\n    };\n    a.Provider = {\n        $$typeof: $1c29a66706a62afd$var$v,\n        _context: a\n    };\n    return a.Consumer = a;\n};\n$1c29a66706a62afd$export$c8a8987d4410bf2d = $1c29a66706a62afd$var$M;\n$1c29a66706a62afd$export$d38cd72104c1f0e9 = function(a) {\n    var b = $1c29a66706a62afd$var$M.bind(null, a);\n    b.type = a;\n    return b;\n};\n$1c29a66706a62afd$export$7d1e3a5e95ceca43 = function() {\n    return {\n        current: null\n    };\n};\n$1c29a66706a62afd$export$257a8862b851cb5b = function(a) {\n    return {\n        $$typeof: $1c29a66706a62afd$var$x,\n        render: a\n    };\n};\n$1c29a66706a62afd$export$a8257692ac88316c = $1c29a66706a62afd$var$O;\n$1c29a66706a62afd$export$488013bae63b21da = function(a) {\n    return {\n        $$typeof: $1c29a66706a62afd$var$A,\n        _ctor: a,\n        _status: -1,\n        _result: null\n    };\n};\n$1c29a66706a62afd$export$7c73462e0d25e514 = function(a, b) {\n    return {\n        $$typeof: $1c29a66706a62afd$var$z,\n        type: a,\n        compare: void 0 === b ? null : b\n    };\n};\n$1c29a66706a62afd$export$35808ee640e87ca7 = function(a, b) {\n    return $1c29a66706a62afd$var$Z().useCallback(a, b);\n};\n$1c29a66706a62afd$export$fae74005e78b1a27 = function(a, b) {\n    return $1c29a66706a62afd$var$Z().useContext(a, b);\n};\n$1c29a66706a62afd$export$dc8fbce3eb94dc1e = function() {};\n$1c29a66706a62afd$export$6d9c69b0de29b591 = function(a, b) {\n    return $1c29a66706a62afd$var$Z().useEffect(a, b);\n};\n$1c29a66706a62afd$export$d5a552a76deda3c2 = function(a, b, c) {\n    return $1c29a66706a62afd$var$Z().useImperativeHandle(a, b, c);\n};\n$1c29a66706a62afd$export$e5c5a5f917a5871c = function(a, b) {\n    return $1c29a66706a62afd$var$Z().useLayoutEffect(a, b);\n};\n$1c29a66706a62afd$export$1538c33de8887b59 = function(a, b) {\n    return $1c29a66706a62afd$var$Z().useMemo(a, b);\n};\n$1c29a66706a62afd$export$13e3392192263954 = function(a, b, c) {\n    return $1c29a66706a62afd$var$Z().useReducer(a, b, c);\n};\n$1c29a66706a62afd$export$b8f5890fc79d6aca = function(a) {\n    return $1c29a66706a62afd$var$Z().useRef(a);\n};\n$1c29a66706a62afd$export$60241385465d0a34 = function(a) {\n    return $1c29a66706a62afd$var$Z().useState(a);\n};\n$1c29a66706a62afd$export$83d89fbfd8236492 = \"16.14.0\";\n\n});\nparcelRegister(\"8coUR\", function(module, exports) {\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/ \"use strict\";\n/* eslint-disable no-unused-vars */ var $5f82c58e3d599bd6$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar $5f82c58e3d599bd6$var$hasOwnProperty = Object.prototype.hasOwnProperty;\nvar $5f82c58e3d599bd6$var$propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction $5f82c58e3d599bd6$var$toObject(val) {\n    if (val === null || val === undefined) throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n    return Object(val);\n}\nfunction $5f82c58e3d599bd6$var$shouldUseNative() {\n    try {\n        if (!Object.assign) return false;\n        // Detect buggy property enumeration order in older V8 versions.\n        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n        var test1 = new String(\"abc\"); // eslint-disable-line no-new-wrappers\n        test1[5] = \"de\";\n        if (Object.getOwnPropertyNames(test1)[0] === \"5\") return false;\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test2 = {};\n        for(var i = 0; i < 10; i++)test2[\"_\" + String.fromCharCode(i)] = i;\n        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {\n            return test2[n];\n        });\n        if (order2.join(\"\") !== \"0123456789\") return false;\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test3 = {};\n        \"abcdefghijklmnopqrst\".split(\"\").forEach(function(letter) {\n            test3[letter] = letter;\n        });\n        if (Object.keys(Object.assign({}, test3)).join(\"\") !== \"abcdefghijklmnopqrst\") return false;\n        return true;\n    } catch (err) {\n        // We don't expect any of the above to throw, but better to be safe.\n        return false;\n    }\n}\nmodule.exports = $5f82c58e3d599bd6$var$shouldUseNative() ? Object.assign : function(target, source) {\n    var from;\n    var to = $5f82c58e3d599bd6$var$toObject(target);\n    var symbols;\n    for(var s = 1; s < arguments.length; s++){\n        from = Object(arguments[s]);\n        for(var key in from)if ($5f82c58e3d599bd6$var$hasOwnProperty.call(from, key)) to[key] = from[key];\n        if ($5f82c58e3d599bd6$var$getOwnPropertySymbols) {\n            symbols = $5f82c58e3d599bd6$var$getOwnPropertySymbols(from);\n            for(var i = 0; i < symbols.length; i++)if ($5f82c58e3d599bd6$var$propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];\n        }\n    }\n    return to;\n};\n\n});\n\n\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $3233927aa82734f9$var$t = globalThis, $3233927aa82734f9$export$b4d10f6001c083c2 = $3233927aa82734f9$var$t.ShadowRoot && (void 0 === $3233927aa82734f9$var$t.ShadyCSS || $3233927aa82734f9$var$t.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype, $3233927aa82734f9$var$s = Symbol(), $3233927aa82734f9$var$o = new WeakMap;\nclass $3233927aa82734f9$export$505d1e8739bad805 {\n    constructor(t, e, o){\n        if (this._$cssResult$ = !0, o !== $3233927aa82734f9$var$s) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n        this.cssText = t, this.t = e;\n    }\n    get styleSheet() {\n        let t = this.o;\n        const s = this.t;\n        if ($3233927aa82734f9$export$b4d10f6001c083c2 && void 0 === t) {\n            const e = void 0 !== s && 1 === s.length;\n            e && (t = $3233927aa82734f9$var$o.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet).replaceSync(this.cssText), e && $3233927aa82734f9$var$o.set(s, t));\n        }\n        return t;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\nconst $3233927aa82734f9$export$8d80f9cac07cdb3 = (t)=>new $3233927aa82734f9$export$505d1e8739bad805(\"string\" == typeof t ? t : t + \"\", void 0, $3233927aa82734f9$var$s), $3233927aa82734f9$export$dbf350e5966cf602 = (t, ...e)=>{\n    const o = 1 === t.length ? t[0] : e.reduce((e, s, o)=>e + ((t)=>{\n            if (!0 === t._$cssResult$) return t.cssText;\n            if (\"number\" == typeof t) return t;\n            throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + t + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n        })(s) + t[o + 1], t[0]);\n    return new $3233927aa82734f9$export$505d1e8739bad805(o, t, $3233927aa82734f9$var$s);\n}, $3233927aa82734f9$export$2ca4a66ec4cecb90 = (s, o)=>{\n    if ($3233927aa82734f9$export$b4d10f6001c083c2) s.adoptedStyleSheets = o.map((t)=>t instanceof CSSStyleSheet ? t : t.styleSheet);\n    else for (const e of o){\n        const o = document.createElement(\"style\"), n = $3233927aa82734f9$var$t.litNonce;\n        void 0 !== n && o.setAttribute(\"nonce\", n), o.textContent = e.cssText, s.appendChild(o);\n    }\n}, $3233927aa82734f9$export$ee69dfd951e24778 = $3233927aa82734f9$export$b4d10f6001c083c2 ? (t)=>t : (t)=>t instanceof CSSStyleSheet ? ((t)=>{\n        let e = \"\";\n        for (const s of t.cssRules)e += s.cssText;\n        return $3233927aa82734f9$export$8d80f9cac07cdb3(e);\n    })(t) : t;\n\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const { is: $27fcf98b67c2a783$var$i, defineProperty: $27fcf98b67c2a783$var$e, getOwnPropertyDescriptor: $27fcf98b67c2a783$var$r, getOwnPropertyNames: $27fcf98b67c2a783$var$h, getOwnPropertySymbols: $27fcf98b67c2a783$var$o, getPrototypeOf: $27fcf98b67c2a783$var$n } = Object, $27fcf98b67c2a783$var$a = globalThis, $27fcf98b67c2a783$var$c = $27fcf98b67c2a783$var$a.trustedTypes, $27fcf98b67c2a783$var$l = $27fcf98b67c2a783$var$c ? $27fcf98b67c2a783$var$c.emptyScript : \"\", $27fcf98b67c2a783$var$p = $27fcf98b67c2a783$var$a.reactiveElementPolyfillSupport, $27fcf98b67c2a783$var$d = (t, s)=>t, $27fcf98b67c2a783$export$7312b35fbf521afb = {\n    toAttribute (t, s) {\n        switch(s){\n            case Boolean:\n                t = t ? $27fcf98b67c2a783$var$l : null;\n                break;\n            case Object:\n            case Array:\n                t = null == t ? t : JSON.stringify(t);\n        }\n        return t;\n    },\n    fromAttribute (t, s) {\n        let i = t;\n        switch(s){\n            case Boolean:\n                i = null !== t;\n                break;\n            case Number:\n                i = null === t ? null : Number(t);\n                break;\n            case Object:\n            case Array:\n                try {\n                    i = JSON.parse(t);\n                } catch (t) {\n                    i = null;\n                }\n        }\n        return i;\n    }\n}, $27fcf98b67c2a783$export$53a6892c50694894 = (t, s)=>!$27fcf98b67c2a783$var$i(t, s), $27fcf98b67c2a783$var$y = {\n    attribute: !0,\n    type: String,\n    converter: $27fcf98b67c2a783$export$7312b35fbf521afb,\n    reflect: !1,\n    hasChanged: $27fcf98b67c2a783$export$53a6892c50694894\n};\nSymbol.metadata ??= Symbol(\"metadata\"), $27fcf98b67c2a783$var$a.litPropertyMetadata ??= new WeakMap;\nclass $27fcf98b67c2a783$export$c7c07a37856565d extends HTMLElement {\n    static addInitializer(t) {\n        this._$Ei(), (this.l ??= []).push(t);\n    }\n    static get observedAttributes() {\n        return this.finalize(), this._$Eh && [\n            ...this._$Eh.keys()\n        ];\n    }\n    static createProperty(t, s = $27fcf98b67c2a783$var$y) {\n        if (s.state && (s.attribute = !1), this._$Ei(), this.elementProperties.set(t, s), !s.noAccessor) {\n            const i = Symbol(), r = this.getPropertyDescriptor(t, i, s);\n            void 0 !== r && $27fcf98b67c2a783$var$e(this.prototype, t, r);\n        }\n    }\n    static getPropertyDescriptor(t, s, i) {\n        const { get: e, set: h } = $27fcf98b67c2a783$var$r(this.prototype, t) ?? {\n            get () {\n                return this[s];\n            },\n            set (t) {\n                this[s] = t;\n            }\n        };\n        return {\n            get () {\n                return e?.call(this);\n            },\n            set (s) {\n                const r = e?.call(this);\n                h.call(this, s), this.requestUpdate(t, r, i);\n            },\n            configurable: !0,\n            enumerable: !0\n        };\n    }\n    static getPropertyOptions(t) {\n        return this.elementProperties.get(t) ?? $27fcf98b67c2a783$var$y;\n    }\n    static _$Ei() {\n        if (this.hasOwnProperty($27fcf98b67c2a783$var$d(\"elementProperties\"))) return;\n        const t = $27fcf98b67c2a783$var$n(this);\n        t.finalize(), void 0 !== t.l && (this.l = [\n            ...t.l\n        ]), this.elementProperties = new Map(t.elementProperties);\n    }\n    static finalize() {\n        if (this.hasOwnProperty($27fcf98b67c2a783$var$d(\"finalized\"))) return;\n        if (this.finalized = !0, this._$Ei(), this.hasOwnProperty($27fcf98b67c2a783$var$d(\"properties\"))) {\n            const t = this.properties, s = [\n                ...$27fcf98b67c2a783$var$h(t),\n                ...$27fcf98b67c2a783$var$o(t)\n            ];\n            for (const i of s)this.createProperty(i, t[i]);\n        }\n        const t = this[Symbol.metadata];\n        if (null !== t) {\n            const s = litPropertyMetadata.get(t);\n            if (void 0 !== s) for (const [t, i] of s)this.elementProperties.set(t, i);\n        }\n        this._$Eh = new Map;\n        for (const [t, s] of this.elementProperties){\n            const i = this._$Eu(t, s);\n            void 0 !== i && this._$Eh.set(i, t);\n        }\n        this.elementStyles = this.finalizeStyles(this.styles);\n    }\n    static finalizeStyles(s) {\n        const i = [];\n        if (Array.isArray(s)) {\n            const e = new Set(s.flat(1 / 0).reverse());\n            for (const s of e)i.unshift((0, $3233927aa82734f9$export$ee69dfd951e24778)(s));\n        } else void 0 !== s && i.push((0, $3233927aa82734f9$export$ee69dfd951e24778)(s));\n        return i;\n    }\n    static _$Eu(t, s) {\n        const i = s.attribute;\n        return !1 === i ? void 0 : \"string\" == typeof i ? i : \"string\" == typeof t ? t.toLowerCase() : void 0;\n    }\n    constructor(){\n        super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();\n    }\n    _$Ev() {\n        this._$ES = new Promise((t)=>this.enableUpdating = t), this._$AL = new Map, this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t)=>t(this));\n    }\n    addController(t) {\n        (this._$EO ??= new Set).add(t), void 0 !== this.renderRoot && this.isConnected && t.hostConnected?.();\n    }\n    removeController(t) {\n        this._$EO?.delete(t);\n    }\n    _$E_() {\n        const t = new Map, s = this.constructor.elementProperties;\n        for (const i of s.keys())this.hasOwnProperty(i) && (t.set(i, this[i]), delete this[i]);\n        t.size > 0 && (this._$Ep = t);\n    }\n    createRenderRoot() {\n        const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n        return (0, $3233927aa82734f9$export$2ca4a66ec4cecb90)(t, this.constructor.elementStyles), t;\n    }\n    connectedCallback() {\n        this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(!0), this._$EO?.forEach((t)=>t.hostConnected?.());\n    }\n    enableUpdating(t) {}\n    disconnectedCallback() {\n        this._$EO?.forEach((t)=>t.hostDisconnected?.());\n    }\n    attributeChangedCallback(t, s, i) {\n        this._$AK(t, i);\n    }\n    _$EC(t, s) {\n        const i = this.constructor.elementProperties.get(t), e = this.constructor._$Eu(t, i);\n        if (void 0 !== e && !0 === i.reflect) {\n            const r = (void 0 !== i.converter?.toAttribute ? i.converter : $27fcf98b67c2a783$export$7312b35fbf521afb).toAttribute(s, i.type);\n            this._$Em = t, null == r ? this.removeAttribute(e) : this.setAttribute(e, r), this._$Em = null;\n        }\n    }\n    _$AK(t, s) {\n        const i = this.constructor, e = i._$Eh.get(t);\n        if (void 0 !== e && this._$Em !== e) {\n            const t = i.getPropertyOptions(e), r = \"function\" == typeof t.converter ? {\n                fromAttribute: t.converter\n            } : void 0 !== t.converter?.fromAttribute ? t.converter : $27fcf98b67c2a783$export$7312b35fbf521afb;\n            this._$Em = e, this[e] = r.fromAttribute(s, t.type), this._$Em = null;\n        }\n    }\n    requestUpdate(t, s, i) {\n        if (void 0 !== t) {\n            if (i ??= this.constructor.getPropertyOptions(t), !(i.hasChanged ?? $27fcf98b67c2a783$export$53a6892c50694894)(this[t], s)) return;\n            this.P(t, s, i);\n        }\n        !1 === this.isUpdatePending && (this._$ES = this._$ET());\n    }\n    P(t, s, i) {\n        this._$AL.has(t) || this._$AL.set(t, s), !0 === i.reflect && this._$Em !== t && (this._$Ej ??= new Set).add(t);\n    }\n    async _$ET() {\n        this.isUpdatePending = !0;\n        try {\n            await this._$ES;\n        } catch (t) {\n            Promise.reject(t);\n        }\n        const t = this.scheduleUpdate();\n        return null != t && await t, !this.isUpdatePending;\n    }\n    scheduleUpdate() {\n        return this.performUpdate();\n    }\n    performUpdate() {\n        if (!this.isUpdatePending) return;\n        if (!this.hasUpdated) {\n            if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {\n                for (const [t, s] of this._$Ep)this[t] = s;\n                this._$Ep = void 0;\n            }\n            const t = this.constructor.elementProperties;\n            if (t.size > 0) for (const [s, i] of t)!0 !== i.wrapped || this._$AL.has(s) || void 0 === this[s] || this.P(s, this[s], i);\n        }\n        let t = !1;\n        const s = this._$AL;\n        try {\n            t = this.shouldUpdate(s), t ? (this.willUpdate(s), this._$EO?.forEach((t)=>t.hostUpdate?.()), this.update(s)) : this._$EU();\n        } catch (s) {\n            throw t = !1, this._$EU(), s;\n        }\n        t && this._$AE(s);\n    }\n    willUpdate(t) {}\n    _$AE(t) {\n        this._$EO?.forEach((t)=>t.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);\n    }\n    _$EU() {\n        this._$AL = new Map, this.isUpdatePending = !1;\n    }\n    get updateComplete() {\n        return this.getUpdateComplete();\n    }\n    getUpdateComplete() {\n        return this._$ES;\n    }\n    shouldUpdate(t) {\n        return !0;\n    }\n    update(t) {\n        this._$Ej &&= this._$Ej.forEach((t)=>this._$EC(t, this[t])), this._$EU();\n    }\n    updated(t) {}\n    firstUpdated(t) {}\n}\n$27fcf98b67c2a783$export$c7c07a37856565d.elementStyles = [], $27fcf98b67c2a783$export$c7c07a37856565d.shadowRootOptions = {\n    mode: \"open\"\n}, $27fcf98b67c2a783$export$c7c07a37856565d[$27fcf98b67c2a783$var$d(\"elementProperties\")] = new Map, $27fcf98b67c2a783$export$c7c07a37856565d[$27fcf98b67c2a783$var$d(\"finalized\")] = new Map, $27fcf98b67c2a783$var$p?.({\n    ReactiveElement: $27fcf98b67c2a783$export$c7c07a37856565d\n}), ($27fcf98b67c2a783$var$a.reactiveElementVersions ??= []).push(\"2.0.4\");\n\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $e5ed8027d647799b$var$n = globalThis, $e5ed8027d647799b$var$c = $e5ed8027d647799b$var$n.trustedTypes, $e5ed8027d647799b$var$h = $e5ed8027d647799b$var$c ? $e5ed8027d647799b$var$c.createPolicy(\"lit-html\", {\n    createHTML: (t)=>t\n}) : void 0, $e5ed8027d647799b$var$f = \"$lit$\", $e5ed8027d647799b$var$v = `lit$${Math.random().toFixed(9).slice(2)}$`, $e5ed8027d647799b$var$m = \"?\" + $e5ed8027d647799b$var$v, $e5ed8027d647799b$var$_ = `<${$e5ed8027d647799b$var$m}>`, $e5ed8027d647799b$var$w = document, $e5ed8027d647799b$var$lt = ()=>$e5ed8027d647799b$var$w.createComment(\"\"), $e5ed8027d647799b$var$st = (t)=>null === t || \"object\" != typeof t && \"function\" != typeof t, $e5ed8027d647799b$var$g = Array.isArray, $e5ed8027d647799b$var$$ = (t)=>$e5ed8027d647799b$var$g(t) || \"function\" == typeof t?.[Symbol.iterator], $e5ed8027d647799b$var$x = \"[ \t\\n\\f\\r]\", $e5ed8027d647799b$var$T = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g, $e5ed8027d647799b$var$E = /-->/g, $e5ed8027d647799b$var$k = />/g, $e5ed8027d647799b$var$O = RegExp(`>|${$e5ed8027d647799b$var$x}(?:([^\\\\s\"'>=/]+)(${$e5ed8027d647799b$var$x}*=${$e5ed8027d647799b$var$x}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`, \"g\"), $e5ed8027d647799b$var$S = /'/g, $e5ed8027d647799b$var$j = /\"/g, $e5ed8027d647799b$var$M = /^(?:script|style|textarea|title)$/i, $e5ed8027d647799b$var$P = (t)=>(i, ...s)=>({\n            _$litType$: t,\n            strings: i,\n            values: s\n        }), $e5ed8027d647799b$export$c0bb0b647f701bb5 = $e5ed8027d647799b$var$P(1), $e5ed8027d647799b$export$7ed1367e7fa1ad68 = $e5ed8027d647799b$var$P(2), $e5ed8027d647799b$export$47d5b44d225be5b4 = $e5ed8027d647799b$var$P(3), $e5ed8027d647799b$export$9c068ae9cc5db4e8 = Symbol.for(\"lit-noChange\"), $e5ed8027d647799b$export$45b790e32b2810ee = Symbol.for(\"lit-nothing\"), $e5ed8027d647799b$var$V = new WeakMap, $e5ed8027d647799b$var$I = $e5ed8027d647799b$var$w.createTreeWalker($e5ed8027d647799b$var$w, 129);\nfunction $e5ed8027d647799b$var$N(t, i) {\n    if (!$e5ed8027d647799b$var$g(t) || !t.hasOwnProperty(\"raw\")) throw Error(\"invalid template strings array\");\n    return void 0 !== $e5ed8027d647799b$var$h ? $e5ed8027d647799b$var$h.createHTML(i) : i;\n}\nconst $e5ed8027d647799b$var$U = (t, i)=>{\n    const s = t.length - 1, e = [];\n    let h, o = 2 === i ? \"<svg>\" : 3 === i ? \"<math>\" : \"\", n = $e5ed8027d647799b$var$T;\n    for(let i = 0; i < s; i++){\n        const s = t[i];\n        let r, l, c = -1, a = 0;\n        for(; a < s.length && (n.lastIndex = a, l = n.exec(s), null !== l);)a = n.lastIndex, n === $e5ed8027d647799b$var$T ? \"!--\" === l[1] ? n = $e5ed8027d647799b$var$E : void 0 !== l[1] ? n = $e5ed8027d647799b$var$k : void 0 !== l[2] ? ($e5ed8027d647799b$var$M.test(l[2]) && (h = RegExp(\"</\" + l[2], \"g\")), n = $e5ed8027d647799b$var$O) : void 0 !== l[3] && (n = $e5ed8027d647799b$var$O) : n === $e5ed8027d647799b$var$O ? \">\" === l[0] ? (n = h ?? $e5ed8027d647799b$var$T, c = -1) : void 0 === l[1] ? c = -2 : (c = n.lastIndex - l[2].length, r = l[1], n = void 0 === l[3] ? $e5ed8027d647799b$var$O : '\"' === l[3] ? $e5ed8027d647799b$var$j : $e5ed8027d647799b$var$S) : n === $e5ed8027d647799b$var$j || n === $e5ed8027d647799b$var$S ? n = $e5ed8027d647799b$var$O : n === $e5ed8027d647799b$var$E || n === $e5ed8027d647799b$var$k ? n = $e5ed8027d647799b$var$T : (n = $e5ed8027d647799b$var$O, h = void 0);\n        const u = n === $e5ed8027d647799b$var$O && t[i + 1].startsWith(\"/>\") ? \" \" : \"\";\n        o += n === $e5ed8027d647799b$var$T ? s + $e5ed8027d647799b$var$_ : c >= 0 ? (e.push(r), s.slice(0, c) + $e5ed8027d647799b$var$f + s.slice(c) + $e5ed8027d647799b$var$v + u) : s + $e5ed8027d647799b$var$v + (-2 === c ? i : u);\n    }\n    return [\n        $e5ed8027d647799b$var$N(t, o + (t[s] || \"<?>\") + (2 === i ? \"</svg>\" : 3 === i ? \"</math>\" : \"\")),\n        e\n    ];\n};\nclass $e5ed8027d647799b$var$B {\n    constructor({ strings: t, _$litType$: i }, s){\n        let e;\n        this.parts = [];\n        let h = 0, o = 0;\n        const n = t.length - 1, r = this.parts, [l, a] = $e5ed8027d647799b$var$U(t, i);\n        if (this.el = $e5ed8027d647799b$var$B.createElement(l, s), $e5ed8027d647799b$var$I.currentNode = this.el.content, 2 === i || 3 === i) {\n            const t = this.el.content.firstChild;\n            t.replaceWith(...t.childNodes);\n        }\n        for(; null !== (e = $e5ed8027d647799b$var$I.nextNode()) && r.length < n;){\n            if (1 === e.nodeType) {\n                if (e.hasAttributes()) for (const t of e.getAttributeNames())if (t.endsWith($e5ed8027d647799b$var$f)) {\n                    const i = a[o++], s = e.getAttribute(t).split($e5ed8027d647799b$var$v), n = /([.?@])?(.*)/.exec(i);\n                    r.push({\n                        type: 1,\n                        index: h,\n                        name: n[2],\n                        strings: s,\n                        ctor: \".\" === n[1] ? $e5ed8027d647799b$var$Y : \"?\" === n[1] ? $e5ed8027d647799b$var$Z : \"@\" === n[1] ? $e5ed8027d647799b$var$q : $e5ed8027d647799b$var$G\n                    }), e.removeAttribute(t);\n                } else t.startsWith($e5ed8027d647799b$var$v) && (r.push({\n                    type: 6,\n                    index: h\n                }), e.removeAttribute(t));\n                if ($e5ed8027d647799b$var$M.test(e.tagName)) {\n                    const t = e.textContent.split($e5ed8027d647799b$var$v), i = t.length - 1;\n                    if (i > 0) {\n                        e.textContent = $e5ed8027d647799b$var$c ? $e5ed8027d647799b$var$c.emptyScript : \"\";\n                        for(let s = 0; s < i; s++)e.append(t[s], $e5ed8027d647799b$var$lt()), $e5ed8027d647799b$var$I.nextNode(), r.push({\n                            type: 2,\n                            index: ++h\n                        });\n                        e.append(t[i], $e5ed8027d647799b$var$lt());\n                    }\n                }\n            } else if (8 === e.nodeType) {\n                if (e.data === $e5ed8027d647799b$var$m) r.push({\n                    type: 2,\n                    index: h\n                });\n                else {\n                    let t = -1;\n                    for(; -1 !== (t = e.data.indexOf($e5ed8027d647799b$var$v, t + 1));)r.push({\n                        type: 7,\n                        index: h\n                    }), t += $e5ed8027d647799b$var$v.length - 1;\n                }\n            }\n            h++;\n        }\n    }\n    static createElement(t, i) {\n        const s = $e5ed8027d647799b$var$w.createElement(\"template\");\n        return s.innerHTML = t, s;\n    }\n}\nfunction $e5ed8027d647799b$var$z(t, i, s = t, e) {\n    if (i === $e5ed8027d647799b$export$9c068ae9cc5db4e8) return i;\n    let h = void 0 !== e ? s.o?.[e] : s.l;\n    const o = $e5ed8027d647799b$var$st(i) ? void 0 : i._$litDirective$;\n    return h?.constructor !== o && (h?._$AO?.(!1), void 0 === o ? h = void 0 : (h = new o(t), h._$AT(t, s, e)), void 0 !== e ? (s.o ??= [])[e] = h : s.l = h), void 0 !== h && (i = $e5ed8027d647799b$var$z(t, h._$AS(t, i.values), h, e)), i;\n}\nclass $e5ed8027d647799b$var$F {\n    constructor(t, i){\n        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = i;\n    }\n    get parentNode() {\n        return this._$AM.parentNode;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    u(t) {\n        const { el: { content: i }, parts: s } = this._$AD, e = (t?.creationScope ?? $e5ed8027d647799b$var$w).importNode(i, !0);\n        $e5ed8027d647799b$var$I.currentNode = e;\n        let h = $e5ed8027d647799b$var$I.nextNode(), o = 0, n = 0, r = s[0];\n        for(; void 0 !== r;){\n            if (o === r.index) {\n                let i;\n                2 === r.type ? i = new $e5ed8027d647799b$var$et(h, h.nextSibling, this, t) : 1 === r.type ? i = new r.ctor(h, r.name, r.strings, this, t) : 6 === r.type && (i = new $e5ed8027d647799b$var$K(h, this, t)), this._$AV.push(i), r = s[++n];\n            }\n            o !== r?.index && (h = $e5ed8027d647799b$var$I.nextNode(), o++);\n        }\n        return $e5ed8027d647799b$var$I.currentNode = $e5ed8027d647799b$var$w, e;\n    }\n    p(t) {\n        let i = 0;\n        for (const s of this._$AV)void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;\n    }\n}\nclass $e5ed8027d647799b$var$et {\n    get _$AU() {\n        return this._$AM?._$AU ?? this.v;\n    }\n    constructor(t, i, s, e){\n        this.type = 2, this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this.v = e?.isConnected ?? !0;\n    }\n    get parentNode() {\n        let t = this._$AA.parentNode;\n        const i = this._$AM;\n        return void 0 !== i && 11 === t?.nodeType && (t = i.parentNode), t;\n    }\n    get startNode() {\n        return this._$AA;\n    }\n    get endNode() {\n        return this._$AB;\n    }\n    _$AI(t, i = this) {\n        t = $e5ed8027d647799b$var$z(this, t, i), $e5ed8027d647799b$var$st(t) ? t === $e5ed8027d647799b$export$45b790e32b2810ee || null == t || \"\" === t ? (this._$AH !== $e5ed8027d647799b$export$45b790e32b2810ee && this._$AR(), this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee) : t !== this._$AH && t !== $e5ed8027d647799b$export$9c068ae9cc5db4e8 && this._(t) : void 0 !== t._$litType$ ? this.$(t) : void 0 !== t.nodeType ? this.T(t) : $e5ed8027d647799b$var$$(t) ? this.k(t) : this._(t);\n    }\n    O(t) {\n        return this._$AA.parentNode.insertBefore(t, this._$AB);\n    }\n    T(t) {\n        this._$AH !== t && (this._$AR(), this._$AH = this.O(t));\n    }\n    _(t) {\n        this._$AH !== $e5ed8027d647799b$export$45b790e32b2810ee && $e5ed8027d647799b$var$st(this._$AH) ? this._$AA.nextSibling.data = t : this.T($e5ed8027d647799b$var$w.createTextNode(t)), this._$AH = t;\n    }\n    $(t) {\n        const { values: i, _$litType$: s } = t, e = \"number\" == typeof s ? this._$AC(t) : (void 0 === s.el && (s.el = $e5ed8027d647799b$var$B.createElement($e5ed8027d647799b$var$N(s.h, s.h[0]), this.options)), s);\n        if (this._$AH?._$AD === e) this._$AH.p(i);\n        else {\n            const t = new $e5ed8027d647799b$var$F(e, this), s = t.u(this.options);\n            t.p(i), this.T(s), this._$AH = t;\n        }\n    }\n    _$AC(t) {\n        let i = $e5ed8027d647799b$var$V.get(t.strings);\n        return void 0 === i && $e5ed8027d647799b$var$V.set(t.strings, i = new $e5ed8027d647799b$var$B(t)), i;\n    }\n    k(t) {\n        $e5ed8027d647799b$var$g(this._$AH) || (this._$AH = [], this._$AR());\n        const i = this._$AH;\n        let s, e = 0;\n        for (const h of t)e === i.length ? i.push(s = new $e5ed8027d647799b$var$et(this.O($e5ed8027d647799b$var$lt()), this.O($e5ed8027d647799b$var$lt()), this, this.options)) : s = i[e], s._$AI(h), e++;\n        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);\n    }\n    _$AR(t = this._$AA.nextSibling, i) {\n        for(this._$AP?.(!1, !0, i); t && t !== this._$AB;){\n            const i = t.nextSibling;\n            t.remove(), t = i;\n        }\n    }\n    setConnected(t) {\n        void 0 === this._$AM && (this.v = t, this._$AP?.(t));\n    }\n}\nclass $e5ed8027d647799b$var$G {\n    get tagName() {\n        return this.element.tagName;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    constructor(t, i, s, e, h){\n        this.type = 1, this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = h, s.length > 2 || \"\" !== s[0] || \"\" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee;\n    }\n    _$AI(t, i = this, s, e) {\n        const h = this.strings;\n        let o = !1;\n        if (void 0 === h) t = $e5ed8027d647799b$var$z(this, t, i, 0), o = !$e5ed8027d647799b$var$st(t) || t !== this._$AH && t !== $e5ed8027d647799b$export$9c068ae9cc5db4e8, o && (this._$AH = t);\n        else {\n            const e = t;\n            let n, r;\n            for(t = h[0], n = 0; n < h.length - 1; n++)r = $e5ed8027d647799b$var$z(this, e[s + n], i, n), r === $e5ed8027d647799b$export$9c068ae9cc5db4e8 && (r = this._$AH[n]), o ||= !$e5ed8027d647799b$var$st(r) || r !== this._$AH[n], r === $e5ed8027d647799b$export$45b790e32b2810ee ? t = $e5ed8027d647799b$export$45b790e32b2810ee : t !== $e5ed8027d647799b$export$45b790e32b2810ee && (t += (r ?? \"\") + h[n + 1]), this._$AH[n] = r;\n        }\n        o && !e && this.j(t);\n    }\n    j(t) {\n        t === $e5ed8027d647799b$export$45b790e32b2810ee ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? \"\");\n    }\n}\nclass $e5ed8027d647799b$var$Y extends $e5ed8027d647799b$var$G {\n    constructor(){\n        super(...arguments), this.type = 3;\n    }\n    j(t) {\n        this.element[this.name] = t === $e5ed8027d647799b$export$45b790e32b2810ee ? void 0 : t;\n    }\n}\nclass $e5ed8027d647799b$var$Z extends $e5ed8027d647799b$var$G {\n    constructor(){\n        super(...arguments), this.type = 4;\n    }\n    j(t) {\n        this.element.toggleAttribute(this.name, !!t && t !== $e5ed8027d647799b$export$45b790e32b2810ee);\n    }\n}\nclass $e5ed8027d647799b$var$q extends $e5ed8027d647799b$var$G {\n    constructor(t, i, s, e, h){\n        super(t, i, s, e, h), this.type = 5;\n    }\n    _$AI(t, i = this) {\n        if ((t = $e5ed8027d647799b$var$z(this, t, i, 0) ?? $e5ed8027d647799b$export$45b790e32b2810ee) === $e5ed8027d647799b$export$9c068ae9cc5db4e8) return;\n        const s = this._$AH, e = t === $e5ed8027d647799b$export$45b790e32b2810ee && s !== $e5ed8027d647799b$export$45b790e32b2810ee || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, h = t !== $e5ed8027d647799b$export$45b790e32b2810ee && (s === $e5ed8027d647799b$export$45b790e32b2810ee || e);\n        e && this.element.removeEventListener(this.name, this, s), h && this.element.addEventListener(this.name, this, t), this._$AH = t;\n    }\n    handleEvent(t) {\n        \"function\" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t) : this._$AH.handleEvent(t);\n    }\n}\nclass $e5ed8027d647799b$var$K {\n    constructor(t, i, s){\n        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t) {\n        $e5ed8027d647799b$var$z(this, t);\n    }\n}\nconst $e5ed8027d647799b$export$8613d1ca9052b22e = {\n    M: $e5ed8027d647799b$var$f,\n    P: $e5ed8027d647799b$var$v,\n    A: $e5ed8027d647799b$var$m,\n    C: 1,\n    L: $e5ed8027d647799b$var$U,\n    R: $e5ed8027d647799b$var$F,\n    D: $e5ed8027d647799b$var$$,\n    V: $e5ed8027d647799b$var$z,\n    I: $e5ed8027d647799b$var$et,\n    H: $e5ed8027d647799b$var$G,\n    N: $e5ed8027d647799b$var$Z,\n    U: $e5ed8027d647799b$var$q,\n    B: $e5ed8027d647799b$var$Y,\n    F: $e5ed8027d647799b$var$K\n}, $e5ed8027d647799b$var$Re = $e5ed8027d647799b$var$n.litHtmlPolyfillSupport;\n$e5ed8027d647799b$var$Re?.($e5ed8027d647799b$var$B, $e5ed8027d647799b$var$et), ($e5ed8027d647799b$var$n.litHtmlVersions ??= []).push(\"3.2.0\");\nconst $e5ed8027d647799b$export$b3890eb0ae9dca99 = (t, i, s)=>{\n    const e = s?.renderBefore ?? i;\n    let h = e._$litPart$;\n    if (void 0 === h) {\n        const t = s?.renderBefore ?? null;\n        e._$litPart$ = h = new $e5ed8027d647799b$var$et(i.insertBefore($e5ed8027d647799b$var$lt(), t), t, void 0, s ?? {});\n    }\n    return h._$AI(t), h;\n};\n\n\n\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ class $fe586ba0757c37f7$export$3f2f9f5909897157 extends (0, $27fcf98b67c2a783$export$c7c07a37856565d) {\n    constructor(){\n        super(...arguments), this.renderOptions = {\n            host: this\n        }, this.o = void 0;\n    }\n    createRenderRoot() {\n        const t = super.createRenderRoot();\n        return this.renderOptions.renderBefore ??= t.firstChild, t;\n    }\n    update(t) {\n        const e = this.render();\n        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this.o = (0, $e5ed8027d647799b$export$b3890eb0ae9dca99)(e, this.renderRoot, this.renderOptions);\n    }\n    connectedCallback() {\n        super.connectedCallback(), this.o?.setConnected(!0);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback(), this.o?.setConnected(!1);\n    }\n    render() {\n        return 0, $e5ed8027d647799b$export$9c068ae9cc5db4e8;\n    }\n}\n$fe586ba0757c37f7$export$3f2f9f5909897157._$litElement$ = !0, $fe586ba0757c37f7$export$3f2f9f5909897157[\"finalized\"] = !0, globalThis.litElementHydrateSupport?.({\n    LitElement: $fe586ba0757c37f7$export$3f2f9f5909897157\n});\nconst $fe586ba0757c37f7$var$f = globalThis.litElementPolyfillSupport;\n$fe586ba0757c37f7$var$f?.({\n    LitElement: $fe586ba0757c37f7$export$3f2f9f5909897157\n});\nconst $fe586ba0757c37f7$export$f5c524615a7708d6 = {\n    _$AK: (t, e, s)=>{\n        t._$AK(e, s);\n    },\n    _$AL: (t)=>t._$AL\n};\n(globalThis.litElementVersions ??= []).push(\"4.1.0\");\n\n\n/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $650ed036964a13b8$export$6acf61af03e62db = !1;\n\n\n\n\n/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var $72623ab6bcb0a33b$exports = {};\n\"use strict\";\nvar $3251146683c5d714$exports = {};\n\"use strict\";\n\n$3251146683c5d714$exports = (parcelRequire(\"9cCWX\"));\n\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */ var $72623ab6bcb0a33b$var$REACT_STATICS = {\n    childContextTypes: true,\n    contextType: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromError: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\nvar $72623ab6bcb0a33b$var$KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\nvar $72623ab6bcb0a33b$var$FORWARD_REF_STATICS = {\n    \"$$typeof\": true,\n    render: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true\n};\nvar $72623ab6bcb0a33b$var$MEMO_STATICS = {\n    \"$$typeof\": true,\n    compare: true,\n    defaultProps: true,\n    displayName: true,\n    propTypes: true,\n    type: true\n};\nvar $72623ab6bcb0a33b$var$TYPE_STATICS = {};\n$72623ab6bcb0a33b$var$TYPE_STATICS[$3251146683c5d714$exports.ForwardRef] = $72623ab6bcb0a33b$var$FORWARD_REF_STATICS;\n$72623ab6bcb0a33b$var$TYPE_STATICS[$3251146683c5d714$exports.Memo] = $72623ab6bcb0a33b$var$MEMO_STATICS;\nfunction $72623ab6bcb0a33b$var$getStatics(component) {\n    // React v16.11 and below\n    if ($3251146683c5d714$exports.isMemo(component)) return $72623ab6bcb0a33b$var$MEMO_STATICS;\n     // React v16.12 and above\n    return $72623ab6bcb0a33b$var$TYPE_STATICS[component[\"$$typeof\"]] || $72623ab6bcb0a33b$var$REACT_STATICS;\n}\nvar $72623ab6bcb0a33b$var$defineProperty = Object.defineProperty;\nvar $72623ab6bcb0a33b$var$getOwnPropertyNames = Object.getOwnPropertyNames;\nvar $72623ab6bcb0a33b$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar $72623ab6bcb0a33b$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar $72623ab6bcb0a33b$var$getPrototypeOf = Object.getPrototypeOf;\nvar $72623ab6bcb0a33b$var$objectPrototype = Object.prototype;\nfunction $72623ab6bcb0a33b$var$hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== \"string\") {\n        // don't hoist over string (html) components\n        if ($72623ab6bcb0a33b$var$objectPrototype) {\n            var inheritedComponent = $72623ab6bcb0a33b$var$getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== $72623ab6bcb0a33b$var$objectPrototype) $72623ab6bcb0a33b$var$hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n        }\n        var keys = $72623ab6bcb0a33b$var$getOwnPropertyNames(sourceComponent);\n        if ($72623ab6bcb0a33b$var$getOwnPropertySymbols) keys = keys.concat($72623ab6bcb0a33b$var$getOwnPropertySymbols(sourceComponent));\n        var targetStatics = $72623ab6bcb0a33b$var$getStatics(targetComponent);\n        var sourceStatics = $72623ab6bcb0a33b$var$getStatics(sourceComponent);\n        for(var i = 0; i < keys.length; ++i){\n            var key = keys[i];\n            if (!$72623ab6bcb0a33b$var$KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n                var descriptor = $72623ab6bcb0a33b$var$getOwnPropertyDescriptor(sourceComponent, key);\n                try {\n                    // Avoid failures from read-only properties\n                    $72623ab6bcb0a33b$var$defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n    }\n    return targetComponent;\n}\n$72623ab6bcb0a33b$exports = $72623ab6bcb0a33b$var$hoistNonReactStatics;\n\n\nvar $76d3ec0b6e8cfdfc$exports = {};\n\"use strict\";\n\n$76d3ec0b6e8cfdfc$exports = (parcelRequire(\"2pUnB\"));\n\n\n/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n////\n//\n// A few enums copied from `fb/Schema.ts` and `fb/Message.ts` because Webpack\n// v4 doesn't seem to be able to tree-shake the rest of those exports.\n//\n// We will have to keep these enums in sync when we re-generate the flatbuffers\n// code from the shchemas. See js/DEVELOP.md for info on how to run flatbuffers\n// code generation.\n//\n////\n/**\n * Logical types, vector layouts, and schemas\n *\n * @enum {number}\n */ var $f79edd7127f4719f$export$12ea6169eb5318ff;\n(function(MetadataVersion) {\n    /**\n     * 0.1.0 (October 2016).\n     */ MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */ MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */ MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */ MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */ MetadataVersion[MetadataVersion[\"V5\"] = 4] = \"V5\";\n})($f79edd7127f4719f$export$12ea6169eb5318ff || ($f79edd7127f4719f$export$12ea6169eb5318ff = {}));\nvar $f79edd7127f4719f$export$a82fae803f3856de;\n(function(UnionMode) {\n    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n})($f79edd7127f4719f$export$a82fae803f3856de || ($f79edd7127f4719f$export$a82fae803f3856de = {}));\nvar $f79edd7127f4719f$export$be201676156f3e60;\n(function(Precision) {\n    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n})($f79edd7127f4719f$export$be201676156f3e60 || ($f79edd7127f4719f$export$be201676156f3e60 = {}));\nvar $f79edd7127f4719f$export$b3f55ef7f087e744;\n(function(DateUnit) {\n    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n})($f79edd7127f4719f$export$b3f55ef7f087e744 || ($f79edd7127f4719f$export$b3f55ef7f087e744 = {}));\nvar $f79edd7127f4719f$export$d9e59215631231e3;\n(function(TimeUnit) {\n    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n})($f79edd7127f4719f$export$d9e59215631231e3 || ($f79edd7127f4719f$export$d9e59215631231e3 = {}));\nvar $f79edd7127f4719f$export$dd27fec05eba03b;\n(function(IntervalUnit) {\n    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n    IntervalUnit[IntervalUnit[\"MONTH_DAY_NANO\"] = 2] = \"MONTH_DAY_NANO\";\n})($f79edd7127f4719f$export$dd27fec05eba03b || ($f79edd7127f4719f$export$dd27fec05eba03b = {}));\nvar $f79edd7127f4719f$export$84577d7b7db4f876;\n(function(MessageHeader) {\n    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n    MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n})($f79edd7127f4719f$export$84577d7b7db4f876 || ($f79edd7127f4719f$export$84577d7b7db4f876 = {}));\nvar $f79edd7127f4719f$export$92738401e1603719;\n(function(Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})($f79edd7127f4719f$export$92738401e1603719 || ($f79edd7127f4719f$export$92738401e1603719 = {}));\nvar $f79edd7127f4719f$export$a9b603917c4d9863;\n(function(BufferType) {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */ BufferType[BufferType[\"OFFSET\"] = 0] = \"OFFSET\";\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */ BufferType[BufferType[\"DATA\"] = 1] = \"DATA\";\n    /**\n     * Bit vector indicating if each value is null\n     */ BufferType[BufferType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n    /**\n     * Type vector used in Union type\n     */ BufferType[BufferType[\"TYPE\"] = 3] = \"TYPE\";\n})($f79edd7127f4719f$export$a9b603917c4d9863 || ($f79edd7127f4719f$export$a9b603917c4d9863 = {}));\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */ const [$f61ec9f35ec4c8b9$export$2eb24fc24c69cb4d, $f61ec9f35ec4c8b9$export$bc3644201724b96e] = (()=>{\n    const BigIntUnavailableError = ()=>{\n        throw new Error(\"BigInt is not available in this environment\");\n    };\n    function BigIntUnavailable() {\n        throw BigIntUnavailableError();\n    }\n    BigIntUnavailable.asIntN = ()=>{\n        throw BigIntUnavailableError();\n    };\n    BigIntUnavailable.asUintN = ()=>{\n        throw BigIntUnavailableError();\n    };\n    return typeof BigInt !== \"undefined\" ? [\n        BigInt,\n        true\n    ] : [\n        BigIntUnavailable,\n        false\n    ];\n})();\n/** @ignore */ const [$f61ec9f35ec4c8b9$export$8fe42cc5909e16d2, $f61ec9f35ec4c8b9$export$7a94a52a87d12e8d] = (()=>{\n    const BigInt64ArrayUnavailableError = ()=>{\n        throw new Error(\"BigInt64Array is not available in this environment\");\n    };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() {\n            return 8;\n        }\n        static of() {\n            throw BigInt64ArrayUnavailableError();\n        }\n        static from() {\n            throw BigInt64ArrayUnavailableError();\n        }\n        constructor(){\n            throw BigInt64ArrayUnavailableError();\n        }\n    }\n    return typeof BigInt64Array !== \"undefined\" ? [\n        BigInt64Array,\n        true\n    ] : [\n        BigInt64ArrayUnavailable,\n        false\n    ];\n})();\n/** @ignore */ const [$f61ec9f35ec4c8b9$export$6a03e78e99ced10d, $f61ec9f35ec4c8b9$export$c35d9ef1985b1c4e] = (()=>{\n    const BigUint64ArrayUnavailableError = ()=>{\n        throw new Error(\"BigUint64Array is not available in this environment\");\n    };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() {\n            return 8;\n        }\n        static of() {\n            throw BigUint64ArrayUnavailableError();\n        }\n        static from() {\n            throw BigUint64ArrayUnavailableError();\n        }\n        constructor(){\n            throw BigUint64ArrayUnavailableError();\n        }\n    }\n    return typeof BigUint64Array !== \"undefined\" ? [\n        BigUint64Array,\n        true\n    ] : [\n        BigUint64ArrayUnavailable,\n        false\n    ];\n})();\n/** @ignore */ const $f61ec9f35ec4c8b9$var$isNumber = (x)=>typeof x === \"number\";\n/** @ignore */ const $f61ec9f35ec4c8b9$var$isBoolean = (x)=>typeof x === \"boolean\";\n/** @ignore */ const $f61ec9f35ec4c8b9$var$isFunction = (x)=>typeof x === \"function\";\nconst $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a = (x)=>x != null && Object(x) === x;\nconst $f61ec9f35ec4c8b9$export$4369c812aac99591 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x.then);\n};\nconst $f61ec9f35ec4c8b9$export$5cd057a6046189f9 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x.subscribe);\n};\nconst $f61ec9f35ec4c8b9$export$9652023d9040757 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[Symbol.iterator]);\n};\nconst $f61ec9f35ec4c8b9$export$edb10ab8dd75a915 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[Symbol.asyncIterator]);\n};\nconst $f61ec9f35ec4c8b9$export$ab2374ca6cd4ece4 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x[\"schema\"]);\n};\nconst $f61ec9f35ec4c8b9$export$1e2f57719e155213 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isNumber(x[\"length\"]);\n};\nconst $f61ec9f35ec4c8b9$export$84ac258cc3d60dc0 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && \"done\" in x && \"value\" in x;\n};\nconst $f61ec9f35ec4c8b9$export$d88ebc4993a345cf = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"abort\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"close\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"start\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"write\"]);\n};\nconst $f61ec9f35ec4c8b9$export$f7fb4208dd02b4db = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"stat\"]) && $f61ec9f35ec4c8b9$var$isNumber(x[\"fd\"]);\n};\nconst $f61ec9f35ec4c8b9$export$22226988d038bc60 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$2940183a2d5db90f(x) && $f61ec9f35ec4c8b9$var$isNumber(x[\"bytesRead\"]);\n};\nconst $f61ec9f35ec4c8b9$export$81f27058be86d7ea = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$export$f8bb1f6b773199b7(x[\"body\"]);\n};\nconst $f61ec9f35ec4c8b9$var$isReadableInterop = (x)=>\"_getDOMStream\" in x && \"_getNodeStream\" in x;\nconst $f61ec9f35ec4c8b9$export$5536d41d90245d51 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"abort\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"getWriter\"]) && !$f61ec9f35ec4c8b9$var$isReadableInterop(x);\n};\nconst $f61ec9f35ec4c8b9$export$f8bb1f6b773199b7 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"cancel\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"getReader\"]) && !$f61ec9f35ec4c8b9$var$isReadableInterop(x);\n};\nconst $f61ec9f35ec4c8b9$export$eec1f46c8eef21a4 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"end\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"write\"]) && $f61ec9f35ec4c8b9$var$isBoolean(x[\"writable\"]) && !$f61ec9f35ec4c8b9$var$isReadableInterop(x);\n};\nconst $f61ec9f35ec4c8b9$export$2940183a2d5db90f = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"read\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"pipe\"]) && $f61ec9f35ec4c8b9$var$isBoolean(x[\"readable\"]) && !$f61ec9f35ec4c8b9$var$isReadableInterop(x);\n};\nconst $f61ec9f35ec4c8b9$export$5851c0f2ca437632 = (x)=>{\n    return $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a(x) && $f61ec9f35ec4c8b9$var$isFunction(x[\"clear\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"bytes\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"position\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"setPosition\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"capacity\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"getBufferIdentifier\"]) && $f61ec9f35ec4c8b9$var$isFunction(x[\"createLong\"]);\n};\n\n\n/** @ignore */ const $bf432875b5ef4a3b$var$undf = void 0;\nfunction $bf432875b5ef4a3b$export$7fcada0453713929(x) {\n    if (x === null) return \"null\";\n    if (x === $bf432875b5ef4a3b$var$undf) return \"undefined\";\n    switch(typeof x){\n        case \"number\":\n            return `${x}`;\n        case \"bigint\":\n            return `${x}`;\n        case \"string\":\n            return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === \"function\") return x[Symbol.toPrimitive](\"string\");\n    if (ArrayBuffer.isView(x)) {\n        if (x instanceof (0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2) || x instanceof (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)) return `[${[\n            ...x\n        ].map((x)=>$bf432875b5ef4a3b$export$7fcada0453713929(x))}]`;\n        return `[${x}]`;\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y)=>typeof y === \"bigint\" ? `${y}` : y);\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var $5c96a02c592fcff1$var$extendStatics = function(d, b) {\n    $5c96a02c592fcff1$var$extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return $5c96a02c592fcff1$var$extendStatics(d, b);\n};\nfunction $5c96a02c592fcff1$export$a8ba968b8961cb8a(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    $5c96a02c592fcff1$var$extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar $5c96a02c592fcff1$export$18ce0697a983be9b = function() {\n    $5c96a02c592fcff1$export$18ce0697a983be9b = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $5c96a02c592fcff1$export$18ce0697a983be9b.apply(this, arguments);\n};\nfunction $5c96a02c592fcff1$export$3c9a16f847548506(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction $5c96a02c592fcff1$export$29e00dfd3077644b(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction $5c96a02c592fcff1$export$d5ad3fd78186038f(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction $5c96a02c592fcff1$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction $5c96a02c592fcff1$export$d831c04e792af3d(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction $5c96a02c592fcff1$export$6a2a36740a146cb8(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\nfunction $5c96a02c592fcff1$export$d1a06452d3489bc7(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction $5c96a02c592fcff1$export$f1db080c865becb9(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction $5c96a02c592fcff1$export$1050f835b63b671e(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction $5c96a02c592fcff1$export$67ebef60e6f28a6(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar $5c96a02c592fcff1$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction $5c96a02c592fcff1$export$f33643c0debef087(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) $5c96a02c592fcff1$export$45d3717a4c69092e(o, m, p);\n}\nfunction $5c96a02c592fcff1$export$19a8beecd37a4c45(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction $5c96a02c592fcff1$export$8d051b38c9118094(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction $5c96a02c592fcff1$export$afc72e2116322959() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($5c96a02c592fcff1$export$8d051b38c9118094(arguments[i]));\n    return ar;\n}\nfunction $5c96a02c592fcff1$export$6388937ca91ccae8() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction $5c96a02c592fcff1$export$1216008129fb82ed(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction $5c96a02c592fcff1$export$10c90e4f7922046c(v) {\n    return this instanceof $5c96a02c592fcff1$export$10c90e4f7922046c ? (this.v = v, this) : new $5c96a02c592fcff1$export$10c90e4f7922046c(v);\n}\nfunction $5c96a02c592fcff1$export$e427f37a30a4de9b(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $5c96a02c592fcff1$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction $5c96a02c592fcff1$export$bbd80228419bb833(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: $5c96a02c592fcff1$export$10c90e4f7922046c(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction $5c96a02c592fcff1$export$e3b29a3d6162315f(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof $5c96a02c592fcff1$export$19a8beecd37a4c45 === \"function\" ? $5c96a02c592fcff1$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction $5c96a02c592fcff1$export$4fb47efe1390b86f(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar $5c96a02c592fcff1$var$__setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction $5c96a02c592fcff1$export$c21735bcef00d192(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) $5c96a02c592fcff1$export$45d3717a4c69092e(result, mod, k);\n    }\n    $5c96a02c592fcff1$var$__setModuleDefault(result, mod);\n    return result;\n}\nfunction $5c96a02c592fcff1$export$da59b14a69baef04(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction $5c96a02c592fcff1$export$d5dcaf168c640c35(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction $5c96a02c592fcff1$export$d40a35129aaff81f(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction $5c96a02c592fcff1$export$81fdc39f203e4e04(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction $5c96a02c592fcff1$export$88ac25d8e944e405(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose, inner;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n            if (async) inner = dispose;\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        if (inner) dispose = function() {\n            try {\n                inner.call(this);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) env.stack.push({\n        async: true\n    });\n    return value;\n}\nvar $5c96a02c592fcff1$var$_SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction $5c96a02c592fcff1$export$8f076105dc360e92(env) {\n    function fail(e) {\n        env.error = env.hasError ? new $5c96a02c592fcff1$var$_SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    function next() {\n        while(env.stack.length){\n            var rec = env.stack.pop();\n            try {\n                var result = rec.dispose && rec.dispose.call(rec.value);\n                if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\nvar $5c96a02c592fcff1$export$2e2bcd8739ae039 = {\n    __extends: $5c96a02c592fcff1$export$a8ba968b8961cb8a,\n    __assign: $5c96a02c592fcff1$export$18ce0697a983be9b,\n    __rest: $5c96a02c592fcff1$export$3c9a16f847548506,\n    __decorate: $5c96a02c592fcff1$export$29e00dfd3077644b,\n    __param: $5c96a02c592fcff1$export$d5ad3fd78186038f,\n    __metadata: $5c96a02c592fcff1$export$f1db080c865becb9,\n    __awaiter: $5c96a02c592fcff1$export$1050f835b63b671e,\n    __generator: $5c96a02c592fcff1$export$67ebef60e6f28a6,\n    __createBinding: $5c96a02c592fcff1$export$45d3717a4c69092e,\n    __exportStar: $5c96a02c592fcff1$export$f33643c0debef087,\n    __values: $5c96a02c592fcff1$export$19a8beecd37a4c45,\n    __read: $5c96a02c592fcff1$export$8d051b38c9118094,\n    __spread: $5c96a02c592fcff1$export$afc72e2116322959,\n    __spreadArrays: $5c96a02c592fcff1$export$6388937ca91ccae8,\n    __spreadArray: $5c96a02c592fcff1$export$1216008129fb82ed,\n    __await: $5c96a02c592fcff1$export$10c90e4f7922046c,\n    __asyncGenerator: $5c96a02c592fcff1$export$e427f37a30a4de9b,\n    __asyncDelegator: $5c96a02c592fcff1$export$bbd80228419bb833,\n    __asyncValues: $5c96a02c592fcff1$export$e3b29a3d6162315f,\n    __makeTemplateObject: $5c96a02c592fcff1$export$4fb47efe1390b86f,\n    __importStar: $5c96a02c592fcff1$export$c21735bcef00d192,\n    __importDefault: $5c96a02c592fcff1$export$da59b14a69baef04,\n    __classPrivateFieldGet: $5c96a02c592fcff1$export$d5dcaf168c640c35,\n    __classPrivateFieldSet: $5c96a02c592fcff1$export$d40a35129aaff81f,\n    __classPrivateFieldIn: $5c96a02c592fcff1$export$81fdc39f203e4e04,\n    __addDisposableResource: $5c96a02c592fcff1$export$88ac25d8e944e405,\n    __disposeResources: $5c96a02c592fcff1$export$8f076105dc360e92\n};\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst $919e3c7689196a2e$var$decoder = new TextDecoder(\"utf-8\");\nconst $919e3c7689196a2e$export$72118b85b055afd = (buffer)=>$919e3c7689196a2e$var$decoder.decode(buffer);\nconst $919e3c7689196a2e$var$encoder = new TextEncoder();\nconst $919e3c7689196a2e$export$8f647c2204da8484 = (value)=>$919e3c7689196a2e$var$encoder.encode(value);\n\n\n\n/** @ignore */ const $6a2dadc936df2dd3$var$SharedArrayBuf = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */ function $6a2dadc936df2dd3$var$collapseContiguousByteRanges(chunks) {\n    const result = chunks[0] ? [\n        chunks[0]\n    ] : [];\n    let xOffset, yOffset, xLen, yLen;\n    for(let x, y, i = 0, j = 0, n = chunks.length; ++i < n;){\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\nfunction $6a2dadc936df2dd3$export$14ee4f6a21e84606(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\nfunction $6a2dadc936df2dd3$export$5f31b60ee74e9ce(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    const result = $6a2dadc936df2dd3$var$collapseContiguousByteRanges(chunks);\n    const byteLength = result.reduce((x, b)=>x + b.byteLength, 0);\n    let source, sliced, buffer;\n    let offset = 0, index = -1;\n    const length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);\n    for(const n = result.length; ++index < n;){\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= offset + sliced.length) {\n            if (sliced.length < source.length) result[index] = source.subarray(sliced.length);\n            else if (sliced.length === source.length) index++;\n            buffer ? $6a2dadc936df2dd3$export$14ee4f6a21e84606(buffer, sliced, offset) : buffer = sliced;\n            break;\n        }\n        $6a2dadc936df2dd3$export$14ee4f6a21e84606(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [\n        buffer || new Uint8Array(0),\n        result.slice(index),\n        byteLength - (buffer ? buffer.byteLength : 0)\n    ];\n}\nfunction $6a2dadc936df2dd3$export$8f34f840217f9551(ArrayBufferViewCtor, input) {\n    let value = (0, $f61ec9f35ec4c8b9$export$84ac258cc3d60dc0)(input) ? input.value : input;\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n        // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n        return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        return value;\n    }\n    if (!value) return new ArrayBufferViewCtor(0);\n    if (typeof value === \"string\") value = (0, $919e3c7689196a2e$export$8f647c2204da8484)(value);\n    if (value instanceof ArrayBuffer) return new ArrayBufferViewCtor(value);\n    if (value instanceof $6a2dadc936df2dd3$var$SharedArrayBuf) return new ArrayBufferViewCtor(value);\n    if ((0, $f61ec9f35ec4c8b9$export$5851c0f2ca437632)(value)) return $6a2dadc936df2dd3$export$8f34f840217f9551(ArrayBufferViewCtor, value.bytes());\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\nconst $6a2dadc936df2dd3$export$a8bda5e98b044fc = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Int8Array, input);\nconst $6a2dadc936df2dd3$export$42bedca74600cc0 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Int16Array, input);\nconst $6a2dadc936df2dd3$export$46036e1dd6d3e964 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Int32Array, input);\nconst $6a2dadc936df2dd3$export$d7e2757be37a9784 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551((0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2), input);\nconst $6a2dadc936df2dd3$export$73470fd2221e6aef = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Uint8Array, input);\nconst $6a2dadc936df2dd3$export$5b026647264ee381 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Uint16Array, input);\nconst $6a2dadc936df2dd3$export$2d5f70558871f040 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Uint32Array, input);\nconst $6a2dadc936df2dd3$export$31a5aab5b7eef72e = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551((0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d), input);\nconst $6a2dadc936df2dd3$export$99c2c2e4210dd6ab = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Float32Array, input);\nconst $6a2dadc936df2dd3$export$12f245f8051d103e = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Float64Array, input);\nconst $6a2dadc936df2dd3$export$75de76e188fd3d73 = (input)=>$6a2dadc936df2dd3$export$8f34f840217f9551(Uint8ClampedArray, input);\n/** @ignore */ const $6a2dadc936df2dd3$var$pump = (iterator)=>{\n    iterator.next();\n    return iterator;\n};\nfunction* $6a2dadc936df2dd3$export$92a463899a09551c(ArrayCtor, source) {\n    const wrap = function*(x) {\n        yield x;\n    };\n    const buffers = typeof source === \"string\" ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof $6a2dadc936df2dd3$var$SharedArrayBuf ? wrap(source) : !(0, $f61ec9f35ec4c8b9$export$9652023d9040757)(source) ? wrap(source) : source;\n    yield* $6a2dadc936df2dd3$var$pump(function*(it) {\n        let r = null;\n        do r = it.next((yield $6a2dadc936df2dd3$export$8f34f840217f9551(ArrayCtor, r)));\n        while (!r.done);\n    }(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\nconst $6a2dadc936df2dd3$export$71be17197f2e3101 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Int8Array, input);\nconst $6a2dadc936df2dd3$export$95f155c0d344ac97 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Int16Array, input);\nconst $6a2dadc936df2dd3$export$9db0c08aeddff8c2 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Int32Array, input);\nconst $6a2dadc936df2dd3$export$93fb14a79c82cede = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Uint8Array, input);\nconst $6a2dadc936df2dd3$export$2235dd9e1abffa0a = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Uint16Array, input);\nconst $6a2dadc936df2dd3$export$4d89721ff71909db = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Uint32Array, input);\nconst $6a2dadc936df2dd3$export$14db551ab5d17834 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Float32Array, input);\nconst $6a2dadc936df2dd3$export$10137d78aa1f7300 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Float64Array, input);\nconst $6a2dadc936df2dd3$export$a76c9c293aaf12f9 = (input)=>$6a2dadc936df2dd3$export$92a463899a09551c(Uint8ClampedArray, input);\nfunction $6a2dadc936df2dd3$export$83b0a4fbce5fd89f(ArrayCtor, source) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* toArrayBufferViewAsyncIterator_1() {\n        // if a Promise, unwrap the Promise and iterate the resolved value\n        if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(source)) return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield* (0, $5c96a02c592fcff1$export$bbd80228419bb833)((0, $5c96a02c592fcff1$export$e3b29a3d6162315f)($6a2dadc936df2dd3$export$83b0a4fbce5fd89f(ArrayCtor, (yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(source)))))))));\n        const wrap = function(x) {\n            return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function*() {\n                yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(x)));\n            });\n        };\n        const emit = function(source) {\n            return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function*() {\n                yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield* (0, $5c96a02c592fcff1$export$bbd80228419bb833)((0, $5c96a02c592fcff1$export$e3b29a3d6162315f)($6a2dadc936df2dd3$var$pump(function*(it) {\n                    let r = null;\n                    do r = it.next((yield r === null || r === void 0 ? void 0 : r.value));\n                    while (!r.done);\n                }(source[Symbol.iterator]()))))));\n            });\n        };\n        const buffers = typeof source === \"string\" ? wrap(source) // if string, wrap in an AsyncIterableIterator\n         : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n         : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n         : source instanceof $6a2dadc936df2dd3$var$SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n         : (0, $f61ec9f35ec4c8b9$export$9652023d9040757)(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n         : !(0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n         : source; // otherwise if AsyncIterable, use it\n        yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield* (0, $5c96a02c592fcff1$export$bbd80228419bb833)((0, $5c96a02c592fcff1$export$e3b29a3d6162315f)($6a2dadc936df2dd3$var$pump(function(it) {\n            return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function*() {\n                let r = null;\n                do r = yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it.next((yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)($6a2dadc936df2dd3$export$8f34f840217f9551(ArrayCtor, r)))));\n                while (!r.done);\n            });\n        }(buffers[Symbol.asyncIterator]()))))));\n        return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(new ArrayCtor());\n    });\n}\nconst $6a2dadc936df2dd3$export$3f1eab862c5ac6f3 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Int8Array, input);\nconst $6a2dadc936df2dd3$export$c8b2d71c2d554d07 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Int16Array, input);\nconst $6a2dadc936df2dd3$export$ca5e832636555d4 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Int32Array, input);\nconst $6a2dadc936df2dd3$export$20fc6274387de476 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Uint8Array, input);\nconst $6a2dadc936df2dd3$export$4b1a2c4c531f2809 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Uint16Array, input);\nconst $6a2dadc936df2dd3$export$e8005a2b36ee59fd = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Uint32Array, input);\nconst $6a2dadc936df2dd3$export$69979a8c52bed90e = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Float32Array, input);\nconst $6a2dadc936df2dd3$export$f6b746c19049c346 = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Float64Array, input);\nconst $6a2dadc936df2dd3$export$d0ff42b3547f98eb = (input)=>$6a2dadc936df2dd3$export$83b0a4fbce5fd89f(Uint8ClampedArray, input);\nfunction $6a2dadc936df2dd3$export$d83d9287259d394b(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for(let i = -1; ++i <= length;)valueOffsets[i] += offset;\n    }\n    return valueOffsets;\n}\nfunction $6a2dadc936df2dd3$export$2a7eada880229c41(a, b) {\n    let i = 0;\n    const n = a.length;\n    if (n !== b.length) return false;\n    if (n > 0) do {\n        if (a[i] !== b[i]) return false;\n    }while (++i < n);\n    return true;\n}\n\n\n\nconst $9aed8ed3a6d26f6b$export$f4ebf2553e430297 = Symbol.for(\"isArrowBigNum\");\n/** @ignore */ function $9aed8ed3a6d26f6b$var$BigNum(x, ...xs) {\n    if (xs.length === 0) return Object.setPrototypeOf((0, $6a2dadc936df2dd3$export$8f34f840217f9551)(this[\"TypedArray\"], x), this.constructor.prototype);\n    return Object.setPrototypeOf(new this[\"TypedArray\"](x, ...xs), this.constructor.prototype);\n}\n$9aed8ed3a6d26f6b$var$BigNum.prototype[$9aed8ed3a6d26f6b$export$f4ebf2553e430297] = true;\n$9aed8ed3a6d26f6b$var$BigNum.prototype.toJSON = function() {\n    return `\"${$9aed8ed3a6d26f6b$export$7c62ab5555479924(this)}\"`;\n};\n$9aed8ed3a6d26f6b$var$BigNum.prototype.valueOf = function() {\n    return $9aed8ed3a6d26f6b$var$bignumToNumber(this);\n};\n$9aed8ed3a6d26f6b$var$BigNum.prototype.toString = function() {\n    return $9aed8ed3a6d26f6b$export$7c62ab5555479924(this);\n};\n$9aed8ed3a6d26f6b$var$BigNum.prototype[Symbol.toPrimitive] = function(hint = \"default\") {\n    switch(hint){\n        case \"number\":\n            return $9aed8ed3a6d26f6b$var$bignumToNumber(this);\n        case \"string\":\n            return $9aed8ed3a6d26f6b$export$7c62ab5555479924(this);\n        case \"default\":\n            return $9aed8ed3a6d26f6b$export$c10f629a0f9b650f(this);\n    }\n    // @ts-ignore\n    return $9aed8ed3a6d26f6b$export$7c62ab5555479924(this);\n};\n/** @ignore */ function $9aed8ed3a6d26f6b$var$SignedBigNum(...args) {\n    return $9aed8ed3a6d26f6b$var$BigNum.apply(this, args);\n}\n/** @ignore */ function $9aed8ed3a6d26f6b$var$UnsignedBigNum(...args) {\n    return $9aed8ed3a6d26f6b$var$BigNum.apply(this, args);\n}\n/** @ignore */ function $9aed8ed3a6d26f6b$var$DecimalBigNum(...args) {\n    return $9aed8ed3a6d26f6b$var$BigNum.apply(this, args);\n}\nObject.setPrototypeOf($9aed8ed3a6d26f6b$var$SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf($9aed8ed3a6d26f6b$var$UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf($9aed8ed3a6d26f6b$var$DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign($9aed8ed3a6d26f6b$var$SignedBigNum.prototype, $9aed8ed3a6d26f6b$var$BigNum.prototype, {\n    \"constructor\": $9aed8ed3a6d26f6b$var$SignedBigNum,\n    \"signed\": true,\n    \"TypedArray\": Int32Array,\n    \"BigIntArray\": (0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2)\n});\nObject.assign($9aed8ed3a6d26f6b$var$UnsignedBigNum.prototype, $9aed8ed3a6d26f6b$var$BigNum.prototype, {\n    \"constructor\": $9aed8ed3a6d26f6b$var$UnsignedBigNum,\n    \"signed\": false,\n    \"TypedArray\": Uint32Array,\n    \"BigIntArray\": (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)\n});\nObject.assign($9aed8ed3a6d26f6b$var$DecimalBigNum.prototype, $9aed8ed3a6d26f6b$var$BigNum.prototype, {\n    \"constructor\": $9aed8ed3a6d26f6b$var$DecimalBigNum,\n    \"signed\": true,\n    \"TypedArray\": Uint32Array,\n    \"BigIntArray\": (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)\n});\n/** @ignore */ function $9aed8ed3a6d26f6b$var$bignumToNumber(bn) {\n    const { buffer: buffer, byteOffset: byteOffset, length: length, \"signed\": signed } = bn;\n    const words = new (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)(buffer, byteOffset, length);\n    const negative = signed && words[words.length - 1] & BigInt(1) << BigInt(63);\n    let number = negative ? BigInt(1) : BigInt(0);\n    let i = BigInt(0);\n    if (!negative) for (const word of words)number += word * (BigInt(1) << BigInt(32) * i++);\n    else {\n        for (const word of words)number += ~word * (BigInt(1) << BigInt(32) * i++);\n        number *= BigInt(-1);\n    }\n    return number;\n}\nlet $9aed8ed3a6d26f6b$export$7c62ab5555479924;\nlet $9aed8ed3a6d26f6b$export$c10f629a0f9b650f;\nif (!(0, $f61ec9f35ec4c8b9$export$bc3644201724b96e)) {\n    $9aed8ed3a6d26f6b$export$7c62ab5555479924 = $9aed8ed3a6d26f6b$var$decimalToString;\n    $9aed8ed3a6d26f6b$export$c10f629a0f9b650f = $9aed8ed3a6d26f6b$export$7c62ab5555479924;\n} else {\n    $9aed8ed3a6d26f6b$export$c10f629a0f9b650f = (a)=>a.byteLength === 8 ? new a[\"BigIntArray\"](a.buffer, a.byteOffset, 1)[0] : $9aed8ed3a6d26f6b$var$decimalToString(a);\n    $9aed8ed3a6d26f6b$export$7c62ab5555479924 = (a)=>a.byteLength === 8 ? `${new a[\"BigIntArray\"](a.buffer, a.byteOffset, 1)[0]}` : $9aed8ed3a6d26f6b$var$decimalToString(a);\n}\n/** @ignore */ function $9aed8ed3a6d26f6b$var$decimalToString(a) {\n    let digits = \"\";\n    const base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1;\n    const n = base32.length - 1;\n    do {\n        for(base64[0] = base32[i = 0]; i < n;){\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    }while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits !== null && digits !== void 0 ? digits : `0`;\n}\nclass $9aed8ed3a6d26f6b$export$ed16643e9b9e3dfe {\n    /** @nocollapse */ static new(num, isSigned) {\n        switch(isSigned){\n            case true:\n                return new $9aed8ed3a6d26f6b$var$SignedBigNum(num);\n            case false:\n                return new $9aed8ed3a6d26f6b$var$UnsignedBigNum(num);\n        }\n        switch(num.constructor){\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case 0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2:\n                return new $9aed8ed3a6d26f6b$var$SignedBigNum(num);\n        }\n        if (num.byteLength === 16) return new $9aed8ed3a6d26f6b$var$DecimalBigNum(num);\n        return new $9aed8ed3a6d26f6b$var$UnsignedBigNum(num);\n    }\n    /** @nocollapse */ static signed(num) {\n        return new $9aed8ed3a6d26f6b$var$SignedBigNum(num);\n    }\n    /** @nocollapse */ static unsigned(num) {\n        return new $9aed8ed3a6d26f6b$var$UnsignedBigNum(num);\n    }\n    /** @nocollapse */ static decimal(num) {\n        return new $9aed8ed3a6d26f6b$var$DecimalBigNum(num);\n    }\n    constructor(num, isSigned){\n        return $9aed8ed3a6d26f6b$export$ed16643e9b9e3dfe.new(num, isSigned);\n    }\n}\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nvar $7101ea1b1020e1ec$var$_a, $7101ea1b1020e1ec$var$_b, $7101ea1b1020e1ec$var$_c, $7101ea1b1020e1ec$var$_d, $7101ea1b1020e1ec$var$_e, $7101ea1b1020e1ec$var$_f, $7101ea1b1020e1ec$var$_g, $7101ea1b1020e1ec$var$_h, $7101ea1b1020e1ec$var$_j, $7101ea1b1020e1ec$var$_k, $7101ea1b1020e1ec$var$_l, $7101ea1b1020e1ec$var$_m, $7101ea1b1020e1ec$var$_o, $7101ea1b1020e1ec$var$_p, $7101ea1b1020e1ec$var$_q, $7101ea1b1020e1ec$var$_r, $7101ea1b1020e1ec$var$_s, $7101ea1b1020e1ec$var$_t, $7101ea1b1020e1ec$var$_u;\nclass $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    /** @nocollapse */ static isNull(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Null;\n    }\n    /** @nocollapse */ static isInt(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Int;\n    }\n    /** @nocollapse */ static isFloat(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Float;\n    }\n    /** @nocollapse */ static isBinary(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Binary;\n    }\n    /** @nocollapse */ static isUtf8(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Utf8;\n    }\n    /** @nocollapse */ static isBool(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Bool;\n    }\n    /** @nocollapse */ static isDecimal(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Decimal;\n    }\n    /** @nocollapse */ static isDate(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Date;\n    }\n    /** @nocollapse */ static isTime(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Time;\n    }\n    /** @nocollapse */ static isTimestamp(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp;\n    }\n    /** @nocollapse */ static isInterval(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Interval;\n    }\n    /** @nocollapse */ static isList(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).List;\n    }\n    /** @nocollapse */ static isStruct(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Struct;\n    }\n    /** @nocollapse */ static isUnion(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Union;\n    }\n    /** @nocollapse */ static isFixedSizeBinary(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary;\n    }\n    /** @nocollapse */ static isFixedSizeList(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList;\n    }\n    /** @nocollapse */ static isMap(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Map;\n    }\n    /** @nocollapse */ static isDictionary(x) {\n        return (x === null || x === void 0 ? void 0 : x.typeId) === (0, $f79edd7127f4719f$export$92738401e1603719).Dictionary;\n    }\n    /** @nocollapse */ static isDenseUnion(x) {\n        return $7101ea1b1020e1ec$export$45c69700ee30a78c.isUnion(x) && x.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense;\n    }\n    /** @nocollapse */ static isSparseUnion(x) {\n        return $7101ea1b1020e1ec$export$45c69700ee30a78c.isUnion(x) && x.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Sparse;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).NONE;\n    }\n}\n$7101ea1b1020e1ec$var$_a = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$45c69700ee30a78c[$7101ea1b1020e1ec$var$_a] = ((proto)=>{\n    proto.children = null;\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = \"DataType\";\n})($7101ea1b1020e1ec$export$45c69700ee30a78c.prototype);\nclass $7101ea1b1020e1ec$export$26c9c3a80cd996ae extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    toString() {\n        return `Null`;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Null;\n    }\n}\n$7101ea1b1020e1ec$var$_b = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$26c9c3a80cd996ae[$7101ea1b1020e1ec$var$_b] = ((proto)=>proto[Symbol.toStringTag] = \"Null\")($7101ea1b1020e1ec$export$26c9c3a80cd996ae.prototype);\n/** @ignore */ class $7101ea1b1020e1ec$export$fdd676b64b72b00 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(isSigned, bitWidth){\n        super();\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Int;\n    }\n    get ArrayType() {\n        switch(this.bitWidth){\n            case 8:\n                return this.isSigned ? Int8Array : Uint8Array;\n            case 16:\n                return this.isSigned ? Int16Array : Uint16Array;\n            case 32:\n                return this.isSigned ? Int32Array : Uint32Array;\n            case 64:\n                return this.isSigned ? (0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2) : (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() {\n        return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;\n    }\n}\n$7101ea1b1020e1ec$var$_c = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$fdd676b64b72b00[$7101ea1b1020e1ec$var$_c] = ((proto)=>{\n    proto.isSigned = null;\n    proto.bitWidth = null;\n    return proto[Symbol.toStringTag] = \"Int\";\n})($7101ea1b1020e1ec$export$fdd676b64b72b00.prototype);\nclass $7101ea1b1020e1ec$export$2174b49024d7a91f extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(true, 8);\n    }\n    get ArrayType() {\n        return Int8Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$840a40d2c6db4b78 extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(true, 16);\n    }\n    get ArrayType() {\n        return Int16Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$493726e231866ac3 extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(true, 32);\n    }\n    get ArrayType() {\n        return Int32Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$8a5e19712a0a5deb extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(true, 64);\n    }\n    get ArrayType() {\n        return 0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2;\n    }\n}\nclass $7101ea1b1020e1ec$export$235b973e27367fb2 extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(false, 8);\n    }\n    get ArrayType() {\n        return Uint8Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$e07c60bdce7b4354 extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(false, 16);\n    }\n    get ArrayType() {\n        return Uint16Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$357453df9520abca extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(false, 32);\n    }\n    get ArrayType() {\n        return Uint32Array;\n    }\n}\nclass $7101ea1b1020e1ec$export$46950b17866d859a extends $7101ea1b1020e1ec$export$fdd676b64b72b00 {\n    constructor(){\n        super(false, 64);\n    }\n    get ArrayType() {\n        return 0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d;\n    }\n}\nObject.defineProperty($7101ea1b1020e1ec$export$2174b49024d7a91f.prototype, \"ArrayType\", {\n    value: Int8Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$840a40d2c6db4b78.prototype, \"ArrayType\", {\n    value: Int16Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$493726e231866ac3.prototype, \"ArrayType\", {\n    value: Int32Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$8a5e19712a0a5deb.prototype, \"ArrayType\", {\n    value: (0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2)\n});\nObject.defineProperty($7101ea1b1020e1ec$export$235b973e27367fb2.prototype, \"ArrayType\", {\n    value: Uint8Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$e07c60bdce7b4354.prototype, \"ArrayType\", {\n    value: Uint16Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$357453df9520abca.prototype, \"ArrayType\", {\n    value: Uint32Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$46950b17866d859a.prototype, \"ArrayType\", {\n    value: (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)\n});\nclass $7101ea1b1020e1ec$export$bb89b76e902dbdb5 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(precision){\n        super();\n        this.precision = precision;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Float;\n    }\n    get ArrayType() {\n        switch(this.precision){\n            case (0, $f79edd7127f4719f$export$be201676156f3e60).HALF:\n                return Uint16Array;\n            case (0, $f79edd7127f4719f$export$be201676156f3e60).SINGLE:\n                return Float32Array;\n            case (0, $f79edd7127f4719f$export$be201676156f3e60).DOUBLE:\n                return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() {\n        return `Float${this.precision << 5 || 16}`;\n    }\n}\n$7101ea1b1020e1ec$var$_d = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$bb89b76e902dbdb5[$7101ea1b1020e1ec$var$_d] = ((proto)=>{\n    proto.precision = null;\n    return proto[Symbol.toStringTag] = \"Float\";\n})($7101ea1b1020e1ec$export$bb89b76e902dbdb5.prototype);\nclass $7101ea1b1020e1ec$export$c983ffbc243ea128 extends $7101ea1b1020e1ec$export$bb89b76e902dbdb5 {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$be201676156f3e60).HALF);\n    }\n}\nclass $7101ea1b1020e1ec$export$d2ee3fd19968539e extends $7101ea1b1020e1ec$export$bb89b76e902dbdb5 {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$be201676156f3e60).SINGLE);\n    }\n}\nclass $7101ea1b1020e1ec$export$42429e12507a49a2 extends $7101ea1b1020e1ec$export$bb89b76e902dbdb5 {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$be201676156f3e60).DOUBLE);\n    }\n}\nObject.defineProperty($7101ea1b1020e1ec$export$c983ffbc243ea128.prototype, \"ArrayType\", {\n    value: Uint16Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$d2ee3fd19968539e.prototype, \"ArrayType\", {\n    value: Float32Array\n});\nObject.defineProperty($7101ea1b1020e1ec$export$42429e12507a49a2.prototype, \"ArrayType\", {\n    value: Float64Array\n});\nclass $7101ea1b1020e1ec$export$dbada097a9bd1de9 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(){\n        super();\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Binary;\n    }\n    toString() {\n        return `Binary`;\n    }\n}\n$7101ea1b1020e1ec$var$_e = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$dbada097a9bd1de9[$7101ea1b1020e1ec$var$_e] = ((proto)=>{\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = \"Binary\";\n})($7101ea1b1020e1ec$export$dbada097a9bd1de9.prototype);\nclass $7101ea1b1020e1ec$export$3ee43a596719d7b5 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(){\n        super();\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Utf8;\n    }\n    toString() {\n        return `Utf8`;\n    }\n}\n$7101ea1b1020e1ec$var$_f = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$3ee43a596719d7b5[$7101ea1b1020e1ec$var$_f] = ((proto)=>{\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = \"Utf8\";\n})($7101ea1b1020e1ec$export$3ee43a596719d7b5.prototype);\nclass $7101ea1b1020e1ec$export$6e6298e1abe0d5b extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(){\n        super();\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Bool;\n    }\n    toString() {\n        return `Bool`;\n    }\n}\n$7101ea1b1020e1ec$var$_g = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$6e6298e1abe0d5b[$7101ea1b1020e1ec$var$_g] = ((proto)=>{\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = \"Bool\";\n})($7101ea1b1020e1ec$export$6e6298e1abe0d5b.prototype);\nclass $7101ea1b1020e1ec$export$95c991896bef8714 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(scale, precision, bitWidth = 128){\n        super();\n        this.scale = scale;\n        this.precision = precision;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Decimal;\n    }\n    toString() {\n        return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`;\n    }\n}\n$7101ea1b1020e1ec$var$_h = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$95c991896bef8714[$7101ea1b1020e1ec$var$_h] = ((proto)=>{\n    proto.scale = null;\n    proto.precision = null;\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = \"Decimal\";\n})($7101ea1b1020e1ec$export$95c991896bef8714.prototype);\nclass $7101ea1b1020e1ec$export$6d0683f8044360cf extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(unit){\n        super();\n        this.unit = unit;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Date;\n    }\n    toString() {\n        return `Date${(this.unit + 1) * 32}<${(0, $f79edd7127f4719f$export$b3f55ef7f087e744)[this.unit]}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_j = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$6d0683f8044360cf[$7101ea1b1020e1ec$var$_j] = ((proto)=>{\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = \"Date\";\n})($7101ea1b1020e1ec$export$6d0683f8044360cf.prototype);\nclass $7101ea1b1020e1ec$export$c412d63ce6b9a73e extends $7101ea1b1020e1ec$export$6d0683f8044360cf {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$b3f55ef7f087e744).DAY);\n    }\n}\nclass $7101ea1b1020e1ec$export$def17eba046722e2 extends $7101ea1b1020e1ec$export$6d0683f8044360cf {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$b3f55ef7f087e744).MILLISECOND);\n    }\n}\n/** @ignore */ class $7101ea1b1020e1ec$export$680ea196effce5f extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(unit, bitWidth){\n        super();\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Time;\n    }\n    toString() {\n        return `Time${this.bitWidth}<${(0, $f79edd7127f4719f$export$d9e59215631231e3)[this.unit]}>`;\n    }\n    get ArrayType() {\n        switch(this.bitWidth){\n            case 32:\n                return Int32Array;\n            case 64:\n                return 0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n}\n$7101ea1b1020e1ec$var$_k = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$680ea196effce5f[$7101ea1b1020e1ec$var$_k] = ((proto)=>{\n    proto.unit = null;\n    proto.bitWidth = null;\n    return proto[Symbol.toStringTag] = \"Time\";\n})($7101ea1b1020e1ec$export$680ea196effce5f.prototype);\nclass $7101ea1b1020e1ec$export$fef77db16cdd8e73 extends $7101ea1b1020e1ec$export$680ea196effce5f {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND, 32);\n    }\n}\nclass $7101ea1b1020e1ec$export$5ddf0de018c462fc extends $7101ea1b1020e1ec$export$680ea196effce5f {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND, 32);\n    }\n}\nclass $7101ea1b1020e1ec$export$499c3c85b614dc9a extends $7101ea1b1020e1ec$export$680ea196effce5f {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND, 64);\n    }\n}\nclass $7101ea1b1020e1ec$export$bebd7d4697b295bb extends $7101ea1b1020e1ec$export$680ea196effce5f {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND, 64);\n    }\n}\n/** @ignore */ class $7101ea1b1020e1ec$export$d9bcbd5e1ff81430 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(unit, timezone){\n        super();\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp;\n    }\n    toString() {\n        return `Timestamp<${(0, $f79edd7127f4719f$export$d9e59215631231e3)[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_l = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$d9bcbd5e1ff81430[$7101ea1b1020e1ec$var$_l] = ((proto)=>{\n    proto.unit = null;\n    proto.timezone = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = \"Timestamp\";\n})($7101ea1b1020e1ec$export$d9bcbd5e1ff81430.prototype);\nclass $7101ea1b1020e1ec$export$77269e094038909e extends $7101ea1b1020e1ec$export$d9bcbd5e1ff81430 {\n    constructor(timezone){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND, timezone);\n    }\n}\nclass $7101ea1b1020e1ec$export$31a03cde5cd6b49f extends $7101ea1b1020e1ec$export$d9bcbd5e1ff81430 {\n    constructor(timezone){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND, timezone);\n    }\n}\nclass $7101ea1b1020e1ec$export$63ef78810583583b extends $7101ea1b1020e1ec$export$d9bcbd5e1ff81430 {\n    constructor(timezone){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND, timezone);\n    }\n}\nclass $7101ea1b1020e1ec$export$3955550c9d61d529 extends $7101ea1b1020e1ec$export$d9bcbd5e1ff81430 {\n    constructor(timezone){\n        super((0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND, timezone);\n    }\n}\n/** @ignore */ class $7101ea1b1020e1ec$export$e659c2681d58d45b extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(unit){\n        super();\n        this.unit = unit;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Interval;\n    }\n    toString() {\n        return `Interval<${(0, $f79edd7127f4719f$export$dd27fec05eba03b)[this.unit]}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_m = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$e659c2681d58d45b[$7101ea1b1020e1ec$var$_m] = ((proto)=>{\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = \"Interval\";\n})($7101ea1b1020e1ec$export$e659c2681d58d45b.prototype);\nclass $7101ea1b1020e1ec$export$3b541c49e1d642aa extends $7101ea1b1020e1ec$export$e659c2681d58d45b {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$dd27fec05eba03b).DAY_TIME);\n    }\n}\nclass $7101ea1b1020e1ec$export$821e8620ab8f5026 extends $7101ea1b1020e1ec$export$e659c2681d58d45b {\n    constructor(){\n        super((0, $f79edd7127f4719f$export$dd27fec05eba03b).YEAR_MONTH);\n    }\n}\nclass $7101ea1b1020e1ec$export$54c2e3dc7acea9f5 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(child){\n        super();\n        this.children = [\n            child\n        ];\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).List;\n    }\n    toString() {\n        return `List<${this.valueType}>`;\n    }\n    get valueType() {\n        return this.children[0].type;\n    }\n    get valueField() {\n        return this.children[0];\n    }\n    get ArrayType() {\n        return this.valueType.ArrayType;\n    }\n}\n$7101ea1b1020e1ec$var$_o = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$54c2e3dc7acea9f5[$7101ea1b1020e1ec$var$_o] = ((proto)=>{\n    proto.children = null;\n    return proto[Symbol.toStringTag] = \"List\";\n})($7101ea1b1020e1ec$export$54c2e3dc7acea9f5.prototype);\nclass $7101ea1b1020e1ec$export$eabc71f011df675a extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(children){\n        super();\n        this.children = children;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Struct;\n    }\n    toString() {\n        return `Struct<{${this.children.map((f)=>`${f.name}:${f.type}`).join(`, `)}}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_p = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$eabc71f011df675a[$7101ea1b1020e1ec$var$_p] = ((proto)=>{\n    proto.children = null;\n    return proto[Symbol.toStringTag] = \"Struct\";\n})($7101ea1b1020e1ec$export$eabc71f011df675a.prototype);\n/** @ignore */ class $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(mode, typeIds, children){\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx)=>(typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null));\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Union;\n    }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x)=>`${x.type}`).join(` | `)}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_q = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$6cbb4f8fa0c4c986[$7101ea1b1020e1ec$var$_q] = ((proto)=>{\n    proto.mode = null;\n    proto.typeIds = null;\n    proto.children = null;\n    proto.typeIdToChildIndex = null;\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = \"Union\";\n})($7101ea1b1020e1ec$export$6cbb4f8fa0c4c986.prototype);\nclass $7101ea1b1020e1ec$export$97c681fb4ba0afd2 extends $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986 {\n    constructor(typeIds, children){\n        super((0, $f79edd7127f4719f$export$a82fae803f3856de).Dense, typeIds, children);\n    }\n}\nclass $7101ea1b1020e1ec$export$67930ae58304e802 extends $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986 {\n    constructor(typeIds, children){\n        super((0, $f79edd7127f4719f$export$a82fae803f3856de).Sparse, typeIds, children);\n    }\n}\nclass $7101ea1b1020e1ec$export$acd1628a1dd918f2 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(byteWidth){\n        super();\n        this.byteWidth = byteWidth;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary;\n    }\n    toString() {\n        return `FixedSizeBinary[${this.byteWidth}]`;\n    }\n}\n$7101ea1b1020e1ec$var$_r = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$acd1628a1dd918f2[$7101ea1b1020e1ec$var$_r] = ((proto)=>{\n    proto.byteWidth = null;\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = \"FixedSizeBinary\";\n})($7101ea1b1020e1ec$export$acd1628a1dd918f2.prototype);\nclass $7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(listSize, child){\n        super();\n        this.listSize = listSize;\n        this.children = [\n            child\n        ];\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList;\n    }\n    get valueType() {\n        return this.children[0].type;\n    }\n    get valueField() {\n        return this.children[0];\n    }\n    get ArrayType() {\n        return this.valueType.ArrayType;\n    }\n    toString() {\n        return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_s = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7[$7101ea1b1020e1ec$var$_s] = ((proto)=>{\n    proto.children = null;\n    proto.listSize = null;\n    return proto[Symbol.toStringTag] = \"FixedSizeList\";\n})($7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7.prototype);\nclass $7101ea1b1020e1ec$export$deb68d24b0e86bc0 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(child, keysSorted = false){\n        super();\n        this.children = [\n            child\n        ];\n        this.keysSorted = keysSorted;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Map;\n    }\n    get keyType() {\n        return this.children[0].type.children[0].type;\n    }\n    get valueType() {\n        return this.children[0].type.children[1].type;\n    }\n    get childType() {\n        return this.children[0].type;\n    }\n    toString() {\n        return `Map<{${this.children[0].type.children.map((f)=>`${f.name}:${f.type}`).join(`, `)}}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_t = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$deb68d24b0e86bc0[$7101ea1b1020e1ec$var$_t] = ((proto)=>{\n    proto.children = null;\n    proto.keysSorted = null;\n    return proto[Symbol.toStringTag] = \"Map_\";\n})($7101ea1b1020e1ec$export$deb68d24b0e86bc0.prototype);\n/** @ignore */ const $7101ea1b1020e1ec$var$getId = ((atomicDictionaryId)=>()=>++atomicDictionaryId)(-1);\nclass $7101ea1b1020e1ec$export$4ee70ab773570fb9 extends $7101ea1b1020e1ec$export$45c69700ee30a78c {\n    constructor(dictionary, indices, id, isOrdered){\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? $7101ea1b1020e1ec$var$getId() : typeof id === \"number\" ? id : id.low;\n    }\n    get typeId() {\n        return (0, $f79edd7127f4719f$export$92738401e1603719).Dictionary;\n    }\n    get children() {\n        return this.dictionary.children;\n    }\n    get valueType() {\n        return this.dictionary;\n    }\n    get ArrayType() {\n        return this.dictionary.ArrayType;\n    }\n    toString() {\n        return `Dictionary<${this.indices}, ${this.dictionary}>`;\n    }\n}\n$7101ea1b1020e1ec$var$_u = Symbol.toStringTag;\n$7101ea1b1020e1ec$export$4ee70ab773570fb9[$7101ea1b1020e1ec$var$_u] = ((proto)=>{\n    proto.id = null;\n    proto.indices = null;\n    proto.isOrdered = null;\n    proto.dictionary = null;\n    return proto[Symbol.toStringTag] = \"Dictionary\";\n})($7101ea1b1020e1ec$export$4ee70ab773570fb9.prototype);\nfunction $7101ea1b1020e1ec$export$34337cb9c8e6db90(type) {\n    const t = type;\n    switch(type.typeId){\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Decimal:\n            return type.bitWidth / 32;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp:\n            return 2;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Date:\n            return 1 + t.unit;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Interval:\n            return 1 + t.unit;\n        // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList:\n            return t.listSize;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary:\n            return t.byteWidth;\n        default:\n            return 1;\n    }\n}\n\n\nclass $f311b4df488f5c42$export$9d54d4ec2dd4b364 {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i)=>this.visit(node, ...args.map((x)=>x[i])));\n    }\n    visit(...args) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return $f311b4df488f5c42$var$getVisitFn(this, node, throwIfNotFound);\n    }\n    getVisitFnByTypeId(typeId, throwIfNotFound = true) {\n        return $f311b4df488f5c42$var$getVisitFnByTypeId(this, typeId, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) {\n        return null;\n    }\n    visitBool(_node, ..._args) {\n        return null;\n    }\n    visitInt(_node, ..._args) {\n        return null;\n    }\n    visitFloat(_node, ..._args) {\n        return null;\n    }\n    visitUtf8(_node, ..._args) {\n        return null;\n    }\n    visitBinary(_node, ..._args) {\n        return null;\n    }\n    visitFixedSizeBinary(_node, ..._args) {\n        return null;\n    }\n    visitDate(_node, ..._args) {\n        return null;\n    }\n    visitTimestamp(_node, ..._args) {\n        return null;\n    }\n    visitTime(_node, ..._args) {\n        return null;\n    }\n    visitDecimal(_node, ..._args) {\n        return null;\n    }\n    visitList(_node, ..._args) {\n        return null;\n    }\n    visitStruct(_node, ..._args) {\n        return null;\n    }\n    visitUnion(_node, ..._args) {\n        return null;\n    }\n    visitDictionary(_node, ..._args) {\n        return null;\n    }\n    visitInterval(_node, ..._args) {\n        return null;\n    }\n    visitFixedSizeList(_node, ..._args) {\n        return null;\n    }\n    visitMap(_node, ..._args) {\n        return null;\n    }\n}\n/** @ignore */ function $f311b4df488f5c42$var$getVisitFn(visitor, node, throwIfNotFound = true) {\n    if (typeof node === \"number\") return $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, node, throwIfNotFound);\n    if (typeof node === \"string\" && node in (0, $f79edd7127f4719f$export$92738401e1603719)) return $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, (0, $f79edd7127f4719f$export$92738401e1603719)[node], throwIfNotFound);\n    if (node && node instanceof (0, $7101ea1b1020e1ec$export$45c69700ee30a78c)) return $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, $f311b4df488f5c42$var$inferDType(node), throwIfNotFound);\n    if ((node === null || node === void 0 ? void 0 : node.type) && node.type instanceof (0, $7101ea1b1020e1ec$export$45c69700ee30a78c)) return $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, $f311b4df488f5c42$var$inferDType(node.type), throwIfNotFound);\n    return $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, (0, $f79edd7127f4719f$export$92738401e1603719).NONE, throwIfNotFound);\n}\n/** @ignore */ function $f311b4df488f5c42$var$getVisitFnByTypeId(visitor, dtype, throwIfNotFound = true) {\n    let fn = null;\n    switch(dtype){\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Null:\n            fn = visitor.visitNull;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Bool:\n            fn = visitor.visitBool;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int:\n            fn = visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Float:\n            fn = visitor.visitFloat;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Binary:\n            fn = visitor.visitBinary;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Date:\n            fn = visitor.visitDate;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Time:\n            fn = visitor.visitTime;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).List:\n            fn = visitor.visitList;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Struct:\n            fn = visitor.visitStruct;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Union:\n            fn = visitor.visitUnion;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Interval:\n            fn = visitor.visitInterval;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === \"function\") return fn;\n    if (!throwIfNotFound) return ()=>null;\n    throw new Error(`Unrecognized type '${(0, $f79edd7127f4719f$export$92738401e1603719)[dtype]}'`);\n}\n/** @ignore */ function $f311b4df488f5c42$var$inferDType(type) {\n    switch(type.typeId){\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Null:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Null;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Int:\n            {\n                const { bitWidth: bitWidth, isSigned: isSigned } = type;\n                switch(bitWidth){\n                    case 8:\n                        return isSigned ? (0, $f79edd7127f4719f$export$92738401e1603719).Int8 : (0, $f79edd7127f4719f$export$92738401e1603719).Uint8;\n                    case 16:\n                        return isSigned ? (0, $f79edd7127f4719f$export$92738401e1603719).Int16 : (0, $f79edd7127f4719f$export$92738401e1603719).Uint16;\n                    case 32:\n                        return isSigned ? (0, $f79edd7127f4719f$export$92738401e1603719).Int32 : (0, $f79edd7127f4719f$export$92738401e1603719).Uint32;\n                    case 64:\n                        return isSigned ? (0, $f79edd7127f4719f$export$92738401e1603719).Int64 : (0, $f79edd7127f4719f$export$92738401e1603719).Uint64;\n                }\n                // @ts-ignore\n                return (0, $f79edd7127f4719f$export$92738401e1603719).Int;\n            }\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Float:\n            switch(type.precision){\n                case (0, $f79edd7127f4719f$export$be201676156f3e60).HALF:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).Float16;\n                case (0, $f79edd7127f4719f$export$be201676156f3e60).SINGLE:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).Float32;\n                case (0, $f79edd7127f4719f$export$be201676156f3e60).DOUBLE:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).Float64;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Float;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Binary:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Binary;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Utf8:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Utf8;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Bool:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Bool;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Decimal:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Decimal;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Time:\n            switch(type.unit){\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimeSecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimeMillisecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimeMicrosecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimeNanosecond;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Time;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp:\n            switch(type.unit){\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimestampSecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimestampMillisecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimestampMicrosecond;\n                case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).TimestampNanosecond;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Date:\n            switch(type.unit){\n                case (0, $f79edd7127f4719f$export$b3f55ef7f087e744).DAY:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).DateDay;\n                case (0, $f79edd7127f4719f$export$b3f55ef7f087e744).MILLISECOND:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).DateMillisecond;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Date;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Interval:\n            switch(type.unit){\n                case (0, $f79edd7127f4719f$export$dd27fec05eba03b).DAY_TIME:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).IntervalDayTime;\n                case (0, $f79edd7127f4719f$export$dd27fec05eba03b).YEAR_MONTH:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).IntervalYearMonth;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Interval;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Map:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Map;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).List:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).List;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Struct:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Struct;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Union:\n            switch(type.mode){\n                case (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).DenseUnion;\n                case (0, $f79edd7127f4719f$export$a82fae803f3856de).Sparse:\n                    return (0, $f79edd7127f4719f$export$92738401e1603719).SparseUnion;\n            }\n            // @ts-ignore\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Union;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeBinary;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).FixedSizeList;\n        case (0, $f79edd7127f4719f$export$92738401e1603719).Dictionary:\n            return (0, $f79edd7127f4719f$export$92738401e1603719).Dictionary;\n    }\n    throw new Error(`Unrecognized type '${(0, $f79edd7127f4719f$export$92738401e1603719)[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitInt8 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitInt16 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitInt32 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitInt64 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitUint8 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitUint16 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitUint32 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitUint64 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitFloat16 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitFloat32 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitFloat64 = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitDateDay = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitDateMillisecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimestampSecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimestampMillisecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimestampMicrosecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimestampNanosecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimeSecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimeMillisecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimeMicrosecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitTimeNanosecond = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitDenseUnion = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitSparseUnion = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitIntervalDayTime = null;\n$f311b4df488f5c42$export$9d54d4ec2dd4b364.prototype.visitIntervalYearMonth = null;\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst $7a7e4fd849947557$var$f64 = new Float64Array(1);\nconst $7a7e4fd849947557$var$u32 = new Uint32Array($7a7e4fd849947557$var$f64.buffer);\nfunction $7a7e4fd849947557$export$782da64dd3f395f1(h) {\n    const expo = (h & 0x7C00) >> 10;\n    const sigf = (h & 0x03FF) / 1024;\n    const sign = Math.pow(-1, (h & 0x8000) >> 15);\n    switch(expo){\n        case 0x1F:\n            return sign * (sigf ? Number.NaN : 1 / 0);\n        case 0x00:\n            return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * Math.pow(2, expo - 15) * (1 + sigf);\n}\nfunction $7a7e4fd849947557$export$9c71a3ad52f4945a(d) {\n    if (d !== d) return 0x7E00;\n     // NaN\n    $7a7e4fd849947557$var$f64[0] = d;\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n    const sign = ($7a7e4fd849947557$var$u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = $7a7e4fd849947557$var$u32[1] & 0x7FF00000, sigf = 0x0000;\n    if (expo >= 0x40F00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if ($7a7e4fd849947557$var$u32[0] > 0) expo = 0x7C00;\n        else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = ($7a7e4fd849947557$var$u32[1] & 0x000FFFFF) >> 10;\n        }\n    } else if (expo <= 0x3F000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + ($7a7e4fd849947557$var$u32[1] & 0x000FFFFF);\n        sigf = 0x100000 + (sigf << (expo >> 20) - 998) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = expo - 0x3F000000 >> 10;\n        sigf = ($7a7e4fd849947557$var$u32[1] & 0x000FFFFF) + 0x200 >> 10;\n    }\n    return sign | expo | sigf & 0xFFFF;\n}\n\n\n\nclass $02b131079e669552$export$d84e7388ae71a748 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n}\n/** @ignore */ function $02b131079e669552$var$wrapSet(fn) {\n    return (data, _1, _2)=>{\n        if (data.setValid(_1, _2 != null)) return fn(data, _1, _2);\n    };\n}\nconst $02b131079e669552$export$1899de92e028eca4 = (data, index, epochMs)=>{\n    data[index] = Math.trunc(epochMs / 86400000);\n};\nconst $02b131079e669552$export$2611a10fef01c8cc = (data, index, epochMs)=>{\n    data[index] = Math.trunc(epochMs % 4294967296);\n    data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\nconst $02b131079e669552$export$ec0cf2ffa84a3d99 = (data, index, epochMs)=>{\n    data[index] = Math.trunc(epochMs * 1000 % 4294967296);\n    data[index + 1] = Math.trunc(epochMs * 1000 / 4294967296);\n};\nconst $02b131079e669552$export$64b390a0924023e8 = (data, index, epochMs)=>{\n    data[index] = Math.trunc(epochMs * 1000000 % 4294967296);\n    data[index + 1] = Math.trunc(epochMs * 1000000 / 4294967296);\n};\nconst $02b131079e669552$export$1145125b44b096fb = (values, valueOffsets, index, value)=>{\n    if (index + 1 < valueOffsets.length) {\n        const { [index]: x, [index + 1]: y } = valueOffsets;\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n/** @ignore */ const $02b131079e669552$var$setBool = ({ offset: offset, values: values }, index, val)=>{\n    const idx = offset + index;\n    val ? values[idx >> 3] |= 1 << idx % 8 // true\n     : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\nconst $02b131079e669552$export$949fe9d278523f2a = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$89db590c4cd337d3 = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$6f1906b3fdafea24 = ({ values: values }, index, value)=>{\n    values[index] = (0, $7a7e4fd849947557$export$9c71a3ad52f4945a)(value);\n};\nconst $02b131079e669552$export$65f16452e2f831d9 = (data, index, value)=>{\n    switch(data.type.precision){\n        case (0, $f79edd7127f4719f$export$be201676156f3e60).HALF:\n            return $02b131079e669552$export$6f1906b3fdafea24(data, index, value);\n        case (0, $f79edd7127f4719f$export$be201676156f3e60).SINGLE:\n        case (0, $f79edd7127f4719f$export$be201676156f3e60).DOUBLE:\n            return $02b131079e669552$export$89db590c4cd337d3(data, index, value);\n    }\n};\nconst $02b131079e669552$export$1c2cc1b96b58b1d1 = ({ values: values }, index, value)=>{\n    $02b131079e669552$export$1899de92e028eca4(values, index, value.valueOf());\n};\nconst $02b131079e669552$export$bb770250cb177ad2 = ({ values: values }, index, value)=>{\n    $02b131079e669552$export$2611a10fef01c8cc(values, index * 2, value.valueOf());\n};\nconst $02b131079e669552$export$37c190d5a22f51cd = ({ stride: stride, values: values }, index, value)=>{\n    values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */ const $02b131079e669552$var$setBinary = ({ values: values, valueOffsets: valueOffsets }, index, value)=>$02b131079e669552$export$1145125b44b096fb(values, valueOffsets, index, value);\n/** @ignore */ const $02b131079e669552$var$setUtf8 = ({ values: values, valueOffsets: valueOffsets }, index, value)=>{\n    $02b131079e669552$export$1145125b44b096fb(values, valueOffsets, index, (0, $919e3c7689196a2e$export$8f647c2204da8484)(value));\n};\nconst $02b131079e669552$export$566174fa40823587 = (data, index, value)=>{\n    data.type.unit === (0, $f79edd7127f4719f$export$b3f55ef7f087e744).DAY ? $02b131079e669552$export$1c2cc1b96b58b1d1(data, index, value) : $02b131079e669552$export$bb770250cb177ad2(data, index, value);\n};\nconst $02b131079e669552$export$a8df9fe4302d9515 = ({ values: values }, index, value)=>$02b131079e669552$export$2611a10fef01c8cc(values, index * 2, value / 1000);\nconst $02b131079e669552$export$b15d4d3e8dc34daf = ({ values: values }, index, value)=>$02b131079e669552$export$2611a10fef01c8cc(values, index * 2, value);\nconst $02b131079e669552$export$74f399dc684b99dc = ({ values: values }, index, value)=>$02b131079e669552$export$ec0cf2ffa84a3d99(values, index * 2, value);\nconst $02b131079e669552$export$a669d6701b9d0694 = ({ values: values }, index, value)=>$02b131079e669552$export$64b390a0924023e8(values, index * 2, value);\nconst $02b131079e669552$export$92fd42d4569bec0b = (data, index, value)=>{\n    switch(data.type.unit){\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n            return $02b131079e669552$export$a8df9fe4302d9515(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n            return $02b131079e669552$export$b15d4d3e8dc34daf(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n            return $02b131079e669552$export$74f399dc684b99dc(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n            return $02b131079e669552$export$a669d6701b9d0694(data, index, value);\n    }\n};\nconst $02b131079e669552$export$3f12d34d8a01cbfc = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$9d9527a16c0d803e = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$8a9291bdc36e3d43 = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$aa9540ea8a7ac603 = ({ values: values }, index, value)=>{\n    values[index] = value;\n};\nconst $02b131079e669552$export$e5d5e1c1822b6e56 = (data, index, value)=>{\n    switch(data.type.unit){\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n            return $02b131079e669552$export$3f12d34d8a01cbfc(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n            return $02b131079e669552$export$9d9527a16c0d803e(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n            return $02b131079e669552$export$8a9291bdc36e3d43(data, index, value);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n            return $02b131079e669552$export$aa9540ea8a7ac603(data, index, value);\n    }\n};\nconst $02b131079e669552$export$68dd22903d458048 = ({ values: values, stride: stride }, index, value)=>{\n    values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */ const $02b131079e669552$var$setList = (data, index, value)=>{\n    const values = data.children[0];\n    const valueOffsets = data.valueOffsets;\n    const set = $02b131079e669552$export$9544d5bb712b01ea.getVisitFn(values);\n    if (Array.isArray(value)) for(let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;)set(values, itr++, value[++idx]);\n    else for(let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;)set(values, itr++, value.get(++idx));\n};\n/** @ignore */ const $02b131079e669552$var$setMap = (data, index, value)=>{\n    const values = data.children[0];\n    const { valueOffsets: valueOffsets } = data;\n    const set = $02b131079e669552$export$9544d5bb712b01ea.getVisitFn(values);\n    let { [index]: idx, [index + 1]: end } = valueOffsets;\n    const entries = value instanceof Map ? value.entries() : Object.entries(value);\n    for (const val of entries){\n        set(values, idx, val);\n        if (++idx >= end) break;\n    }\n};\n/** @ignore */ const $02b131079e669552$var$_setStructArrayValue = (o, v)=>(set, c, _, i)=>c && set(c, o, v[i]);\n/** @ignore */ const $02b131079e669552$var$_setStructVectorValue = (o, v)=>(set, c, _, i)=>c && set(c, o, v.get(i));\n/** @ignore */ const $02b131079e669552$var$_setStructMapValue = (o, v)=>(set, c, f, _)=>c && set(c, o, v.get(f.name));\n/** @ignore */ const $02b131079e669552$var$_setStructObjectValue = (o, v)=>(set, c, f, _)=>c && set(c, o, v[f.name]);\n/** @ignore */ const $02b131079e669552$var$setStruct = (data, index, value)=>{\n    const childSetters = data.type.children.map((f)=>$02b131079e669552$export$9544d5bb712b01ea.getVisitFn(f.type));\n    const set = value instanceof Map ? $02b131079e669552$var$_setStructMapValue(index, value) : value instanceof (0, $32ea7584b42ab85d$export$9b781de7bf37bf48) ? $02b131079e669552$var$_setStructVectorValue(index, value) : Array.isArray(value) ? $02b131079e669552$var$_setStructArrayValue(index, value) : $02b131079e669552$var$_setStructObjectValue(index, value);\n    // eslint-disable-next-line unicorn/no-array-for-each\n    data.type.children.forEach((f, i)=>set(childSetters[i], data.children[i], f, i));\n};\n/* istanbul ignore next */ /** @ignore */ const $02b131079e669552$var$setUnion = (data, index, value)=>{\n    data.type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense ? $02b131079e669552$var$setDenseUnion(data, index, value) : $02b131079e669552$var$setSparseUnion(data, index, value);\n};\n/** @ignore */ const $02b131079e669552$var$setDenseUnion = (data, index, value)=>{\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    $02b131079e669552$export$9544d5bb712b01ea.visit(child, data.valueOffsets[index], value);\n};\n/** @ignore */ const $02b131079e669552$var$setSparseUnion = (data, index, value)=>{\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    $02b131079e669552$export$9544d5bb712b01ea.visit(child, index, value);\n};\n/** @ignore */ const $02b131079e669552$var$setDictionary = (data, index, value)=>{\n    var _a;\n    (_a = data.dictionary) === null || _a === void 0 || _a.set(data.values[index], value);\n};\nconst $02b131079e669552$export$36414baf865a2a5c = (data, index, value)=>{\n    data.type.unit === (0, $f79edd7127f4719f$export$dd27fec05eba03b).DAY_TIME ? $02b131079e669552$export$3c7565d5cdb2d0a1(data, index, value) : $02b131079e669552$export$b484089ec0818b04(data, index, value);\n};\nconst $02b131079e669552$export$3c7565d5cdb2d0a1 = ({ values: values }, index, value)=>{\n    values.set(value.subarray(0, 2), 2 * index);\n};\nconst $02b131079e669552$export$b484089ec0818b04 = ({ values: values }, index, value)=>{\n    values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */ const $02b131079e669552$var$setFixedSizeList = (data, index, value)=>{\n    const { stride: stride } = data;\n    const child = data.children[0];\n    const set = $02b131079e669552$export$9544d5bb712b01ea.getVisitFn(child);\n    if (Array.isArray(value)) for(let idx = -1, offset = index * stride; ++idx < stride;)set(child, offset + idx, value[idx]);\n    else for(let idx = -1, offset = index * stride; ++idx < stride;)set(child, offset + idx, value.get(idx));\n};\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitBool = $02b131079e669552$var$wrapSet($02b131079e669552$var$setBool);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInt = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInt8 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInt16 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInt32 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInt64 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUint8 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUint16 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUint32 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUint64 = $02b131079e669552$var$wrapSet($02b131079e669552$export$949fe9d278523f2a);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFloat = $02b131079e669552$var$wrapSet($02b131079e669552$export$65f16452e2f831d9);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFloat16 = $02b131079e669552$var$wrapSet($02b131079e669552$export$6f1906b3fdafea24);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFloat32 = $02b131079e669552$var$wrapSet($02b131079e669552$export$89db590c4cd337d3);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFloat64 = $02b131079e669552$var$wrapSet($02b131079e669552$export$89db590c4cd337d3);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUtf8 = $02b131079e669552$var$wrapSet($02b131079e669552$var$setUtf8);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitBinary = $02b131079e669552$var$wrapSet($02b131079e669552$var$setBinary);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFixedSizeBinary = $02b131079e669552$var$wrapSet($02b131079e669552$export$37c190d5a22f51cd);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDate = $02b131079e669552$var$wrapSet($02b131079e669552$export$566174fa40823587);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDateDay = $02b131079e669552$var$wrapSet($02b131079e669552$export$1c2cc1b96b58b1d1);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDateMillisecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$bb770250cb177ad2);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimestamp = $02b131079e669552$var$wrapSet($02b131079e669552$export$92fd42d4569bec0b);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimestampSecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$a8df9fe4302d9515);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimestampMillisecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$b15d4d3e8dc34daf);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimestampMicrosecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$74f399dc684b99dc);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimestampNanosecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$a669d6701b9d0694);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTime = $02b131079e669552$var$wrapSet($02b131079e669552$export$e5d5e1c1822b6e56);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimeSecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$3f12d34d8a01cbfc);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimeMillisecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$9d9527a16c0d803e);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimeMicrosecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$8a9291bdc36e3d43);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitTimeNanosecond = $02b131079e669552$var$wrapSet($02b131079e669552$export$aa9540ea8a7ac603);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDecimal = $02b131079e669552$var$wrapSet($02b131079e669552$export$68dd22903d458048);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitList = $02b131079e669552$var$wrapSet($02b131079e669552$var$setList);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitStruct = $02b131079e669552$var$wrapSet($02b131079e669552$var$setStruct);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitUnion = $02b131079e669552$var$wrapSet($02b131079e669552$var$setUnion);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDenseUnion = $02b131079e669552$var$wrapSet($02b131079e669552$var$setDenseUnion);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitSparseUnion = $02b131079e669552$var$wrapSet($02b131079e669552$var$setSparseUnion);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitDictionary = $02b131079e669552$var$wrapSet($02b131079e669552$var$setDictionary);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitInterval = $02b131079e669552$var$wrapSet($02b131079e669552$export$36414baf865a2a5c);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitIntervalDayTime = $02b131079e669552$var$wrapSet($02b131079e669552$export$3c7565d5cdb2d0a1);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitIntervalYearMonth = $02b131079e669552$var$wrapSet($02b131079e669552$export$b484089ec0818b04);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitFixedSizeList = $02b131079e669552$var$wrapSet($02b131079e669552$var$setFixedSizeList);\n$02b131079e669552$export$d84e7388ae71a748.prototype.visitMap = $02b131079e669552$var$wrapSet($02b131079e669552$var$setMap);\nconst $02b131079e669552$export$9544d5bb712b01ea = new $02b131079e669552$export$d84e7388ae71a748();\n\n\n/** @ignore */ const $0f04b156032e64c4$var$kParent = Symbol.for(\"parent\");\n/** @ignore */ const $0f04b156032e64c4$var$kRowIndex = Symbol.for(\"rowIndex\");\nclass $0f04b156032e64c4$export$ce7b327a6152c29c {\n    constructor(parent, rowIndex){\n        this[$0f04b156032e64c4$var$kParent] = parent;\n        this[$0f04b156032e64c4$var$kRowIndex] = rowIndex;\n        return new Proxy(this, new $0f04b156032e64c4$var$StructRowProxyHandler());\n    }\n    toArray() {\n        return Object.values(this.toJSON());\n    }\n    toJSON() {\n        const i = this[$0f04b156032e64c4$var$kRowIndex];\n        const parent = this[$0f04b156032e64c4$var$kParent];\n        const keys = parent.type.children;\n        const json = {};\n        for(let j = -1, n = keys.length; ++j < n;)json[keys[j].name] = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(parent.children[j], i);\n        return json;\n    }\n    toString() {\n        return `{${[\n            ...this\n        ].map(([key, val])=>`${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(key)}: ${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(val)}`).join(\", \")}}`;\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return this.toString();\n    }\n    [Symbol.iterator]() {\n        return new $0f04b156032e64c4$var$StructRowIterator(this[$0f04b156032e64c4$var$kParent], this[$0f04b156032e64c4$var$kRowIndex]);\n    }\n}\nclass $0f04b156032e64c4$var$StructRowIterator {\n    constructor(data, rowIndex){\n        this.childIndex = 0;\n        this.children = data.children;\n        this.rowIndex = rowIndex;\n        this.childFields = data.type.children;\n        this.numChildren = this.childFields.length;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const i = this.childIndex;\n        if (i < this.numChildren) {\n            this.childIndex = i + 1;\n            return {\n                done: false,\n                value: [\n                    this.childFields[i].name,\n                    (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(this.children[i], this.rowIndex)\n                ]\n            };\n        }\n        return {\n            done: true,\n            value: null\n        };\n    }\n}\nObject.defineProperties($0f04b156032e64c4$export$ce7b327a6152c29c.prototype, {\n    [Symbol.toStringTag]: {\n        enumerable: false,\n        configurable: false,\n        value: \"Row\"\n    },\n    [$0f04b156032e64c4$var$kParent]: {\n        writable: true,\n        enumerable: false,\n        configurable: false,\n        value: null\n    },\n    [$0f04b156032e64c4$var$kRowIndex]: {\n        writable: true,\n        enumerable: false,\n        configurable: false,\n        value: -1\n    }\n});\nclass $0f04b156032e64c4$var$StructRowProxyHandler {\n    isExtensible() {\n        return false;\n    }\n    deleteProperty() {\n        return false;\n    }\n    preventExtensions() {\n        return true;\n    }\n    ownKeys(row) {\n        return row[$0f04b156032e64c4$var$kParent].type.children.map((f)=>f.name);\n    }\n    has(row, key) {\n        return row[$0f04b156032e64c4$var$kParent].type.children.findIndex((f)=>f.name === key) !== -1;\n    }\n    getOwnPropertyDescriptor(row, key) {\n        if (row[$0f04b156032e64c4$var$kParent].type.children.findIndex((f)=>f.name === key) !== -1) return {\n            writable: true,\n            enumerable: true,\n            configurable: true\n        };\n        return;\n    }\n    get(row, key) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) return row[key];\n        const idx = row[$0f04b156032e64c4$var$kParent].type.children.findIndex((f)=>f.name === key);\n        if (idx !== -1) {\n            const val = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(row[$0f04b156032e64c4$var$kParent].children[idx], row[$0f04b156032e64c4$var$kRowIndex]);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row, key, val) {\n        const idx = row[$0f04b156032e64c4$var$kParent].type.children.findIndex((f)=>f.name === key);\n        if (idx !== -1) {\n            (0, $02b131079e669552$export$9544d5bb712b01ea).visit(row[$0f04b156032e64c4$var$kParent].children[idx], row[$0f04b156032e64c4$var$kRowIndex], val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        } else if (Reflect.has(row, key) || typeof key === \"symbol\") return Reflect.set(row, key, val);\n        return false;\n    }\n}\n\n\n\n\n\nclass $d281eaf03ad48e28$export$add57bf42f59861d extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n}\n/** @ignore */ function $d281eaf03ad48e28$var$wrapGet(fn) {\n    return (data, _1)=>data.getValid(_1) ? fn(data, _1) : null;\n}\n/** @ignore */ const $d281eaf03ad48e28$var$epochDaysToMs = (data, index)=>86400000 * data[index];\n/** @ignore */ const $d281eaf03ad48e28$var$epochMillisecondsLongToMs = (data, index)=>4294967296 * data[index + 1] + (data[index] >>> 0);\n/** @ignore */ const $d281eaf03ad48e28$var$epochMicrosecondsLongToMs = (data, index)=>4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n/** @ignore */ const $d281eaf03ad48e28$var$epochNanosecondsLongToMs = (data, index)=>4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n/** @ignore */ const $d281eaf03ad48e28$var$epochMillisecondsToDate = (epochMs)=>new Date(epochMs);\n/** @ignore */ const $d281eaf03ad48e28$var$epochDaysToDate = (data, index)=>$d281eaf03ad48e28$var$epochMillisecondsToDate($d281eaf03ad48e28$var$epochDaysToMs(data, index));\n/** @ignore */ const $d281eaf03ad48e28$var$epochMillisecondsLongToDate = (data, index)=>$d281eaf03ad48e28$var$epochMillisecondsToDate($d281eaf03ad48e28$var$epochMillisecondsLongToMs(data, index));\n/** @ignore */ const $d281eaf03ad48e28$var$getNull = (_data, _index)=>null;\n/** @ignore */ const $d281eaf03ad48e28$var$getVariableWidthBytes = (values, valueOffsets, index)=>{\n    if (index + 1 >= valueOffsets.length) return null;\n    const x = valueOffsets[index];\n    const y = valueOffsets[index + 1];\n    return values.subarray(x, y);\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getBool = ({ offset: offset, values: values }, index)=>{\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getDateDay = ({ values: values }, index)=>$d281eaf03ad48e28$var$epochDaysToDate(values, index);\n/** @ignore */ const $d281eaf03ad48e28$var$getDateMillisecond = ({ values: values }, index)=>$d281eaf03ad48e28$var$epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */ const $d281eaf03ad48e28$var$getNumeric = ({ stride: stride, values: values }, index)=>values[stride * index];\n/** @ignore */ const $d281eaf03ad48e28$var$getFloat16 = ({ stride: stride, values: values }, index)=>(0, $7a7e4fd849947557$export$782da64dd3f395f1)(values[stride * index]);\n/** @ignore */ const $d281eaf03ad48e28$var$getBigInts = ({ values: values }, index)=>values[index];\n/** @ignore */ const $d281eaf03ad48e28$var$getFixedSizeBinary = ({ stride: stride, values: values }, index)=>values.subarray(stride * index, stride * (index + 1));\n/** @ignore */ const $d281eaf03ad48e28$var$getBinary = ({ values: values, valueOffsets: valueOffsets }, index)=>$d281eaf03ad48e28$var$getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */ const $d281eaf03ad48e28$var$getUtf8 = ({ values: values, valueOffsets: valueOffsets }, index)=>{\n    const bytes = $d281eaf03ad48e28$var$getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? (0, $919e3c7689196a2e$export$72118b85b055afd)(bytes) : null;\n};\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getInt = ({ values: values }, index)=>values[index];\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getFloat = ({ type: type, values: values }, index)=>type.precision !== (0, $f79edd7127f4719f$export$be201676156f3e60).HALF ? values[index] : (0, $7a7e4fd849947557$export$782da64dd3f395f1)(values[index]);\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getDate = (data, index)=>data.type.unit === (0, $f79edd7127f4719f$export$b3f55ef7f087e744).DAY ? $d281eaf03ad48e28$var$getDateDay(data, index) : $d281eaf03ad48e28$var$getDateMillisecond(data, index);\n/** @ignore */ const $d281eaf03ad48e28$var$getTimestampSecond = ({ values: values }, index)=>1000 * $d281eaf03ad48e28$var$epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */ const $d281eaf03ad48e28$var$getTimestampMillisecond = ({ values: values }, index)=>$d281eaf03ad48e28$var$epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */ const $d281eaf03ad48e28$var$getTimestampMicrosecond = ({ values: values }, index)=>$d281eaf03ad48e28$var$epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */ const $d281eaf03ad48e28$var$getTimestampNanosecond = ({ values: values }, index)=>$d281eaf03ad48e28$var$epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getTimestamp = (data, index)=>{\n    switch(data.type.unit){\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n            return $d281eaf03ad48e28$var$getTimestampSecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n            return $d281eaf03ad48e28$var$getTimestampMillisecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n            return $d281eaf03ad48e28$var$getTimestampMicrosecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n            return $d281eaf03ad48e28$var$getTimestampNanosecond(data, index);\n    }\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getTimeSecond = ({ values: values }, index)=>values[index];\n/** @ignore */ const $d281eaf03ad48e28$var$getTimeMillisecond = ({ values: values }, index)=>values[index];\n/** @ignore */ const $d281eaf03ad48e28$var$getTimeMicrosecond = ({ values: values }, index)=>values[index];\n/** @ignore */ const $d281eaf03ad48e28$var$getTimeNanosecond = ({ values: values }, index)=>values[index];\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getTime = (data, index)=>{\n    switch(data.type.unit){\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND:\n            return $d281eaf03ad48e28$var$getTimeSecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MILLISECOND:\n            return $d281eaf03ad48e28$var$getTimeMillisecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND:\n            return $d281eaf03ad48e28$var$getTimeMicrosecond(data, index);\n        case (0, $f79edd7127f4719f$export$d9e59215631231e3).NANOSECOND:\n            return $d281eaf03ad48e28$var$getTimeNanosecond(data, index);\n    }\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getDecimal = ({ values: values, stride: stride }, index)=>(0, $9aed8ed3a6d26f6b$export$ed16643e9b9e3dfe).decimal(values.subarray(stride * index, stride * (index + 1)));\n/** @ignore */ const $d281eaf03ad48e28$var$getList = (data, index)=>{\n    const { valueOffsets: valueOffsets, stride: stride, children: children } = data;\n    const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;\n    const child = children[0];\n    const slice = child.slice(begin, end - begin);\n    return new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n        slice\n    ]);\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getMap = (data, index)=>{\n    const { valueOffsets: valueOffsets, children: children } = data;\n    const { [index]: begin, [index + 1]: end } = valueOffsets;\n    const child = children[0];\n    return new (0, $aa6ddfab1bbb5566$export$a26b7a6524a708c0)(child.slice(begin, end - begin));\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getStruct = (data, index)=>{\n    return new (0, $0f04b156032e64c4$export$ce7b327a6152c29c)(data, index);\n};\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getUnion = (data, index)=>{\n    return data.type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense ? $d281eaf03ad48e28$var$getDenseUnion(data, index) : $d281eaf03ad48e28$var$getSparseUnion(data, index);\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getDenseUnion = (data, index)=>{\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return $d281eaf03ad48e28$export$9544d5bb712b01ea.visit(child, data.valueOffsets[index]);\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getSparseUnion = (data, index)=>{\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return $d281eaf03ad48e28$export$9544d5bb712b01ea.visit(child, index);\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getDictionary = (data, index)=>{\n    var _a;\n    return (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.get(data.values[index]);\n};\n/* istanbul ignore next */ /** @ignore */ const $d281eaf03ad48e28$var$getInterval = (data, index)=>data.type.unit === (0, $f79edd7127f4719f$export$dd27fec05eba03b).DAY_TIME ? $d281eaf03ad48e28$var$getIntervalDayTime(data, index) : $d281eaf03ad48e28$var$getIntervalYearMonth(data, index);\n/** @ignore */ const $d281eaf03ad48e28$var$getIntervalDayTime = ({ values: values }, index)=>values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */ const $d281eaf03ad48e28$var$getIntervalYearMonth = ({ values: values }, index)=>{\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = Math.trunc(interval / 12); /* years */ \n    int32s[1] = Math.trunc(interval % 12); /* months */ \n    return int32s;\n};\n/** @ignore */ const $d281eaf03ad48e28$var$getFixedSizeList = (data, index)=>{\n    const { stride: stride, children: children } = data;\n    const child = children[0];\n    const slice = child.slice(index * stride, stride);\n    return new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n        slice\n    ]);\n};\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitNull = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNull);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitBool = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getBool);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInt = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getInt);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInt8 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInt16 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInt32 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInt64 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getBigInts);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUint8 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUint16 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUint32 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUint64 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getBigInts);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFloat = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getFloat);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFloat16 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getFloat16);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFloat32 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFloat64 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getNumeric);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUtf8 = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getUtf8);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitBinary = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getBinary);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFixedSizeBinary = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getFixedSizeBinary);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDate = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDate);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDateDay = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDateDay);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDateMillisecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDateMillisecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimestamp = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimestamp);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimestampSecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimestampSecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimestampMillisecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimestampMillisecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimestampMicrosecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimestampMicrosecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimestampNanosecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimestampNanosecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTime = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTime);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimeSecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimeSecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimeMillisecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimeMillisecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimeMicrosecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimeMicrosecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitTimeNanosecond = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getTimeNanosecond);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDecimal = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDecimal);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitList = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getList);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitStruct = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getStruct);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitUnion = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getUnion);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDenseUnion = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDenseUnion);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitSparseUnion = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getSparseUnion);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitDictionary = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getDictionary);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitInterval = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getInterval);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitIntervalDayTime = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getIntervalDayTime);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitIntervalYearMonth = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getIntervalYearMonth);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitFixedSizeList = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getFixedSizeList);\n$d281eaf03ad48e28$export$add57bf42f59861d.prototype.visitMap = $d281eaf03ad48e28$var$wrapGet($d281eaf03ad48e28$var$getMap);\nconst $d281eaf03ad48e28$export$9544d5bb712b01ea = new $d281eaf03ad48e28$export$add57bf42f59861d();\n\n\n\nconst $aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1 = Symbol.for(\"keys\");\nconst $aa6ddfab1bbb5566$export$bacae5c859840b52 = Symbol.for(\"vals\");\nclass $aa6ddfab1bbb5566$export$a26b7a6524a708c0 {\n    constructor(slice){\n        this[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1] = new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            slice.children[0]\n        ]).memoize();\n        this[$aa6ddfab1bbb5566$export$bacae5c859840b52] = slice.children[1];\n        return new Proxy(this, new $aa6ddfab1bbb5566$var$MapRowProxyHandler());\n    }\n    [Symbol.iterator]() {\n        return new $aa6ddfab1bbb5566$var$MapRowIterator(this[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1], this[$aa6ddfab1bbb5566$export$bacae5c859840b52]);\n    }\n    get size() {\n        return this[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].length;\n    }\n    toArray() {\n        return Object.values(this.toJSON());\n    }\n    toJSON() {\n        const keys = this[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1];\n        const vals = this[$aa6ddfab1bbb5566$export$bacae5c859840b52];\n        const json = {};\n        for(let i = -1, n = keys.length; ++i < n;)json[keys.get(i)] = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(vals, i);\n        return json;\n    }\n    toString() {\n        return `{${[\n            ...this\n        ].map(([key, val])=>`${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(key)}: ${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(val)}`).join(\", \")}}`;\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return this.toString();\n    }\n}\nclass $aa6ddfab1bbb5566$var$MapRowIterator {\n    constructor(keys, vals){\n        this.keys = keys;\n        this.vals = vals;\n        this.keyIndex = 0;\n        this.numKeys = keys.length;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const i = this.keyIndex;\n        if (i === this.numKeys) return {\n            done: true,\n            value: null\n        };\n        this.keyIndex++;\n        return {\n            done: false,\n            value: [\n                this.keys.get(i),\n                (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(this.vals, i)\n            ]\n        };\n    }\n}\n/** @ignore */ class $aa6ddfab1bbb5566$var$MapRowProxyHandler {\n    isExtensible() {\n        return false;\n    }\n    deleteProperty() {\n        return false;\n    }\n    preventExtensions() {\n        return true;\n    }\n    ownKeys(row) {\n        return row[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].toArray().map(String);\n    }\n    has(row, key) {\n        return row[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].includes(key);\n    }\n    getOwnPropertyDescriptor(row, key) {\n        const idx = row[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].indexOf(key);\n        if (idx !== -1) return {\n            writable: true,\n            enumerable: true,\n            configurable: true\n        };\n        return;\n    }\n    get(row, key) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) return row[key];\n        const idx = row[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].indexOf(key);\n        if (idx !== -1) {\n            const val = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(Reflect.get(row, $aa6ddfab1bbb5566$export$bacae5c859840b52), idx);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row, key, val) {\n        const idx = row[$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].indexOf(key);\n        if (idx !== -1) {\n            (0, $02b131079e669552$export$9544d5bb712b01ea).visit(Reflect.get(row, $aa6ddfab1bbb5566$export$bacae5c859840b52), idx, val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        } else if (Reflect.has(row, key)) return Reflect.set(row, key, val);\n        return false;\n    }\n}\nObject.defineProperties($aa6ddfab1bbb5566$export$a26b7a6524a708c0.prototype, {\n    [Symbol.toStringTag]: {\n        enumerable: false,\n        configurable: false,\n        value: \"Row\"\n    },\n    [$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1]: {\n        writable: true,\n        enumerable: false,\n        configurable: false,\n        value: null\n    },\n    [$aa6ddfab1bbb5566$export$bacae5c859840b52]: {\n        writable: true,\n        enumerable: false,\n        configurable: false,\n        value: null\n    }\n});\n\n\n\n\nfunction $6a5b4b7795980060$export$cdbb71092bf28e30(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : length + index % length;\n    return then ? then(source, adjust) : adjust;\n}\n/** @ignore */ let $6a5b4b7795980060$var$tmp;\nfunction $6a5b4b7795980060$export$e9d4863bcce07ce9(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    const { length: len = 0 } = source;\n    let lhs = typeof begin !== \"number\" ? 0 : begin;\n    let rhs = typeof end !== \"number\" ? len : end;\n    // wrap around on negative start/end positions\n    lhs < 0 && (lhs = (lhs % len + len) % len);\n    rhs < 0 && (rhs = (rhs % len + len) % len);\n    // ensure lhs <= rhs\n    rhs < lhs && ($6a5b4b7795980060$var$tmp = lhs, lhs = rhs, rhs = $6a5b4b7795980060$var$tmp);\n    // ensure rhs <= length\n    rhs > len && (rhs = len);\n    return then ? then(source, lhs, rhs) : [\n        lhs,\n        rhs\n    ];\n}\nconst $6a5b4b7795980060$var$isNaNFast = (value)=>value !== value;\nfunction $6a5b4b7795980060$export$fe92c9f91b0b7e2e(search) {\n    const typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== \"object\" || search === null) {\n        // Compare NaN\n        if ($6a5b4b7795980060$var$isNaNFast(search)) return $6a5b4b7795980060$var$isNaNFast;\n        return (value)=>value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value)=>value instanceof Date ? value.valueOf() === valueOfSearch : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) return (value)=>value ? (0, $6a2dadc936df2dd3$export$2a7eada880229c41)(search, value) : false;\n    // Compare Maps and Rows\n    if (search instanceof Map) return $6a5b4b7795980060$var$createMapComparator(search);\n    // Compare Array-likes\n    if (Array.isArray(search)) return $6a5b4b7795980060$var$createArrayLikeComparator(search);\n    // Compare Vectors\n    if (search instanceof (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)) return $6a5b4b7795980060$var$createVectorComparator(search);\n    return $6a5b4b7795980060$var$createObjectComparator(search, true);\n// Compare non-empty Objects\n// return createObjectComparator(search, search instanceof Proxy);\n}\n/** @ignore */ function $6a5b4b7795980060$var$createArrayLikeComparator(lhs) {\n    const comparators = [];\n    for(let i = -1, n = lhs.length; ++i < n;)comparators[i] = $6a5b4b7795980060$export$fe92c9f91b0b7e2e(lhs[i]);\n    return $6a5b4b7795980060$var$createSubElementsComparator(comparators);\n}\n/** @ignore */ function $6a5b4b7795980060$var$createMapComparator(lhs) {\n    let i = -1;\n    const comparators = [];\n    for (const v of lhs.values())comparators[++i] = $6a5b4b7795980060$export$fe92c9f91b0b7e2e(v);\n    return $6a5b4b7795980060$var$createSubElementsComparator(comparators);\n}\n/** @ignore */ function $6a5b4b7795980060$var$createVectorComparator(lhs) {\n    const comparators = [];\n    for(let i = -1, n = lhs.length; ++i < n;)comparators[i] = $6a5b4b7795980060$export$fe92c9f91b0b7e2e(lhs.get(i));\n    return $6a5b4b7795980060$var$createSubElementsComparator(comparators);\n}\n/** @ignore */ function $6a5b4b7795980060$var$createObjectComparator(lhs, allowEmpty = false) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (!allowEmpty && keys.length === 0) return ()=>false;\n    const comparators = [];\n    for(let i = -1, n = keys.length; ++i < n;)comparators[i] = $6a5b4b7795980060$export$fe92c9f91b0b7e2e(lhs[keys[i]]);\n    return $6a5b4b7795980060$var$createSubElementsComparator(comparators, keys);\n}\nfunction $6a5b4b7795980060$var$createSubElementsComparator(comparators, keys) {\n    return (rhs)=>{\n        if (!rhs || typeof rhs !== \"object\") return false;\n        switch(rhs.constructor){\n            case Array:\n                return $6a5b4b7795980060$var$compareArray(comparators, rhs);\n            case Map:\n                return $6a5b4b7795980060$var$compareObject(comparators, rhs, rhs.keys());\n            case 0, $aa6ddfab1bbb5566$export$a26b7a6524a708c0:\n            case 0, $0f04b156032e64c4$export$ce7b327a6152c29c:\n            case Object:\n            case undefined:\n                return $6a5b4b7795980060$var$compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof (0, $32ea7584b42ab85d$export$9b781de7bf37bf48) ? $6a5b4b7795980060$var$compareVector(comparators, rhs) : false;\n    };\n}\nfunction $6a5b4b7795980060$var$compareArray(comparators, arr) {\n    const n = comparators.length;\n    if (arr.length !== n) return false;\n    for(let i = -1; ++i < n;){\n        if (!comparators[i](arr[i])) return false;\n    }\n    return true;\n}\nfunction $6a5b4b7795980060$var$compareVector(comparators, vec) {\n    const n = comparators.length;\n    if (vec.length !== n) return false;\n    for(let i = -1; ++i < n;){\n        if (!comparators[i](vec.get(i))) return false;\n    }\n    return true;\n}\nfunction $6a5b4b7795980060$var$compareObject(comparators, obj, keys) {\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n    let i = 0;\n    const n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n    for(; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()){\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) break;\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) return true;\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */ class $93291429152ee31f$export$ef48c5cb02f88b57 {\n    constructor(numChunks = 0, getChunkIterator){\n        this.numChunks = numChunks;\n        this.getChunkIterator = getChunkIterator;\n        this.chunkIndex = 0;\n        this.chunkIterator = this.getChunkIterator(0);\n    }\n    next() {\n        while(this.chunkIndex < this.numChunks){\n            const next = this.chunkIterator.next();\n            if (!next.done) return next;\n            if (++this.chunkIndex < this.numChunks) this.chunkIterator = this.getChunkIterator(this.chunkIndex);\n        }\n        return {\n            done: true,\n            value: null\n        };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\nfunction $93291429152ee31f$export$66186826dace05d7(chunks) {\n    return chunks.reduce((nullCount, chunk)=>nullCount + chunk.nullCount, 0);\n}\nfunction $93291429152ee31f$export$dc8ec309c5963567(chunks) {\n    return chunks.reduce((offsets, chunk, index)=>{\n        offsets[index + 1] = offsets[index] + chunk.length;\n        return offsets;\n    }, new Uint32Array(chunks.length + 1));\n}\nfunction $93291429152ee31f$export$aac8c68e61aca8b9(chunks, offsets, begin, end) {\n    const slices = [];\n    for(let i = -1, n = chunks.length; ++i < n;){\n        const chunk = chunks[i];\n        const offset = offsets[i];\n        const { length: length } = chunk;\n        // Stop if the child is to the right of the slice boundary\n        if (offset >= end) break;\n        // Exclude children to the left of of the slice boundary\n        if (begin >= offset + length) continue;\n        // Include entire child if between both left and right boundaries\n        if (offset >= begin && offset + length <= end) {\n            slices.push(chunk);\n            continue;\n        }\n        // Include the child slice that overlaps one of the slice boundaries\n        const from = Math.max(0, begin - offset);\n        const to = Math.min(end - offset, length);\n        slices.push(chunk.slice(from, to - from));\n    }\n    if (slices.length === 0) slices.push(chunks[0].slice(0, 0));\n    return slices;\n}\nfunction $93291429152ee31f$export$2e0ae67339d5f1ac(chunks, offsets, idx, fn) {\n    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n    do {\n        if (lhs >= rhs - 1) return idx < offsets[rhs] ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n        mid = lhs + Math.trunc((rhs - lhs) * .5);\n        idx < offsets[mid] ? rhs = mid : lhs = mid;\n    }while (lhs < rhs);\n}\nfunction $93291429152ee31f$export$bbb8f619af0ed78f(data, index) {\n    return data.getValid(index);\n}\nfunction $93291429152ee31f$export$a18deb2181038191(fn) {\n    function chunkedFn(chunks, i, j) {\n        return fn(chunks[i], j);\n    }\n    return function(index) {\n        const data = this.data;\n        return $93291429152ee31f$export$2e0ae67339d5f1ac(data, this._offsets, index, chunkedFn);\n    };\n}\nfunction $93291429152ee31f$export$534e46eacac9083a(fn) {\n    let _2;\n    function chunkedFn(chunks, i, j) {\n        return fn(chunks[i], j, _2);\n    }\n    return function(index, value) {\n        const data = this.data;\n        _2 = value;\n        const result = $93291429152ee31f$export$2e0ae67339d5f1ac(data, this._offsets, index, chunkedFn);\n        _2 = undefined;\n        return result;\n    };\n}\nfunction $93291429152ee31f$export$d7a757adef85ea6e(indexOf) {\n    let _1;\n    function chunkedIndexOf(data, chunkIndex, fromIndex) {\n        let begin = fromIndex, index = 0, total = 0;\n        for(let i = chunkIndex - 1, n = data.length; ++i < n;){\n            const chunk = data[i];\n            if (~(index = indexOf(chunk, _1, begin))) return total + index;\n            begin = 0;\n            total += chunk.length;\n        }\n        return -1;\n    }\n    return function(element, offset) {\n        _1 = element;\n        const data = this.data;\n        const result = typeof offset !== \"number\" ? chunkedIndexOf(data, 0, 0) : $93291429152ee31f$export$2e0ae67339d5f1ac(data, this._offsets, offset, chunkedIndexOf);\n        _1 = undefined;\n        return result;\n    };\n}\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */ function $d76f09d2d6f16785$export$2c6d6dc83860258d(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\nfunction $d76f09d2d6f16785$export$eb7cc99bb8a55d01(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\nfunction $d76f09d2d6f16785$export$dffcf06e1a19ce23(bytes, index, value) {\n    return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\nfunction $d76f09d2d6f16785$export$c21fe70cd847afb(offset, length, bitmap) {\n    const alignedSize = bitmap.byteLength + 7 & -8;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) : // Otherwise iterate each bit from the offset and return a new one\n        $d76f09d2d6f16785$export$9b04d6b190dfec92(new $d76f09d2d6f16785$export$a90f4fb3bdcebd60(bitmap, offset, length, null, $d76f09d2d6f16785$export$2c6d6dc83860258d)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\nfunction $d76f09d2d6f16785$export$9b04d6b190dfec92(values) {\n    const xs = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values){\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) xs[i++] = byte;\n    const b = new Uint8Array(xs.length + 7 & -8);\n    b.set(xs);\n    return b;\n}\nclass $d76f09d2d6f16785$export$a90f4fb3bdcebd60 {\n    constructor(bytes, begin, length, context, get){\n        this.bytes = bytes;\n        this.length = length;\n        this.context = context;\n        this.get = get;\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n    next() {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return {\n            done: true,\n            value: null\n        };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\nfunction $d76f09d2d6f16785$export$ae9e3f3156236df4(data, lhs, rhs) {\n    if (rhs - lhs <= 0) return 0;\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new $d76f09d2d6f16785$export$a90f4fb3bdcebd60(data, lhs, rhs - lhs, data, $d76f09d2d6f16785$export$eb7cc99bb8a55d01))sum += bit;\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return(// Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    $d76f09d2d6f16785$export$ae9e3f3156236df4(data, lhs, lhsInside) + // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    $d76f09d2d6f16785$export$ae9e3f3156236df4(data, rhsInside, rhs) + // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    $d76f09d2d6f16785$export$a03ffe68b0ecb4ce(data, lhsInside >> 3, rhsInside - lhsInside >> 3));\n}\nfunction $d76f09d2d6f16785$export$a03ffe68b0ecb4ce(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = Math.trunc(byteOffset);\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while(len - pos >= 4){\n        cnt += $d76f09d2d6f16785$export$b1b7369e2b9b892f(view.getUint32(pos));\n        pos += 4;\n    }\n    while(len - pos >= 2){\n        cnt += $d76f09d2d6f16785$export$b1b7369e2b9b892f(view.getUint16(pos));\n        pos += 2;\n    }\n    while(len - pos >= 1){\n        cnt += $d76f09d2d6f16785$export$b1b7369e2b9b892f(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\nfunction $d76f09d2d6f16785$export$b1b7369e2b9b892f(uint32) {\n    let i = Math.trunc(uint32);\n    i = i - (i >>> 1 & 0x55555555);\n    i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n    return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}\n\n\n\nclass $16163aaa31ee8eda$export$c4cccb5bc7ae164 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n}\n/** @ignore */ function $16163aaa31ee8eda$var$nullIndexOf(data, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && data.length > 0 ? 0 : -1;\n}\n/** @ignore */ function $16163aaa31ee8eda$var$indexOfNull(data, fromIndex) {\n    const { nullBitmap: nullBitmap } = data;\n    if (!nullBitmap || data.nullCount <= 0) return -1;\n    let i = 0;\n    for (const isValid of new (0, $d76f09d2d6f16785$export$a90f4fb3bdcebd60)(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, (0, $d76f09d2d6f16785$export$2c6d6dc83860258d))){\n        if (!isValid) return i;\n        ++i;\n    }\n    return -1;\n}\n/** @ignore */ function $16163aaa31ee8eda$var$indexOfValue(data, searchElement, fromIndex) {\n    if (searchElement === undefined) return -1;\n    if (searchElement === null) return $16163aaa31ee8eda$var$indexOfNull(data, fromIndex);\n    const get = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).getVisitFn(data);\n    const compare = (0, $6a5b4b7795980060$export$fe92c9f91b0b7e2e)(searchElement);\n    for(let i = (fromIndex || 0) - 1, n = data.length; ++i < n;){\n        if (compare(get(data, i))) return i;\n    }\n    return -1;\n}\n/** @ignore */ function $16163aaa31ee8eda$var$indexOfUnion(data, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const get = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).getVisitFn(data);\n    const compare = (0, $6a5b4b7795980060$export$fe92c9f91b0b7e2e)(searchElement);\n    for(let i = (fromIndex || 0) - 1, n = data.length; ++i < n;){\n        if (compare(get(data, i))) return i;\n    }\n    return -1;\n}\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitNull = $16163aaa31ee8eda$var$nullIndexOf;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitBool = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInt = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInt8 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInt16 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInt32 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInt64 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUint8 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUint16 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUint32 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUint64 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFloat = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFloat16 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFloat32 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFloat64 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUtf8 = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitBinary = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFixedSizeBinary = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDate = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDateDay = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDateMillisecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimestamp = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimestampSecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimestampMillisecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimestampMicrosecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimestampNanosecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTime = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimeSecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimeMillisecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimeMicrosecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitTimeNanosecond = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDecimal = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitList = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitStruct = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitUnion = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDenseUnion = $16163aaa31ee8eda$var$indexOfUnion;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitSparseUnion = $16163aaa31ee8eda$var$indexOfUnion;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitDictionary = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitInterval = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitIntervalDayTime = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitIntervalYearMonth = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitFixedSizeList = $16163aaa31ee8eda$var$indexOfValue;\n$16163aaa31ee8eda$export$c4cccb5bc7ae164.prototype.visitMap = $16163aaa31ee8eda$var$indexOfValue;\nconst $16163aaa31ee8eda$export$9544d5bb712b01ea = new $16163aaa31ee8eda$export$c4cccb5bc7ae164();\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\nclass $5475c8864f011599$export$91ded182d4917d0 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n}\n/** @ignore */ function $5475c8864f011599$var$vectorIterator(vector) {\n    const { type: type } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.nullCount === 0 && vector.stride === 1 && (type.typeId === (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp || type instanceof (0, $7101ea1b1020e1ec$export$fdd676b64b72b00) && type.bitWidth !== 64 || type instanceof (0, $7101ea1b1020e1ec$export$680ea196effce5f) && type.bitWidth !== 64 || type instanceof (0, $7101ea1b1020e1ec$export$bb89b76e902dbdb5) && type.precision !== (0, $f79edd7127f4719f$export$be201676156f3e60).HALF)) return new (0, $93291429152ee31f$export$ef48c5cb02f88b57)(vector.data.length, (chunkIndex)=>{\n        const data = vector.data[chunkIndex];\n        return data.values.subarray(0, data.length)[Symbol.iterator]();\n    });\n    // Otherwise, iterate manually\n    let offset = 0;\n    return new (0, $93291429152ee31f$export$ef48c5cb02f88b57)(vector.data.length, (chunkIndex)=>{\n        const data = vector.data[chunkIndex];\n        const length = data.length;\n        const inner = vector.slice(offset, offset + length);\n        offset += length;\n        return new $5475c8864f011599$var$VectorIterator(inner);\n    });\n}\n/** @ignore */ class $5475c8864f011599$var$VectorIterator {\n    constructor(vector){\n        this.vector = vector;\n        this.index = 0;\n    }\n    next() {\n        if (this.index < this.vector.length) return {\n            value: this.vector.get(this.index++)\n        };\n        return {\n            done: true,\n            value: null\n        };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitNull = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitBool = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInt = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInt8 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInt16 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInt32 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInt64 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUint8 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUint16 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUint32 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUint64 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFloat = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFloat16 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFloat32 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFloat64 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUtf8 = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitBinary = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFixedSizeBinary = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDate = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDateDay = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDateMillisecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimestamp = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimestampSecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimestampMillisecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimestampMicrosecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimestampNanosecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTime = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimeSecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimeMillisecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimeMicrosecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitTimeNanosecond = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDecimal = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitList = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitStruct = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitUnion = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDenseUnion = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitSparseUnion = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitDictionary = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitInterval = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitIntervalDayTime = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitIntervalYearMonth = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitFixedSizeList = $5475c8864f011599$var$vectorIterator;\n$5475c8864f011599$export$91ded182d4917d0.prototype.visitMap = $5475c8864f011599$var$vectorIterator;\nconst $5475c8864f011599$export$9544d5bb712b01ea = new $5475c8864f011599$export$91ded182d4917d0();\n\n\n/* istanbul ignore file */ \n\n/** @ignore */ const $5eca7df6080929be$var$sum = (x, y)=>x + y;\nclass $5eca7df6080929be$export$9d632d6351d0be51 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    visitNull(____, _) {\n        return 0;\n    }\n    visitInt(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitFloat(data, _) {\n        return data.type.ArrayType.BYTES_PER_ELEMENT;\n    }\n    visitBool(____, _) {\n        return 1 / 8;\n    }\n    visitDecimal(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitDate(data, _) {\n        return (data.type.unit + 1) * 4;\n    }\n    visitTime(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitTimestamp(data, _) {\n        return data.type.unit === (0, $f79edd7127f4719f$export$d9e59215631231e3).SECOND ? 4 : 8;\n    }\n    visitInterval(data, _) {\n        return (data.type.unit + 1) * 4;\n    }\n    visitStruct(data, i) {\n        return data.children.reduce((total, child)=>total + $5eca7df6080929be$export$9544d5bb712b01ea.visit(child, i), 0);\n    }\n    visitFixedSizeBinary(data, _) {\n        return data.type.byteWidth;\n    }\n    visitMap(data, i) {\n        // 4 + 4 for the indices\n        return 8 + data.children.reduce((total, child)=>total + $5eca7df6080929be$export$9544d5bb712b01ea.visit(child, i), 0);\n    }\n    visitDictionary(data, i) {\n        var _a;\n        return data.type.indices.bitWidth / 8 + (((_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.getByteLength(data.values[i])) || 0);\n    }\n}\n/** @ignore */ const $5eca7df6080929be$var$getUtf8ByteLength = ({ valueOffsets: valueOffsets }, index)=>{\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */ const $5eca7df6080929be$var$getBinaryByteLength = ({ valueOffsets: valueOffsets }, index)=>{\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */ const $5eca7df6080929be$var$getListByteLength = ({ valueOffsets: valueOffsets, stride: stride, children: children }, index)=>{\n    const child = children[0];\n    const { [index * stride]: start } = valueOffsets;\n    const { [index * stride + 1]: end } = valueOffsets;\n    const visit = $5eca7df6080929be$export$9544d5bb712b01ea.getVisitFn(child.type);\n    const slice = child.slice(start, end - start);\n    let size = 8; // 4 + 4 for the indices\n    for(let idx = -1, len = end - start; ++idx < len;)size += visit(slice, idx);\n    return size;\n};\n/** @ignore */ const $5eca7df6080929be$var$getFixedSizeListByteLength = ({ stride: stride, children: children }, index)=>{\n    const child = children[0];\n    const slice = child.slice(index * stride, stride);\n    const visit = $5eca7df6080929be$export$9544d5bb712b01ea.getVisitFn(child.type);\n    let size = 0;\n    for(let idx = -1, len = slice.length; ++idx < len;)size += visit(slice, idx);\n    return size;\n};\n/* istanbul ignore next */ /** @ignore */ const $5eca7df6080929be$var$getUnionByteLength = (data, index)=>{\n    return data.type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense ? $5eca7df6080929be$var$getDenseUnionByteLength(data, index) : $5eca7df6080929be$var$getSparseUnionByteLength(data, index);\n};\n/** @ignore */ const $5eca7df6080929be$var$getDenseUnionByteLength = ({ type: type, children: children, typeIds: typeIds, valueOffsets: valueOffsets }, index)=>{\n    const childIndex = type.typeIdToChildIndex[typeIds[index]];\n    // 4 for the typeId, 4 for the valueOffsets, then the child at the offset\n    return 8 + $5eca7df6080929be$export$9544d5bb712b01ea.visit(children[childIndex], valueOffsets[index]);\n};\n/** @ignore */ const $5eca7df6080929be$var$getSparseUnionByteLength = ({ children: children }, index)=>{\n    // 4 for the typeId, then once each for the children at this index\n    return 4 + $5eca7df6080929be$export$9544d5bb712b01ea.visitMany(children, children.map(()=>index)).reduce($5eca7df6080929be$var$sum, 0);\n};\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitUtf8 = $5eca7df6080929be$var$getUtf8ByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitBinary = $5eca7df6080929be$var$getBinaryByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitList = $5eca7df6080929be$var$getListByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitFixedSizeList = $5eca7df6080929be$var$getFixedSizeListByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitUnion = $5eca7df6080929be$var$getUnionByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitDenseUnion = $5eca7df6080929be$var$getDenseUnionByteLength;\n$5eca7df6080929be$export$9d632d6351d0be51.prototype.visitSparseUnion = $5eca7df6080929be$var$getSparseUnionByteLength;\nconst $5eca7df6080929be$export$9544d5bb712b01ea = new $5eca7df6080929be$export$9d632d6351d0be51();\n\n\nvar $32ea7584b42ab85d$var$_a;\nconst $32ea7584b42ab85d$var$visitorsByTypeId = {};\nconst $32ea7584b42ab85d$var$vectorPrototypesByTypeId = {};\nclass $32ea7584b42ab85d$export$9b781de7bf37bf48 {\n    constructor(input){\n        var _b, _c, _d;\n        const data = input[0] instanceof $32ea7584b42ab85d$export$9b781de7bf37bf48 ? input.flatMap((x)=>x.data) : input;\n        if (data.length === 0 || data.some((x)=>!(x instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b)))) throw new TypeError(\"Vector constructor expects an Array of Data instances.\");\n        const type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;\n        switch(data.length){\n            case 0:\n                this._offsets = [\n                    0\n                ];\n                break;\n            case 1:\n                {\n                    // special case for unchunked vectors\n                    const { get: get, set: set, indexOf: indexOf, byteLength: byteLength } = $32ea7584b42ab85d$var$visitorsByTypeId[type.typeId];\n                    const unchunkedData = data[0];\n                    this.isValid = (index)=>(0, $93291429152ee31f$export$bbb8f619af0ed78f)(unchunkedData, index);\n                    this.get = (index)=>get(unchunkedData, index);\n                    this.set = (index, value)=>set(unchunkedData, index, value);\n                    this.indexOf = (index)=>indexOf(unchunkedData, index);\n                    this.getByteLength = (index)=>byteLength(unchunkedData, index);\n                    this._offsets = [\n                        0,\n                        unchunkedData.length\n                    ];\n                    break;\n                }\n            default:\n                Object.setPrototypeOf(this, $32ea7584b42ab85d$var$vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = (0, $93291429152ee31f$export$dc8ec309c5963567)(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type);\n        this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n        this.length = this._offsets[this._offsets.length - 1];\n    }\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */ get byteLength() {\n        if (this._byteLength === -1) this._byteLength = this.data.reduce((byteLength, data)=>byteLength + data.byteLength, 0);\n        return this._byteLength;\n    }\n    /**\n     * The number of null elements in this Vector.\n     */ get nullCount() {\n        if (this._nullCount === -1) this._nullCount = (0, $93291429152ee31f$export$66186826dace05d7)(this.data);\n        return this._nullCount;\n    }\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */ get ArrayType() {\n        return this.type.ArrayType;\n    }\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */ get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n    /**\n     * The name of this Vector.\n     */ get VectorName() {\n        return `${(0, $f79edd7127f4719f$export$92738401e1603719)[this.type.typeId]}Vector`;\n    }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */ // @ts-ignore\n    isValid(index) {\n        return false;\n    }\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */ // @ts-ignore\n    get(index) {\n        return null;\n    }\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */ // @ts-ignore\n    set(index, value) {\n        return;\n    }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */ // @ts-ignore\n    indexOf(element, offset) {\n        return -1;\n    }\n    includes(element, offset) {\n        return this.indexOf(element, offset) > 0;\n    }\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */ // @ts-ignore\n    getByteLength(index) {\n        return 0;\n    }\n    /**\n     * Iterator for the Vector's elements.\n     */ [Symbol.iterator]() {\n        return (0, $5475c8864f011599$export$9544d5bb712b01ea).visit(this);\n    }\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */ concat(...others) {\n        return new $32ea7584b42ab85d$export$9b781de7bf37bf48(this.data.concat(others.flatMap((x)=>x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */ slice(begin, end) {\n        return new $32ea7584b42ab85d$export$9b781de7bf37bf48((0, $6a5b4b7795980060$export$e9d4863bcce07ce9)(this, begin, end, ({ data: data, _offsets: _offsets }, begin, end)=>(0, $93291429152ee31f$export$aac8c68e61aca8b9)(data, _offsets, begin, end)));\n    }\n    toJSON() {\n        return [\n            ...this\n        ];\n    }\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */ toArray() {\n        const { type: type, data: data, length: length, stride: stride, ArrayType: ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch(type.typeId){\n            case (0, $f79edd7127f4719f$export$92738401e1603719).Int:\n            case (0, $f79edd7127f4719f$export$92738401e1603719).Float:\n            case (0, $f79edd7127f4719f$export$92738401e1603719).Decimal:\n            case (0, $f79edd7127f4719f$export$92738401e1603719).Time:\n            case (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp:\n                switch(data.length){\n                    case 0:\n                        return new ArrayType();\n                    case 1:\n                        return data[0].values.subarray(0, length * stride);\n                    default:\n                        return data.reduce((memo, { values: values, length: chunk_length })=>{\n                            memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                            memo.offset += chunk_length * stride;\n                            return memo;\n                        }, {\n                            array: new ArrayType(length * stride),\n                            offset: 0\n                        }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [\n            ...this\n        ];\n    }\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */ toString() {\n        return `[${[\n            ...this\n        ].join(\",\")}]`;\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */ getChild(name) {\n        var _b;\n        return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex((f)=>f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */ getChildAt(index) {\n        if (index > -1 && index < this.numChildren) return new $32ea7584b42ab85d$export$9b781de7bf37bf48(this.data.map(({ children: children })=>children[index]));\n        return null;\n    }\n    get isMemoized() {\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(this.type)) return this.data[0].dictionary.isMemoized;\n        return false;\n    }\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */ memoize() {\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(this.type)) {\n            const dictionary = new $32ea7584b42ab85d$var$MemoizedVector(this.data[0].dictionary);\n            const newData = this.data.map((data)=>{\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new $32ea7584b42ab85d$export$9b781de7bf37bf48(newData);\n        }\n        return new $32ea7584b42ab85d$var$MemoizedVector(this);\n    }\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */ unmemoize() {\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary.unmemoize();\n            const newData = this.data.map((data)=>{\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new $32ea7584b42ab85d$export$9b781de7bf37bf48(newData);\n        }\n        return this;\n    }\n}\n$32ea7584b42ab85d$var$_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\n$32ea7584b42ab85d$export$9b781de7bf37bf48[$32ea7584b42ab85d$var$_a] = ((proto)=>{\n    proto.type = (0, $7101ea1b1020e1ec$export$45c69700ee30a78c).prototype;\n    proto.data = [];\n    proto.length = 0;\n    proto.stride = 1;\n    proto.numChildren = 0;\n    proto._nullCount = -1;\n    proto._byteLength = -1;\n    proto._offsets = new Uint32Array([\n        0\n    ]);\n    proto[Symbol.isConcatSpreadable] = true;\n    const typeIds = Object.keys((0, $f79edd7127f4719f$export$92738401e1603719)).map((T)=>(0, $f79edd7127f4719f$export$92738401e1603719)[T]).filter((T)=>typeof T === \"number\" && T !== (0, $f79edd7127f4719f$export$92738401e1603719).NONE);\n    for (const typeId of typeIds){\n        const get = (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId);\n        const set = (0, $02b131079e669552$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId);\n        const indexOf = (0, $16163aaa31ee8eda$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId);\n        const byteLength = (0, $5eca7df6080929be$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId);\n        $32ea7584b42ab85d$var$visitorsByTypeId[typeId] = {\n            get: get,\n            set: set,\n            indexOf: indexOf,\n            byteLength: byteLength\n        };\n        $32ea7584b42ab85d$var$vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n            [\"isValid\"]: {\n                value: (0, $93291429152ee31f$export$a18deb2181038191)((0, $93291429152ee31f$export$bbb8f619af0ed78f))\n            },\n            [\"get\"]: {\n                value: (0, $93291429152ee31f$export$a18deb2181038191)((0, $d281eaf03ad48e28$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId))\n            },\n            [\"set\"]: {\n                value: (0, $93291429152ee31f$export$534e46eacac9083a)((0, $02b131079e669552$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId))\n            },\n            [\"indexOf\"]: {\n                value: (0, $93291429152ee31f$export$d7a757adef85ea6e)((0, $16163aaa31ee8eda$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId))\n            },\n            [\"getByteLength\"]: {\n                value: (0, $93291429152ee31f$export$a18deb2181038191)((0, $5eca7df6080929be$export$9544d5bb712b01ea).getVisitFnByTypeId(typeId))\n            }\n        });\n    }\n    return \"Vector\";\n})($32ea7584b42ab85d$export$9b781de7bf37bf48.prototype);\nclass $32ea7584b42ab85d$var$MemoizedVector extends $32ea7584b42ab85d$export$9b781de7bf37bf48 {\n    constructor(vector){\n        super(vector.data);\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n        const cache = new Array(this.length);\n        Object.defineProperty(this, \"get\", {\n            value (index) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) return cachedValue;\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n        Object.defineProperty(this, \"set\", {\n            value (index, value) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n        Object.defineProperty(this, \"slice\", {\n            value: (begin, end)=>new $32ea7584b42ab85d$var$MemoizedVector(slice.call(this, begin, end))\n        });\n        Object.defineProperty(this, \"isMemoized\", {\n            value: true\n        });\n        Object.defineProperty(this, \"unmemoize\", {\n            value: ()=>new $32ea7584b42ab85d$export$9b781de7bf37bf48(this.data)\n        });\n        Object.defineProperty(this, \"memoize\", {\n            value: ()=>this\n        });\n    }\n}\nfunction $32ea7584b42ab85d$export$ee1be48762406d20(init) {\n    if (init) {\n        if (init instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b)) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n            init\n        ]);\n        if (init instanceof $32ea7584b42ab85d$export$9b781de7bf37bf48) return new $32ea7584b42ab85d$export$9b781de7bf37bf48(init.data);\n        if (init.type instanceof (0, $7101ea1b1020e1ec$export$45c69700ee30a78c)) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n            (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(init)\n        ]);\n        if (Array.isArray(init)) return new $32ea7584b42ab85d$export$9b781de7bf37bf48(init.flatMap((v)=>$32ea7584b42ab85d$var$unwrapInputs(v)));\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) init = new Uint8Array(init.buffer);\n            const props = {\n                offset: 0,\n                length: init.length,\n                nullCount: 0,\n                data: init\n            };\n            if (init instanceof Int8Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$2174b49024d7a91f\n                }))\n            ]);\n            if (init instanceof Int16Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$840a40d2c6db4b78\n                }))\n            ]);\n            if (init instanceof Int32Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$493726e231866ac3\n                }))\n            ]);\n            if (init instanceof (0, $f61ec9f35ec4c8b9$export$8fe42cc5909e16d2)) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$8a5e19712a0a5deb\n                }))\n            ]);\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$235b973e27367fb2\n                }))\n            ]);\n            if (init instanceof Uint16Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$e07c60bdce7b4354\n                }))\n            ]);\n            if (init instanceof Uint32Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$357453df9520abca\n                }))\n            ]);\n            if (init instanceof (0, $f61ec9f35ec4c8b9$export$6a03e78e99ced10d)) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$46950b17866d859a\n                }))\n            ]);\n            if (init instanceof Float32Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$d2ee3fd19968539e\n                }))\n            ]);\n            if (init instanceof Float64Array) return new $32ea7584b42ab85d$export$9b781de7bf37bf48([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)(Object.assign(Object.assign({}, props), {\n                    type: new $7101ea1b1020e1ec$export$42429e12507a49a2\n                }))\n            ]);\n            throw new Error(\"Unrecognized input\");\n        }\n    }\n    throw new Error(\"Unrecognized input\");\n}\nfunction $32ea7584b42ab85d$var$unwrapInputs(x) {\n    return x instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b) ? [\n        x\n    ] : x instanceof $32ea7584b42ab85d$export$9b781de7bf37bf48 ? x.data : $32ea7584b42ab85d$export$ee1be48762406d20(x).data;\n}\n\n\n\n\n\n\n\nconst $e570fe8df119273b$export$372dca57359ab737 = -1;\nclass $e570fe8df119273b$export$2d0294657ab35f1b {\n    constructor(type, offset, length, nullCount, buffers, children = [], dictionary){\n        this.type = type;\n        this.children = children;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        let buffer;\n        if (buffers instanceof $e570fe8df119273b$export$2d0294657ab35f1b) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type);\n            if (buffers) {\n                (buffer = buffers[0]) && (this.valueOffsets = buffer);\n                (buffer = buffers[1]) && (this.values = buffer);\n                (buffer = buffers[2]) && (this.nullBitmap = buffer);\n                (buffer = buffers[3]) && (this.typeIds = buffer);\n            }\n        }\n        this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;\n    }\n    get typeId() {\n        return this.type.typeId;\n    }\n    get ArrayType() {\n        return this.type.ArrayType;\n    }\n    get buffers() {\n        return [\n            this.valueOffsets,\n            this.values,\n            this.nullBitmap,\n            this.typeIds\n        ];\n    }\n    get byteLength() {\n        let byteLength = 0;\n        const { valueOffsets: valueOffsets, values: values, nullBitmap: nullBitmap, typeIds: typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.children.reduce((byteLength, child)=>byteLength + child.byteLength, byteLength);\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount <= $e570fe8df119273b$export$372dca57359ab737 && (nullBitmap = this.nullBitmap)) this._nullCount = nullCount = this.length - (0, $d76f09d2d6f16785$export$ae9e3f3156236df4)(nullBitmap, this.offset, this.offset + this.length);\n        return nullCount;\n    }\n    getValid(index) {\n        if (this.nullable && this.nullCount > 0) {\n            const pos = this.offset + index;\n            const val = this.nullBitmap[pos >> 3];\n            return (val & 1 << pos % 8) !== 0;\n        }\n        return true;\n    }\n    setValid(index, value) {\n        // Don't interact w/ nullBitmap if not nullable\n        if (!this.nullable) return value;\n        // If no null bitmap, initialize one on the fly\n        if (!this.nullBitmap || this.nullBitmap.byteLength <= index >> 3) {\n            const { nullBitmap: nullBitmap } = this._changeLengthAndBackfillNullBitmap(this.length);\n            Object.assign(this, {\n                nullBitmap: nullBitmap,\n                _nullCount: 0\n            });\n        }\n        const { nullBitmap: nullBitmap, offset: offset } = this;\n        const pos = offset + index >> 3;\n        const bit = (offset + index) % 8;\n        const val = nullBitmap[pos] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.\n        value ? val === 0 && (nullBitmap[pos] |= 1 << bit, this._nullCount = this.nullCount + 1) : val === 1 && (nullBitmap[pos] &= ~(1 << bit), this._nullCount = this.nullCount - 1);\n        return value;\n    }\n    clone(type = this.type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, children = this.children) {\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, buffers, children, this.dictionary);\n    }\n    slice(offset, length) {\n        const { stride: stride, typeId: typeId, children: children } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */  ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, // Don't slice children if we have value offsets (the variable-width types)\n        children.length === 0 || this.valueOffsets ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n    }\n    _changeLengthAndBackfillNullBitmap(newLength) {\n        if (this.typeId === (0, $f79edd7127f4719f$export$92738401e1603719).Null) return this.clone(this.type, 0, newLength, 0);\n        const { length: length, nullCount: nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array((newLength + 63 & -64) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << length - (length & -8)) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) bitmap.set((0, $d76f09d2d6f16785$export$c21fe70cd847afb)(this.offset, length, this.nullBitmap), 0);\n        const buffers = this.buffers;\n        buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n    _sliceBuffers(offset, length, stride, typeId) {\n        let arr;\n        const { buffers: buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).TYPE]) && (buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).OFFSET]) && (buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).OFFSET] = arr.subarray(offset, offset + length + 1)) || // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).DATA]) && (buffers[(0, $f79edd7127f4719f$export$a9b603917c4d9863).DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n    _sliceChildren(children, offset, length) {\n        return children.map((child)=>child.slice(offset, length));\n    }\n}\n$e570fe8df119273b$export$2d0294657ab35f1b.prototype.children = Object.freeze([]);\nclass $e570fe8df119273b$var$MakeDataVisitor extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    visit(props) {\n        return this.getVisitFn(props[\"type\"]).call(this, props);\n    }\n    visitNull(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"length\"]: length = 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, 0);\n    }\n    visitBool(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length >> 3, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitInt(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitFloat(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitUtf8(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const data = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"data\"]);\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const valueOffsets = (0, $6a2dadc936df2dd3$export$46036e1dd6d3e964)(props[\"valueOffsets\"]);\n        const { [\"length\"]: length = valueOffsets.length - 1, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            valueOffsets,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitBinary(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const data = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"data\"]);\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const valueOffsets = (0, $6a2dadc936df2dd3$export$46036e1dd6d3e964)(props[\"valueOffsets\"]);\n        const { [\"length\"]: length = valueOffsets.length - 1, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            valueOffsets,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitFixedSizeBinary(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitDate(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitTimestamp(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitTime(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitDecimal(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitList(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"child\"]: child } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const valueOffsets = (0, $6a2dadc936df2dd3$export$46036e1dd6d3e964)(props[\"valueOffsets\"]);\n        const { [\"length\"]: length = valueOffsets.length - 1, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            valueOffsets,\n            undefined,\n            nullBitmap\n        ], [\n            child\n        ]);\n    }\n    visitStruct(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"children\"]: children = [] } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const { length: length = children.reduce((len, { length: length })=>Math.max(len, length), 0), nullCount: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            undefined,\n            nullBitmap\n        ], children);\n    }\n    visitUnion(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"children\"]: children = [] } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const typeIds = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"typeIds\"]);\n        const { [\"length\"]: length = typeIds.length, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isSparseUnion(type)) return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            undefined,\n            nullBitmap,\n            typeIds\n        ], children);\n        const valueOffsets = (0, $6a2dadc936df2dd3$export$46036e1dd6d3e964)(props[\"valueOffsets\"]);\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            valueOffsets,\n            undefined,\n            nullBitmap,\n            typeIds\n        ], children);\n    }\n    visitDictionary(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.indices.ArrayType, props[\"data\"]);\n        const { [\"dictionary\"]: dictionary = new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            new $e570fe8df119273b$var$MakeDataVisitor().visit({\n                type: type.dictionary\n            })\n        ]) } = props;\n        const { [\"length\"]: length = data.length, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ], [], dictionary);\n    }\n    visitInterval(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0 } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const data = (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, props[\"data\"]);\n        const { [\"length\"]: length = data.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            data,\n            nullBitmap\n        ]);\n    }\n    visitFixedSizeList(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"child\"]: child = new $e570fe8df119273b$var$MakeDataVisitor().visit({\n            type: type.valueType\n        }) } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const { [\"length\"]: length = child.length / (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type), [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            undefined,\n            undefined,\n            nullBitmap\n        ], [\n            child\n        ]);\n    }\n    visitMap(props) {\n        const { [\"type\"]: type, [\"offset\"]: offset = 0, [\"child\"]: child = new $e570fe8df119273b$var$MakeDataVisitor().visit({\n            type: type.childType\n        }) } = props;\n        const nullBitmap = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(props[\"nullBitmap\"]);\n        const valueOffsets = (0, $6a2dadc936df2dd3$export$46036e1dd6d3e964)(props[\"valueOffsets\"]);\n        const { [\"length\"]: length = valueOffsets.length - 1, [\"nullCount\"]: nullCount = props[\"nullBitmap\"] ? -1 : 0 } = props;\n        return new $e570fe8df119273b$export$2d0294657ab35f1b(type, offset, length, nullCount, [\n            valueOffsets,\n            undefined,\n            nullBitmap\n        ], [\n            child\n        ]);\n    }\n}\nfunction $e570fe8df119273b$export$7dfaddfcce89fb4f(props) {\n    return new $e570fe8df119273b$var$MakeDataVisitor().visit(props);\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nclass $f3b63445f9bfe464$export$19342e026b58ebb7 {\n    constructor(fields = [], metadata, dictionaries){\n        this.fields = fields || [];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) dictionaries = $f3b63445f9bfe464$var$generateDictionaryMap(fields);\n        this.dictionaries = dictionaries;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Schema\";\n    }\n    get names() {\n        return this.fields.map((f)=>f.name);\n    }\n    toString() {\n        return `Schema<{ ${this.fields.map((f, i)=>`${i}: ${f}`).join(\", \")} }>`;\n    }\n    /**\n     * Construct a new Schema containing only specified fields.\n     *\n     * @param fieldNames Names of fields to keep.\n     * @returns A new Schema of fields matching the specified names.\n     */ select(fieldNames) {\n        const names = new Set(fieldNames);\n        const fields = this.fields.filter((f)=>names.has(f.name));\n        return new $f3b63445f9bfe464$export$19342e026b58ebb7(fields, this.metadata);\n    }\n    /**\n     * Construct a new Schema containing only fields at the specified indices.\n     *\n     * @param fieldIndices Indices of fields to keep.\n     * @returns A new Schema of fields at the specified indices.\n     */ selectAt(fieldIndices) {\n        const fields = fieldIndices.map((i)=>this.fields[i]).filter(Boolean);\n        return new $f3b63445f9bfe464$export$19342e026b58ebb7(fields, this.metadata);\n    }\n    assign(...args) {\n        const other = args[0] instanceof $f3b63445f9bfe464$export$19342e026b58ebb7 ? args[0] : Array.isArray(args[0]) ? new $f3b63445f9bfe464$export$19342e026b58ebb7(args[0]) : new $f3b63445f9bfe464$export$19342e026b58ebb7(args);\n        const curFields = [\n            ...this.fields\n        ];\n        const metadata = $f3b63445f9bfe464$var$mergeMaps($f3b63445f9bfe464$var$mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2)=>{\n            const i = curFields.findIndex((f)=>f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: $f3b63445f9bfe464$var$mergeMaps($f3b63445f9bfe464$var$mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        });\n        const newDictionaries = $f3b63445f9bfe464$var$generateDictionaryMap(newFields, new Map());\n        return new $f3b63445f9bfe464$export$19342e026b58ebb7([\n            ...curFields,\n            ...newFields\n        ], metadata, new Map([\n            ...this.dictionaries,\n            ...newDictionaries\n        ]));\n    }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n$f3b63445f9bfe464$export$19342e026b58ebb7.prototype.fields = null;\n$f3b63445f9bfe464$export$19342e026b58ebb7.prototype.metadata = null;\n$f3b63445f9bfe464$export$19342e026b58ebb7.prototype.dictionaries = null;\nclass $f3b63445f9bfe464$export$a455218a85c89869 {\n    constructor(name, type, nullable = false, metadata){\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n    /** @nocollapse */ static new(...args) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === \"object\") {\n            ({ name: name } = args[0]);\n            type === undefined && (type = args[0].type);\n            nullable === undefined && (nullable = args[0].nullable);\n            metadata === undefined && (metadata = args[0].metadata);\n        }\n        return new $f3b63445f9bfe464$export$a455218a85c89869(`${name}`, type, nullable, metadata);\n    }\n    get typeId() {\n        return this.type.typeId;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Field\";\n    }\n    toString() {\n        return `${this.name}: ${this.type}`;\n    }\n    clone(...args) {\n        let [name, type, nullable, metadata] = args;\n        !args[0] || typeof args[0] !== \"object\" ? [name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args : { name: name = this.name, type: type = this.type, nullable: nullable = this.nullable, metadata: metadata = this.metadata } = args[0];\n        return $f3b63445f9bfe464$export$a455218a85c89869.new(name, type, nullable, metadata);\n    }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n$f3b63445f9bfe464$export$a455218a85c89869.prototype.type = null;\n$f3b63445f9bfe464$export$a455218a85c89869.prototype.name = null;\n$f3b63445f9bfe464$export$a455218a85c89869.prototype.nullable = null;\n$f3b63445f9bfe464$export$a455218a85c89869.prototype.metadata = null;\n/** @ignore */ function $f3b63445f9bfe464$var$mergeMaps(m1, m2) {\n    return new Map([\n        ...m1 || new Map(),\n        ...m2 || new Map()\n    ]);\n}\n/** @ignore */ function $f3b63445f9bfe464$var$generateDictionaryMap(fields, dictionaries = new Map()) {\n    for(let i = -1, n = fields.length; ++i < n;){\n        const field = fields[i];\n        const type = field.type;\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(type)) {\n            if (!dictionaries.has(type.id)) dictionaries.set(type.id, type.dictionary);\n            else if (dictionaries.get(type.id) !== type.dictionary) throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n        }\n        if (type.children && type.children.length > 0) $f3b63445f9bfe464$var$generateDictionaryMap(type.children, dictionaries);\n    }\n    return dictionaries;\n}\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const $7df102b60e872658$var$roundLengthUpToNearest64Bytes = (len, BPE)=>(Math.ceil(len) * BPE + 63 & -64 || 64) / BPE;\n/** @ignore */ const $7df102b60e872658$var$sliceOrExtendArray = (arr, len = 0)=>arr.length >= len ? arr.subarray(0, len) : (0, $6a2dadc936df2dd3$export$14ee4f6a21e84606)(new arr.constructor(len), arr, 0);\nclass $7df102b60e872658$export$93654d4f2d6cd524 {\n    constructor(buffer, stride = 1){\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor;\n        this._resize(this.length = Math.ceil(buffer.length / stride));\n    }\n    get byteLength() {\n        return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;\n    }\n    get reservedLength() {\n        return this.buffer.length / this.stride;\n    }\n    get reservedByteLength() {\n        return this.buffer.byteLength;\n    }\n    // @ts-ignore\n    set(index, value) {\n        return this;\n    }\n    append(value) {\n        return this.set(this.length, value);\n    }\n    reserve(extra) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) this._resize(reserved === 0 ? $7df102b60e872658$var$roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : $7df102b60e872658$var$roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n        }\n        return this;\n    }\n    flush(length = this.length) {\n        length = $7df102b60e872658$var$roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = $7df102b60e872658$var$sliceOrExtendArray(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    _resize(newLength) {\n        return this.buffer = (0, $6a2dadc936df2dd3$export$14ee4f6a21e84606)(new this.ArrayType(newLength), this.buffer);\n    }\n}\n$7df102b60e872658$export$93654d4f2d6cd524.prototype.offset = 0;\nclass $7df102b60e872658$export$3f83dfa59b669833 extends $7df102b60e872658$export$93654d4f2d6cd524 {\n    last() {\n        return this.get(this.length - 1);\n    }\n    get(index) {\n        return this.buffer[index];\n    }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\nclass $7df102b60e872658$export$91586c27411a991e extends $7df102b60e872658$export$3f83dfa59b669833 {\n    constructor(data = new Uint8Array(0)){\n        super(data, 1 / 8);\n        this.numValid = 0;\n    }\n    get numInvalid() {\n        return this.length - this.numValid;\n    }\n    get(idx) {\n        return this.buffer[idx >> 3] >> idx % 8 & 1;\n    }\n    set(idx, val) {\n        const { buffer: buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n        return this;\n    }\n    clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\nclass $7df102b60e872658$export$63f3a916d2ef3d35 extends $7df102b60e872658$export$3f83dfa59b669833 {\n    constructor(data = new Int32Array(1)){\n        super(data, 1);\n    }\n    append(value) {\n        return this.set(this.length - 1, value);\n    }\n    set(index, value) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) buffer.fill(buffer[offset], offset, index);\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    flush(length = this.length - 1) {\n        if (length > this.length) this.set(length - 1, 0);\n        return super.flush(length + 1);\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nfunction $f7bfa38272d37b7a$export$647d29165585d150(nullValues) {\n    if (!nullValues || nullValues.length <= 0) // @ts-ignore\n    return function isValid(value) {\n        return true;\n    };\n    let fnBody = \"\";\n    const noNaNs = nullValues.filter((x)=>x === x);\n    if (noNaNs.length > 0) fnBody = `\n    switch (x) {${noNaNs.map((x)=>`\n        case ${$f7bfa38272d37b7a$var$valueToCase(x)}:`).join(\"\")}\n            return false;\n    }`;\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    return new Function(`x`, `${fnBody}\\nreturn true;`);\n}\n/** @ignore */ function $f7bfa38272d37b7a$var$valueToCase(x) {\n    if (typeof x !== \"bigint\") return (0, $bf432875b5ef4a3b$export$7fcada0453713929)(x);\n    else if (0, $f61ec9f35ec4c8b9$export$bc3644201724b96e) return `${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(x)}n`;\n    return `\"${(0, $bf432875b5ef4a3b$export$7fcada0453713929)(x)}\"`;\n}\n\n\n\nclass $92fc1b2766556cfd$export$f75e4297694ec637 {\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */ constructor({ \"type\": type, \"nullValues\": nulls }){\n        /**\n         * The number of values written to the `Builder` that haven't been flushed yet.\n         * @readonly\n         */ this.length = 0;\n        /**\n         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n         * @readonly\n         */ this.finished = false;\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = (0, $7101ea1b1020e1ec$export$34337cb9c8e6db90)(type);\n        this._nulls = new (0, $7df102b60e872658$export$91586c27411a991e)();\n        if (nulls && nulls.length > 0) this._isValid = (0, $f7bfa38272d37b7a$export$647d29165585d150)(nulls);\n    }\n    /** @nocollapse */ // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */ // @ts-ignore\n    static throughDOM(options) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */ toVector() {\n        return new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            this.flush()\n        ]);\n    }\n    get ArrayType() {\n        return this.type.ArrayType;\n    }\n    get nullCount() {\n        return this._nulls.numInvalid;\n    }\n    get numChildren() {\n        return this.children.length;\n    }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */ get byteLength() {\n        let size = 0;\n        const { _offsets: _offsets, _values: _values, _nulls: _nulls, _typeIds: _typeIds, children: children } = this;\n        _offsets && (size += _offsets.byteLength);\n        _values && (size += _values.byteLength);\n        _nulls && (size += _nulls.byteLength);\n        _typeIds && (size += _typeIds.byteLength);\n        return children.reduce((size, child)=>size + child.byteLength, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */ get reservedLength() {\n        return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */ get reservedByteLength() {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child)=>size + child.reservedByteLength, size);\n    }\n    get valueOffsets() {\n        return this._offsets ? this._offsets.buffer : null;\n    }\n    get values() {\n        return this._values ? this._values.buffer : null;\n    }\n    get nullBitmap() {\n        return this._nulls ? this._nulls.buffer : null;\n    }\n    get typeIds() {\n        return this._typeIds ? this._typeIds.buffer : null;\n    }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */ append(value) {\n        return this.set(this.length, value);\n    }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */ isValid(value) {\n        return this._isValid(value);\n    }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */ set(index, value) {\n        if (this.setValid(index, this.isValid(value))) this.setValue(index, value);\n        return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */ setValue(index, value) {\n        this._setValue(this, index, value);\n    }\n    setValid(index, valid) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n    // @ts-ignore\n    addChild(child, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */ getChildAt(index) {\n        return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */ flush() {\n        let data;\n        let typeIds;\n        let nullBitmap;\n        let valueOffsets;\n        const { type: type, length: length, nullCount: nullCount, _typeIds: _typeIds, _offsets: _offsets, _values: _values, _nulls: _nulls } = this;\n        if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length)) // DenseUnions\n        valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length);\n        else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length)) // Binary, Utf8\n        data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());\n        else data = _values === null || _values === void 0 ? void 0 : _values.flush(length);\n        if (nullCount > 0) nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length);\n        const children = this.children.map((child)=>child.flush());\n        this.clear();\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            children: children,\n            \"child\": children[0],\n            data: data,\n            typeIds: typeIds,\n            nullBitmap: nullBitmap,\n            valueOffsets: valueOffsets\n        });\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */ finish() {\n        this.finished = true;\n        for (const child of this.children)child.finish();\n        return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */ clear() {\n        var _a, _b, _c, _d;\n        this.length = 0;\n        (_a = this._nulls) === null || _a === void 0 || _a.clear();\n        (_b = this._values) === null || _b === void 0 || _b.clear();\n        (_c = this._offsets) === null || _c === void 0 || _c.clear();\n        (_d = this._typeIds) === null || _d === void 0 || _d.clear();\n        for (const child of this.children)child.clear();\n        return this;\n    }\n}\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype.length = 1;\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype.stride = 1;\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype.children = null;\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype.finished = false;\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype.nullValues = null;\n$92fc1b2766556cfd$export$f75e4297694ec637.prototype._isValid = ()=>true;\nclass $92fc1b2766556cfd$export$ebef77f153499f66 extends $92fc1b2766556cfd$export$f75e4297694ec637 {\n    constructor(opts){\n        super(opts);\n        this._values = new (0, $7df102b60e872658$export$3f83dfa59b669833)(new this.ArrayType(0), this.stride);\n    }\n    setValue(index, value) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\nclass $92fc1b2766556cfd$export$167e7ac1781effdf extends $92fc1b2766556cfd$export$f75e4297694ec637 {\n    constructor(opts){\n        super(opts);\n        this._pendingLength = 0;\n        this._offsets = new (0, $7df102b60e872658$export$63f3a916d2ef3d35)();\n    }\n    setValue(index, value) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value instanceof (0, $aa6ddfab1bbb5566$export$a26b7a6524a708c0) ? value[0, $aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1].length : value.length;\n        pending.set(index, value);\n    }\n    setValid(index, isValid) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    flush() {\n        this._flush();\n        return super.flush();\n    }\n    finish() {\n        this._flush();\n        return super.finish();\n    }\n    _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) this._flushPending(pending, pendingLength);\n        return this;\n    }\n}\n\n\nclass $ee2a5f58df34af3c$export$1cb5c9ae30fbd96c extends (0, $92fc1b2766556cfd$export$167e7ac1781effdf) {\n    constructor(opts){\n        super(opts);\n        this._values = new (0, $7df102b60e872658$export$93654d4f2d6cd524)(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + this.length * 4;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(value));\n    }\n    _flushPending(pending, pendingLength) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let offset = 0;\n        for (const [index, value] of pending)if (value === undefined) offsets.set(index, 0);\n        else {\n            const length = value.length;\n            data.set(value, offset);\n            offsets.set(index, length);\n            offset += length;\n        }\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $8ba7fc3982ab191d$export$d9b0a671433716ae extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    constructor(options){\n        super(options);\n        this._values = new (0, $7df102b60e872658$export$91586c27411a991e)();\n    }\n    setValue(index, value) {\n        this._values.set(index, +value);\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $29c16a07182c22ae$export$9fe142f0e87de5bc extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$29c16a07182c22ae$export$9fe142f0e87de5bc.prototype._setValue = (0, $02b131079e669552$export$566174fa40823587);\nclass $29c16a07182c22ae$export$4f27f0d9632c6f5d extends $29c16a07182c22ae$export$9fe142f0e87de5bc {\n}\n$29c16a07182c22ae$export$4f27f0d9632c6f5d.prototype._setValue = (0, $02b131079e669552$export$1c2cc1b96b58b1d1);\nclass $29c16a07182c22ae$export$41b87ce3cdd47618 extends $29c16a07182c22ae$export$9fe142f0e87de5bc {\n}\n$29c16a07182c22ae$export$41b87ce3cdd47618.prototype._setValue = (0, $02b131079e669552$export$bb770250cb177ad2);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $e6c080d5695016d1$export$adf219ab10fb6c41 extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$e6c080d5695016d1$export$adf219ab10fb6c41.prototype._setValue = (0, $02b131079e669552$export$68dd22903d458048);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nclass $377b5ce0fd3294ab$export$628e18bde876b2cd extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    constructor({ \"type\": type, \"nullValues\": nulls, \"dictionaryHashFunction\": hashFn }){\n        super({\n            type: new (0, $7101ea1b1020e1ec$export$4ee70ab773570fb9)(type.dictionary, type.indices, type.id, type.isOrdered)\n        });\n        this._nulls = null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = (0, $773df4429b03e9d2$export$859d538a84176041)({\n            \"type\": this.type.indices,\n            \"nullValues\": nulls\n        });\n        this.dictionary = (0, $773df4429b03e9d2$export$859d538a84176041)({\n            \"type\": this.type.dictionary,\n            \"nullValues\": null\n        });\n        if (typeof hashFn === \"function\") this.valueToKey = hashFn;\n    }\n    get values() {\n        return this.indices.values;\n    }\n    get nullCount() {\n        return this.indices.nullCount;\n    }\n    get nullBitmap() {\n        return this.indices.nullBitmap;\n    }\n    get byteLength() {\n        return this.indices.byteLength + this.dictionary.byteLength;\n    }\n    get reservedLength() {\n        return this.indices.reservedLength + this.dictionary.reservedLength;\n    }\n    get reservedByteLength() {\n        return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n    }\n    isValid(value) {\n        return this.indices.isValid(value);\n    }\n    setValid(index, valid) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    setValue(index, value) {\n        const keysToIndices = this._keysToIndices;\n        const key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        return this.indices.setValue(index, idx);\n    }\n    flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary;\n        this.clear();\n        return data;\n    }\n    finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    valueToKey(val) {\n        return typeof val === \"string\" ? val : `${val}`;\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $2a7250f399918337$export$733e8e293b9ee724 extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$2a7250f399918337$export$733e8e293b9ee724.prototype._setValue = (0, $02b131079e669552$export$37c190d5a22f51cd);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nclass $f9772373175475b9$export$feeb13888b54cbe9 extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    setValue(index, value) {\n        const [child] = this.children;\n        const start = index * this.stride;\n        for(let i = -1, n = value.length; ++i < n;)child.set(start + i, value[i]);\n    }\n    addChild(child, name = \"0\") {\n        if (this.numChildren > 0) throw new Error(\"FixedSizeListBuilder can only have one child.\");\n        const childIndex = this.children.push(child);\n        this.type = new (0, $7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7)(this.type.listSize, new (0, $f3b63445f9bfe464$export$a455218a85c89869)(name, child.type, true));\n        return childIndex;\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $a7d925de430d83e2$export$3a500ad11bfd245d extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nclass $a7d925de430d83e2$export$242eec60e6493184 extends $a7d925de430d83e2$export$3a500ad11bfd245d {\n    setValue(index, value) {\n        // convert JS float64 to a uint16\n        super.setValue(index, (0, $7a7e4fd849947557$export$9c71a3ad52f4945a)(value));\n    }\n}\nclass $a7d925de430d83e2$export$7c1b9e119198ef57 extends $a7d925de430d83e2$export$3a500ad11bfd245d {\n}\nclass $a7d925de430d83e2$export$2628973cc1f71d3e extends $a7d925de430d83e2$export$3a500ad11bfd245d {\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $34bd3f5bb46fe9e7$export$b527b14155459814 extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$34bd3f5bb46fe9e7$export$b527b14155459814.prototype._setValue = (0, $02b131079e669552$export$36414baf865a2a5c);\nclass $34bd3f5bb46fe9e7$export$73c1e138048f16ec extends $34bd3f5bb46fe9e7$export$b527b14155459814 {\n}\n$34bd3f5bb46fe9e7$export$73c1e138048f16ec.prototype._setValue = (0, $02b131079e669552$export$3c7565d5cdb2d0a1);\nclass $34bd3f5bb46fe9e7$export$e0109cf28c445da6 extends $34bd3f5bb46fe9e7$export$b527b14155459814 {\n}\n$34bd3f5bb46fe9e7$export$e0109cf28c445da6.prototype._setValue = (0, $02b131079e669552$export$b484089ec0818b04);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nclass $e6a4baca07f8bb33$export$46c5c6ef7892ac23 extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nclass $e6a4baca07f8bb33$export$722edb96f36cc20a extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$a67597dedf4b8148 extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$c80440a8b659c66a extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$f20e1dcda345494b extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$7bf8f7287ba44682 extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$2b0bf54e11427d3e extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$5b7c02837d50cfa7 extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\nclass $e6a4baca07f8bb33$export$c9933cee4812c329 extends $e6a4baca07f8bb33$export$46c5c6ef7892ac23 {\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\nclass $1e247eca7ba17636$export$876cfa3161bef296 extends (0, $92fc1b2766556cfd$export$167e7ac1781effdf) {\n    constructor(opts){\n        super(opts);\n        this._offsets = new (0, $7df102b60e872658$export$63f3a916d2ef3d35)();\n    }\n    addChild(child, name = \"0\") {\n        if (this.numChildren > 0) throw new Error(\"ListBuilder can only have one child.\");\n        this.children[this.numChildren] = child;\n        this.type = new (0, $7101ea1b1020e1ec$export$54c2e3dc7acea9f5)(new (0, $f3b63445f9bfe464$export$a455218a85c89869)(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    _flushPending(pending) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending)if (typeof value === \"undefined\") offsets.set(index, 0);\n        else {\n            const n = value.length;\n            const start = offsets.set(index, n).buffer[index];\n            for(let i = -1; ++i < n;)child.set(start + i, value[i]);\n        }\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nclass $b6977886874704ea$export$d0d6c54035845194 extends (0, $92fc1b2766556cfd$export$167e7ac1781effdf) {\n    set(index, value) {\n        return super.set(index, value);\n    }\n    setValue(index, value) {\n        const row = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += row.size;\n        pending.set(index, row);\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) throw new Error(\"ListBuilder can only have one child.\");\n        this.children[this.numChildren] = child;\n        this.type = new (0, $7101ea1b1020e1ec$export$deb68d24b0e86bc0)(new (0, $f3b63445f9bfe464$export$a455218a85c89869)(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n    _flushPending(pending) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending)if (value === undefined) offsets.set(index, 0);\n        else {\n            let { [index]: idx, [index + 1]: end } = offsets.set(index, value.size).buffer;\n            for (const val of value.entries()){\n                child.set(idx, val);\n                if (++idx >= end) break;\n            }\n        }\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nclass $fd7133930b28e387$export$e9750c3badeefff5 extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    // @ts-ignore\n    setValue(index, value) {}\n    setValid(index, valid) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable unicorn/no-array-for-each */ \n\n\nclass $427d458e7af5d963$export$2945b170a37da4f5 extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    setValue(index, value) {\n        const { children: children, type: type } = this;\n        switch(Array.isArray(value) || value.constructor){\n            case true:\n                return type.children.forEach((_, i)=>children[i].set(index, value[i]));\n            case Map:\n                return type.children.forEach((f, i)=>children[i].set(index, value.get(f.name)));\n            default:\n                return type.children.forEach((f, i)=>children[i].set(index, value[f.name]));\n        }\n    }\n    /** @inheritdoc */ setValid(index, valid) {\n        if (!super.setValid(index, valid)) this.children.forEach((child)=>child.setValid(index, valid));\n        return valid;\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)([\n            ...this.type.children,\n            new (0, $f3b63445f9bfe464$export$a455218a85c89869)(name, child.type, true)\n        ]);\n        return childIndex;\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $6ce33a364c97761e$export$e790ce51dc66b576 extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$6ce33a364c97761e$export$e790ce51dc66b576.prototype._setValue = (0, $02b131079e669552$export$92fd42d4569bec0b);\nclass $6ce33a364c97761e$export$b0c2ec4be506c6aa extends $6ce33a364c97761e$export$e790ce51dc66b576 {\n}\n$6ce33a364c97761e$export$b0c2ec4be506c6aa.prototype._setValue = (0, $02b131079e669552$export$a8df9fe4302d9515);\nclass $6ce33a364c97761e$export$ca79823af9942544 extends $6ce33a364c97761e$export$e790ce51dc66b576 {\n}\n$6ce33a364c97761e$export$ca79823af9942544.prototype._setValue = (0, $02b131079e669552$export$b15d4d3e8dc34daf);\nclass $6ce33a364c97761e$export$9c2a427308b5ae36 extends $6ce33a364c97761e$export$e790ce51dc66b576 {\n}\n$6ce33a364c97761e$export$9c2a427308b5ae36.prototype._setValue = (0, $02b131079e669552$export$74f399dc684b99dc);\nclass $6ce33a364c97761e$export$1d380b3da3c8c76b extends $6ce33a364c97761e$export$e790ce51dc66b576 {\n}\n$6ce33a364c97761e$export$1d380b3da3c8c76b.prototype._setValue = (0, $02b131079e669552$export$a669d6701b9d0694);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nclass $d21341c0f9e6c31f$export$f73be2da2b0f002b extends (0, $92fc1b2766556cfd$export$ebef77f153499f66) {\n}\n$d21341c0f9e6c31f$export$f73be2da2b0f002b.prototype._setValue = (0, $02b131079e669552$export$e5d5e1c1822b6e56);\nclass $d21341c0f9e6c31f$export$187c92789997c87a extends $d21341c0f9e6c31f$export$f73be2da2b0f002b {\n}\n$d21341c0f9e6c31f$export$187c92789997c87a.prototype._setValue = (0, $02b131079e669552$export$3f12d34d8a01cbfc);\nclass $d21341c0f9e6c31f$export$51b75b17a50f7872 extends $d21341c0f9e6c31f$export$f73be2da2b0f002b {\n}\n$d21341c0f9e6c31f$export$51b75b17a50f7872.prototype._setValue = (0, $02b131079e669552$export$9d9527a16c0d803e);\nclass $d21341c0f9e6c31f$export$45a1b457dee6163b extends $d21341c0f9e6c31f$export$f73be2da2b0f002b {\n}\n$d21341c0f9e6c31f$export$45a1b457dee6163b.prototype._setValue = (0, $02b131079e669552$export$8a9291bdc36e3d43);\nclass $d21341c0f9e6c31f$export$99199143543720e8 extends $d21341c0f9e6c31f$export$f73be2da2b0f002b {\n}\n$d21341c0f9e6c31f$export$99199143543720e8.prototype._setValue = (0, $02b131079e669552$export$aa9540ea8a7ac603);\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\nclass $3e37b9cafb92e38e$export$84641dda74d2d68f extends (0, $92fc1b2766556cfd$export$f75e4297694ec637) {\n    constructor(options){\n        super(options);\n        this._typeIds = new (0, $7df102b60e872658$export$3f83dfa59b669833)(new Int8Array(0), 1);\n        if (typeof options[\"valueToChildTypeId\"] === \"function\") this._valueToChildTypeId = options[\"valueToChildTypeId\"];\n    }\n    get typeIdToChildIndex() {\n        return this.type.typeIdToChildIndex;\n    }\n    append(value, childTypeId) {\n        return this.set(this.length, value, childTypeId);\n    }\n    set(index, value, childTypeId) {\n        if (childTypeId === undefined) childTypeId = this._valueToChildTypeId(this, value, index);\n        if (this.setValid(index, this.isValid(value))) this.setValue(index, value, childTypeId);\n        return this;\n    }\n    setValue(index, value, childTypeId) {\n        this._typeIds.set(index, childTypeId);\n        const childIndex = this.type.typeIdToChildIndex[childTypeId];\n        const child = this.children[childIndex];\n        child === null || child === void 0 || child.set(index, value);\n    }\n    addChild(child, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children: children, mode: mode, typeIds: typeIds } } = this;\n        const fields = [\n            ...children,\n            new (0, $f3b63445f9bfe464$export$a455218a85c89869)(name, child.type)\n        ];\n        this.type = new (0, $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986)(mode, [\n            ...typeIds,\n            childTypeId\n        ], fields);\n        return childTypeId;\n    }\n    /** @ignore */ // @ts-ignore\n    _valueToChildTypeId(builder, value, offset) {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\nclass $3e37b9cafb92e38e$export$ccde3138ec7f6c32 extends $3e37b9cafb92e38e$export$84641dda74d2d68f {\n}\nclass $3e37b9cafb92e38e$export$860ca4a9d3ac64b7 extends $3e37b9cafb92e38e$export$84641dda74d2d68f {\n    constructor(options){\n        super(options);\n        this._offsets = new (0, $7df102b60e872658$export$3f83dfa59b669833)(new Int32Array(0));\n    }\n    /** @ignore */ setValue(index, value, childTypeId) {\n        const id = this._typeIds.set(index, childTypeId).buffer[index];\n        const child = this.getChildAt(this.type.typeIdToChildIndex[id]);\n        const denseIndex = this._offsets.set(index, child.length).buffer[index];\n        child === null || child === void 0 || child.set(denseIndex, value);\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\nclass $356d8f614700ac53$export$4253febb603c120c extends (0, $92fc1b2766556cfd$export$167e7ac1781effdf) {\n    constructor(opts){\n        super(opts);\n        this._values = new (0, $7df102b60e872658$export$93654d4f2d6cd524)(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + this.length * 4;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, (0, $919e3c7689196a2e$export$8f647c2204da8484)(value));\n    }\n    // @ts-ignore\n    _flushPending(pending, pendingLength) {}\n}\n$356d8f614700ac53$export$4253febb603c120c.prototype._flushPending = (0, $ee2a5f58df34af3c$export$1cb5c9ae30fbd96c).prototype._flushPending;\n\n\nclass $29291d2d51c02efb$export$fc52f82073101fb5 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    visitNull() {\n        return 0, $fd7133930b28e387$export$e9750c3badeefff5;\n    }\n    visitBool() {\n        return 0, $8ba7fc3982ab191d$export$d9b0a671433716ae;\n    }\n    visitInt() {\n        return 0, $e6a4baca07f8bb33$export$46c5c6ef7892ac23;\n    }\n    visitInt8() {\n        return 0, $e6a4baca07f8bb33$export$722edb96f36cc20a;\n    }\n    visitInt16() {\n        return 0, $e6a4baca07f8bb33$export$a67597dedf4b8148;\n    }\n    visitInt32() {\n        return 0, $e6a4baca07f8bb33$export$c80440a8b659c66a;\n    }\n    visitInt64() {\n        return 0, $e6a4baca07f8bb33$export$f20e1dcda345494b;\n    }\n    visitUint8() {\n        return 0, $e6a4baca07f8bb33$export$7bf8f7287ba44682;\n    }\n    visitUint16() {\n        return 0, $e6a4baca07f8bb33$export$2b0bf54e11427d3e;\n    }\n    visitUint32() {\n        return 0, $e6a4baca07f8bb33$export$5b7c02837d50cfa7;\n    }\n    visitUint64() {\n        return 0, $e6a4baca07f8bb33$export$c9933cee4812c329;\n    }\n    visitFloat() {\n        return 0, $a7d925de430d83e2$export$3a500ad11bfd245d;\n    }\n    visitFloat16() {\n        return 0, $a7d925de430d83e2$export$242eec60e6493184;\n    }\n    visitFloat32() {\n        return 0, $a7d925de430d83e2$export$7c1b9e119198ef57;\n    }\n    visitFloat64() {\n        return 0, $a7d925de430d83e2$export$2628973cc1f71d3e;\n    }\n    visitUtf8() {\n        return 0, $356d8f614700ac53$export$4253febb603c120c;\n    }\n    visitBinary() {\n        return 0, $ee2a5f58df34af3c$export$1cb5c9ae30fbd96c;\n    }\n    visitFixedSizeBinary() {\n        return 0, $2a7250f399918337$export$733e8e293b9ee724;\n    }\n    visitDate() {\n        return 0, $29c16a07182c22ae$export$9fe142f0e87de5bc;\n    }\n    visitDateDay() {\n        return 0, $29c16a07182c22ae$export$4f27f0d9632c6f5d;\n    }\n    visitDateMillisecond() {\n        return 0, $29c16a07182c22ae$export$41b87ce3cdd47618;\n    }\n    visitTimestamp() {\n        return 0, $6ce33a364c97761e$export$e790ce51dc66b576;\n    }\n    visitTimestampSecond() {\n        return 0, $6ce33a364c97761e$export$b0c2ec4be506c6aa;\n    }\n    visitTimestampMillisecond() {\n        return 0, $6ce33a364c97761e$export$ca79823af9942544;\n    }\n    visitTimestampMicrosecond() {\n        return 0, $6ce33a364c97761e$export$9c2a427308b5ae36;\n    }\n    visitTimestampNanosecond() {\n        return 0, $6ce33a364c97761e$export$1d380b3da3c8c76b;\n    }\n    visitTime() {\n        return 0, $d21341c0f9e6c31f$export$f73be2da2b0f002b;\n    }\n    visitTimeSecond() {\n        return 0, $d21341c0f9e6c31f$export$187c92789997c87a;\n    }\n    visitTimeMillisecond() {\n        return 0, $d21341c0f9e6c31f$export$51b75b17a50f7872;\n    }\n    visitTimeMicrosecond() {\n        return 0, $d21341c0f9e6c31f$export$45a1b457dee6163b;\n    }\n    visitTimeNanosecond() {\n        return 0, $d21341c0f9e6c31f$export$99199143543720e8;\n    }\n    visitDecimal() {\n        return 0, $e6c080d5695016d1$export$adf219ab10fb6c41;\n    }\n    visitList() {\n        return 0, $1e247eca7ba17636$export$876cfa3161bef296;\n    }\n    visitStruct() {\n        return 0, $427d458e7af5d963$export$2945b170a37da4f5;\n    }\n    visitUnion() {\n        return 0, $3e37b9cafb92e38e$export$84641dda74d2d68f;\n    }\n    visitDenseUnion() {\n        return 0, $3e37b9cafb92e38e$export$860ca4a9d3ac64b7;\n    }\n    visitSparseUnion() {\n        return 0, $3e37b9cafb92e38e$export$ccde3138ec7f6c32;\n    }\n    visitDictionary() {\n        return 0, $377b5ce0fd3294ab$export$628e18bde876b2cd;\n    }\n    visitInterval() {\n        return 0, $34bd3f5bb46fe9e7$export$b527b14155459814;\n    }\n    visitIntervalDayTime() {\n        return 0, $34bd3f5bb46fe9e7$export$73c1e138048f16ec;\n    }\n    visitIntervalYearMonth() {\n        return 0, $34bd3f5bb46fe9e7$export$e0109cf28c445da6;\n    }\n    visitFixedSizeList() {\n        return 0, $f9772373175475b9$export$feeb13888b54cbe9;\n    }\n    visitMap() {\n        return 0, $b6977886874704ea$export$d0d6c54035845194;\n    }\n}\nconst $29291d2d51c02efb$export$9544d5bb712b01ea = new $29291d2d51c02efb$export$fc52f82073101fb5();\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\n\n\n\n\nvar $7f44af34908592fc$var$_a;\nclass $7f44af34908592fc$export$cd370d004a302752 {\n    constructor(...args){\n        switch(args.length){\n            case 2:\n                [this.schema] = args;\n                if (!(this.schema instanceof (0, $f3b63445f9bfe464$export$19342e026b58ebb7))) throw new TypeError(\"RecordBatch constructor expects a [Schema, Data] pair.\");\n                [, this.data = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                    nullCount: 0,\n                    type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(this.schema.fields),\n                    children: this.schema.fields.map((f)=>(0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                            type: f.type,\n                            nullCount: 0\n                        }))\n                })] = args;\n                if (!(this.data instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b))) throw new TypeError(\"RecordBatch constructor expects a [Schema, Data] pair.\");\n                [this.schema, this.data] = $7f44af34908592fc$var$ensureSameLengthData(this.schema, this.data.children);\n                break;\n            case 1:\n                {\n                    const [obj] = args;\n                    const { fields: fields, children: children, length: length } = Object.keys(obj).reduce((memo, name, i)=>{\n                        memo.children[i] = obj[name];\n                        memo.length = Math.max(memo.length, obj[name].length);\n                        memo.fields[i] = (0, $f3b63445f9bfe464$export$a455218a85c89869).new({\n                            name: name,\n                            type: obj[name].type,\n                            nullable: true\n                        });\n                        return memo;\n                    }, {\n                        length: 0,\n                        fields: new Array(),\n                        children: new Array()\n                    });\n                    const schema = new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(fields);\n                    const data = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                        type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(fields),\n                        length: length,\n                        children: children,\n                        nullCount: 0\n                    });\n                    [this.schema, this.data] = $7f44af34908592fc$var$ensureSameLengthData(schema, data.children, length);\n                    break;\n                }\n            default:\n                throw new TypeError(\"RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.\");\n        }\n    }\n    get dictionaries() {\n        return this._dictionaries || (this._dictionaries = $7f44af34908592fc$var$collectDictionaries(this.schema.fields, this.data.children));\n    }\n    /**\n     * The number of columns in this RecordBatch.\n     */ get numCols() {\n        return this.schema.fields.length;\n    }\n    /**\n     * The number of rows in this RecordBatch.\n     */ get numRows() {\n        return this.data.length;\n    }\n    /**\n     * The number of null rows in this RecordBatch.\n     */ get nullCount() {\n        return this.data.nullCount;\n    }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */ isValid(index) {\n        return this.data.getValid(index);\n    }\n    /**\n     * Get a row by position.\n     * @param index The index of the element to read.\n     */ get(index) {\n        return (0, $d281eaf03ad48e28$export$9544d5bb712b01ea).visit(this.data, index);\n    }\n    /**\n     * Set a row by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */ set(index, value) {\n        return (0, $02b131079e669552$export$9544d5bb712b01ea).visit(this.data, index, value);\n    }\n    /**\n     * Retrieve the index of the first occurrence of a row in an RecordBatch.\n     * @param element The row to locate in the RecordBatch.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */ indexOf(element, offset) {\n        return (0, $16163aaa31ee8eda$export$9544d5bb712b01ea).visit(this.data, element, offset);\n    }\n    /**\n     * Get the size (in bytes) of a row by index.\n     * @param index The row index for which to compute the byteLength.\n     */ getByteLength(index) {\n        return (0, $5eca7df6080929be$export$9544d5bb712b01ea).visit(this.data, index);\n    }\n    /**\n     * Iterator for rows in this RecordBatch.\n     */ [Symbol.iterator]() {\n        return (0, $5475c8864f011599$export$9544d5bb712b01ea).visit(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            this.data\n        ]));\n    }\n    /**\n     * Return a JavaScript Array of the RecordBatch rows.\n     * @returns An Array of RecordBatch rows.\n     */ toArray() {\n        return [\n            ...this\n        ];\n    }\n    /**\n     * Combines two or more RecordBatch of the same schema.\n     * @param others Additional RecordBatch to add to the end of this RecordBatch.\n     */ concat(...others) {\n        return new (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)(this.schema, [\n            this,\n            ...others\n        ]);\n    }\n    /**\n     * Return a zero-copy sub-section of this RecordBatch.\n     * @param start The beginning of the specified portion of the RecordBatch.\n     * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.\n     */ slice(begin, end) {\n        const [slice] = new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            this.data\n        ]).slice(begin, end).data;\n        return new $7f44af34908592fc$export$cd370d004a302752(this.schema, slice);\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */ getChild(name) {\n        var _b;\n        return this.getChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f)=>f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */ getChildAt(index) {\n        if (index > -1 && index < this.schema.fields.length) return new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            this.data.children[index]\n        ]);\n        return null;\n    }\n    /**\n     * Sets a child Vector by name.\n     * @param name The name of the child to overwrite.\n     * @returns A new RecordBatch with the new child for the specified name.\n     */ setChild(name, child) {\n        var _b;\n        return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f)=>f.name === name), child);\n    }\n    setChildAt(index, child) {\n        let schema = this.schema;\n        let data = this.data;\n        if (index > -1 && index < this.numCols) {\n            if (!child) child = new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                    type: new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae),\n                    length: this.numRows\n                })\n            ]);\n            const fields = schema.fields.slice();\n            const children = data.children.slice();\n            const field = fields[index].clone({\n                type: child.type\n            });\n            [fields[index], children[index]] = [\n                field,\n                child.data[0]\n            ];\n            schema = new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(fields, new Map(this.schema.metadata));\n            data = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(fields),\n                children: children\n            });\n        }\n        return new $7f44af34908592fc$export$cd370d004a302752(schema, data);\n    }\n    /**\n     * Construct a new RecordBatch containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new RecordBatch of columns matching the specified names.\n     */ select(columnNames) {\n        const schema = this.schema.select(columnNames);\n        const type = new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(schema.fields);\n        const children = [];\n        for (const name of columnNames){\n            const index = this.schema.fields.findIndex((f)=>f.name === name);\n            if (~index) children[index] = this.data.children[index];\n        }\n        return new $7f44af34908592fc$export$cd370d004a302752(schema, (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: this.numRows,\n            children: children\n        }));\n    }\n    /**\n     * Construct a new RecordBatch containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new RecordBatch of columns matching at the specified indices.\n     */ selectAt(columnIndices) {\n        const schema = this.schema.selectAt(columnIndices);\n        const children = columnIndices.map((i)=>this.data.children[i]).filter(Boolean);\n        const subset = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(schema.fields),\n            length: this.numRows,\n            children: children\n        });\n        return new $7f44af34908592fc$export$cd370d004a302752(schema, subset);\n    }\n}\n$7f44af34908592fc$var$_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\n$7f44af34908592fc$export$cd370d004a302752[$7f44af34908592fc$var$_a] = ((proto)=>{\n    proto._nullCount = -1;\n    proto[Symbol.isConcatSpreadable] = true;\n    return \"RecordBatch\";\n})($7f44af34908592fc$export$cd370d004a302752.prototype);\n/** @ignore */ function $7f44af34908592fc$var$ensureSameLengthData(schema, chunks, maxLength = chunks.reduce((max, col)=>Math.max(max, col.length), 0)) {\n    var _b;\n    const fields = [\n        ...schema.fields\n    ];\n    const children = [\n        ...chunks\n    ];\n    const nullBitmapSize = (maxLength + 63 & -64) >> 3;\n    for (const [idx, field] of schema.fields.entries()){\n        const chunk = chunks[idx];\n        if (!chunk || chunk.length !== maxLength) {\n            fields[idx] = field.clone({\n                nullable: true\n            });\n            children[idx] = (_b = chunk === null || chunk === void 0 ? void 0 : chunk._changeLengthAndBackfillNullBitmap(maxLength)) !== null && _b !== void 0 ? _b : (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                type: field.type,\n                length: maxLength,\n                nullCount: maxLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n    return [\n        schema.assign(fields),\n        (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(fields),\n            length: maxLength,\n            children: children\n        })\n    ];\n}\n/** @ignore */ function $7f44af34908592fc$var$collectDictionaries(fields, children, dictionaries = new Map()) {\n    for(let i = -1, n = fields.length; ++i < n;){\n        const field = fields[i];\n        const type = field.type;\n        const data = children[i];\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                if (data.dictionary) dictionaries.set(type.id, data.dictionary);\n            } else if (dictionaries.get(type.id) !== data.dictionary) throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n        }\n        if (type.children && type.children.length > 0) $7f44af34908592fc$var$collectDictionaries(type.children, data.children, dictionaries);\n    }\n    return dictionaries;\n}\nclass $7f44af34908592fc$export$9dbf71c289537a87 extends $7f44af34908592fc$export$cd370d004a302752 {\n    constructor(schema){\n        const children = schema.fields.map((f)=>(0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                type: f.type\n            }));\n        const data = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(schema.fields),\n            nullCount: 0,\n            children: children\n        });\n        super(schema, data);\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nclass $d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    compareSchemas(schema, other) {\n        return schema === other || other instanceof schema.constructor && this.compareManyFields(schema.fields, other.fields);\n    }\n    compareManyFields(fields, others) {\n        return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every((f, i)=>this.compareFields(f, others[i]));\n    }\n    compareFields(field, other) {\n        return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && this.visit(field.type, other.type);\n    }\n}\nfunction $d47c8e7f9c21dc9d$var$compareConstructor(type, other) {\n    return other instanceof type.constructor;\n}\nfunction $d47c8e7f9c21dc9d$var$compareAny(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other);\n}\nfunction $d47c8e7f9c21dc9d$var$compareInt(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.bitWidth === other.bitWidth && type.isSigned === other.isSigned;\n}\nfunction $d47c8e7f9c21dc9d$var$compareFloat(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.precision === other.precision;\n}\nfunction $d47c8e7f9c21dc9d$var$compareFixedSizeBinary(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.byteWidth === other.byteWidth;\n}\nfunction $d47c8e7f9c21dc9d$var$compareDate(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.unit === other.unit;\n}\nfunction $d47c8e7f9c21dc9d$var$compareTimestamp(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.unit === other.unit && type.timezone === other.timezone;\n}\nfunction $d47c8e7f9c21dc9d$var$compareTime(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.unit === other.unit && type.bitWidth === other.bitWidth;\n}\nfunction $d47c8e7f9c21dc9d$var$compareList(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.children.length === other.children.length && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareManyFields(type.children, other.children);\n}\nfunction $d47c8e7f9c21dc9d$var$compareStruct(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.children.length === other.children.length && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareManyFields(type.children, other.children);\n}\nfunction $d47c8e7f9c21dc9d$var$compareUnion(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.mode === other.mode && type.typeIds.every((x, i)=>x === other.typeIds[i]) && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareManyFields(type.children, other.children);\n}\nfunction $d47c8e7f9c21dc9d$var$compareDictionary(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.id === other.id && type.isOrdered === other.isOrdered && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.visit(type.indices, other.indices) && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.visit(type.dictionary, other.dictionary);\n}\nfunction $d47c8e7f9c21dc9d$var$compareInterval(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.unit === other.unit;\n}\nfunction $d47c8e7f9c21dc9d$var$compareFixedSizeList(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.listSize === other.listSize && type.children.length === other.children.length && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareManyFields(type.children, other.children);\n}\nfunction $d47c8e7f9c21dc9d$var$compareMap(type, other) {\n    return type === other || $d47c8e7f9c21dc9d$var$compareConstructor(type, other) && type.keysSorted === other.keysSorted && type.children.length === other.children.length && $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareManyFields(type.children, other.children);\n}\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitNull = $d47c8e7f9c21dc9d$var$compareAny;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitBool = $d47c8e7f9c21dc9d$var$compareAny;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInt = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInt8 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInt16 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInt32 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInt64 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUint8 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUint16 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUint32 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUint64 = $d47c8e7f9c21dc9d$var$compareInt;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFloat = $d47c8e7f9c21dc9d$var$compareFloat;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFloat16 = $d47c8e7f9c21dc9d$var$compareFloat;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFloat32 = $d47c8e7f9c21dc9d$var$compareFloat;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFloat64 = $d47c8e7f9c21dc9d$var$compareFloat;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUtf8 = $d47c8e7f9c21dc9d$var$compareAny;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitBinary = $d47c8e7f9c21dc9d$var$compareAny;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFixedSizeBinary = $d47c8e7f9c21dc9d$var$compareFixedSizeBinary;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDate = $d47c8e7f9c21dc9d$var$compareDate;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDateDay = $d47c8e7f9c21dc9d$var$compareDate;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDateMillisecond = $d47c8e7f9c21dc9d$var$compareDate;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimestamp = $d47c8e7f9c21dc9d$var$compareTimestamp;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimestampSecond = $d47c8e7f9c21dc9d$var$compareTimestamp;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimestampMillisecond = $d47c8e7f9c21dc9d$var$compareTimestamp;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimestampMicrosecond = $d47c8e7f9c21dc9d$var$compareTimestamp;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimestampNanosecond = $d47c8e7f9c21dc9d$var$compareTimestamp;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTime = $d47c8e7f9c21dc9d$var$compareTime;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimeSecond = $d47c8e7f9c21dc9d$var$compareTime;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimeMillisecond = $d47c8e7f9c21dc9d$var$compareTime;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimeMicrosecond = $d47c8e7f9c21dc9d$var$compareTime;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitTimeNanosecond = $d47c8e7f9c21dc9d$var$compareTime;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDecimal = $d47c8e7f9c21dc9d$var$compareAny;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitList = $d47c8e7f9c21dc9d$var$compareList;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitStruct = $d47c8e7f9c21dc9d$var$compareStruct;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitUnion = $d47c8e7f9c21dc9d$var$compareUnion;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDenseUnion = $d47c8e7f9c21dc9d$var$compareUnion;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitSparseUnion = $d47c8e7f9c21dc9d$var$compareUnion;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitDictionary = $d47c8e7f9c21dc9d$var$compareDictionary;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitInterval = $d47c8e7f9c21dc9d$var$compareInterval;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitIntervalDayTime = $d47c8e7f9c21dc9d$var$compareInterval;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitIntervalYearMonth = $d47c8e7f9c21dc9d$var$compareInterval;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitFixedSizeList = $d47c8e7f9c21dc9d$var$compareFixedSizeList;\n$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66.prototype.visitMap = $d47c8e7f9c21dc9d$var$compareMap;\nconst $d47c8e7f9c21dc9d$export$9544d5bb712b01ea = new $d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66();\nfunction $d47c8e7f9c21dc9d$export$fcd775bba374c9dc(schema, other) {\n    return $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareSchemas(schema, other);\n}\nfunction $d47c8e7f9c21dc9d$export$df3eec93f6cf0713(field, other) {\n    return $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.compareFields(field, other);\n}\nfunction $d47c8e7f9c21dc9d$export$b3e0b984f2a6bd2a(type, other) {\n    return $d47c8e7f9c21dc9d$export$9544d5bb712b01ea.visit(type, other);\n}\n\n\nfunction $773df4429b03e9d2$export$859d538a84176041(options) {\n    const type = options.type;\n    const builder = new ((0, $29291d2d51c02efb$export$9544d5bb712b01ea).getVisitFn(type)())(options);\n    if (type.children && type.children.length > 0) {\n        const children = options[\"children\"] || [];\n        const defaultOptions = {\n            \"nullValues\": options[\"nullValues\"]\n        };\n        const getChildOptions = Array.isArray(children) ? (_, i)=>children[i] || defaultOptions : ({ name: name })=>children[name] || defaultOptions;\n        for (const [index, field] of type.children.entries()){\n            const { type: type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push($773df4429b03e9d2$export$859d538a84176041(Object.assign(Object.assign({}, opts), {\n                type: type\n            })));\n        }\n    }\n    return builder;\n}\nfunction $773df4429b03e9d2$export$da7228224b7cc3e(init, type) {\n    if (init instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b) || init instanceof (0, $32ea7584b42ab85d$export$9b781de7bf37bf48) || init.type instanceof $7101ea1b1020e1ec$export$45c69700ee30a78c || ArrayBuffer.isView(init)) return (0, $32ea7584b42ab85d$export$ee1be48762406d20)(init);\n    const options = {\n        type: type !== null && type !== void 0 ? type : $773df4429b03e9d2$var$inferType(init),\n        nullValues: [\n            null\n        ]\n    };\n    const chunks = [\n        ...$773df4429b03e9d2$export$a16b69793768fbd6(options)(init)\n    ];\n    const vector = chunks.length === 1 ? chunks[0] : chunks.reduce((a, b)=>a.concat(b));\n    if ($7101ea1b1020e1ec$export$45c69700ee30a78c.isDictionary(vector.type)) return vector.memoize();\n    return vector;\n}\nfunction $773df4429b03e9d2$export$279811179a0342fb(array) {\n    const vector = $773df4429b03e9d2$export$da7228224b7cc3e(array);\n    const batch = new (0, $7f44af34908592fc$export$cd370d004a302752)(new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(vector.type.children), vector.data[0]);\n    return new (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)(batch);\n}\nfunction $773df4429b03e9d2$var$inferType(value) {\n    if (value.length === 0) return new $7101ea1b1020e1ec$export$26c9c3a80cd996ae;\n    let nullsCount = 0;\n    let arraysCount = 0;\n    let objectsCount = 0;\n    let numbersCount = 0;\n    let stringsCount = 0;\n    let bigintsCount = 0;\n    let booleansCount = 0;\n    let datesCount = 0;\n    for (const val of value){\n        if (val == null) {\n            ++nullsCount;\n            continue;\n        }\n        switch(typeof val){\n            case \"bigint\":\n                ++bigintsCount;\n                continue;\n            case \"boolean\":\n                ++booleansCount;\n                continue;\n            case \"number\":\n                ++numbersCount;\n                continue;\n            case \"string\":\n                ++stringsCount;\n                continue;\n            case \"object\":\n                if (Array.isArray(val)) ++arraysCount;\n                else if (Object.prototype.toString.call(val) === \"[object Date]\") ++datesCount;\n                else ++objectsCount;\n                continue;\n        }\n        throw new TypeError(\"Unable to infer Vector type from input values, explicit type declaration expected\");\n    }\n    if (numbersCount + nullsCount === value.length) return new $7101ea1b1020e1ec$export$42429e12507a49a2;\n    else if (stringsCount + nullsCount === value.length) return new $7101ea1b1020e1ec$export$4ee70ab773570fb9(new $7101ea1b1020e1ec$export$3ee43a596719d7b5, new $7101ea1b1020e1ec$export$493726e231866ac3);\n    else if (bigintsCount + nullsCount === value.length) return new $7101ea1b1020e1ec$export$8a5e19712a0a5deb;\n    else if (booleansCount + nullsCount === value.length) return new $7101ea1b1020e1ec$export$6e6298e1abe0d5b;\n    else if (datesCount + nullsCount === value.length) return new $7101ea1b1020e1ec$export$def17eba046722e2;\n    else if (arraysCount + nullsCount === value.length) {\n        const array = value;\n        const childType = $773df4429b03e9d2$var$inferType(array[array.findIndex((ary)=>ary != null)]);\n        if (array.every((ary)=>ary == null || (0, $d47c8e7f9c21dc9d$export$b3e0b984f2a6bd2a)(childType, $773df4429b03e9d2$var$inferType(ary)))) return new $7101ea1b1020e1ec$export$54c2e3dc7acea9f5(new (0, $f3b63445f9bfe464$export$a455218a85c89869)(\"\", childType, true));\n    } else if (objectsCount + nullsCount === value.length) {\n        const fields = new Map();\n        for (const row of value){\n            for (const key of Object.keys(row))if (!fields.has(key) && row[key] != null) // use the type inferred for the first instance of a found key\n            fields.set(key, new (0, $f3b63445f9bfe464$export$a455218a85c89869)(key, $773df4429b03e9d2$var$inferType([\n                row[key]\n            ]), true));\n        }\n        return new $7101ea1b1020e1ec$export$eabc71f011df675a([\n            ...fields.values()\n        ]);\n    }\n    throw new TypeError(\"Unable to infer Vector type from input values, explicit type declaration expected\");\n}\nfunction $773df4429b03e9d2$export$a16b69793768fbd6(options) {\n    const { [\"queueingStrategy\"]: queueingStrategy = \"count\" } = options;\n    const { [\"highWaterMark\"]: highWaterMark = queueingStrategy !== \"bytes\" ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\n    const sizeProperty = queueingStrategy !== \"bytes\" ? \"length\" : \"byteLength\";\n    return function*(source) {\n        let numChunks = 0;\n        const builder = $773df4429b03e9d2$export$859d538a84176041(options);\n        for (const value of source)if (builder.append(value)[sizeProperty] >= highWaterMark) ++numChunks && (yield builder.toVector());\n        if (builder.finish().length > 0 || numChunks === 0) yield builder.toVector();\n    };\n}\nfunction $773df4429b03e9d2$export$1cb8c9bc8885ed2(options) {\n    const { [\"queueingStrategy\"]: queueingStrategy = \"count\" } = options;\n    const { [\"highWaterMark\"]: highWaterMark = queueingStrategy !== \"bytes\" ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\n    const sizeProperty = queueingStrategy !== \"bytes\" ? \"length\" : \"byteLength\";\n    return function(source) {\n        return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function*() {\n            var e_1, _a;\n            let numChunks = 0;\n            const builder = $773df4429b03e9d2$export$859d538a84176041(options);\n            try {\n                for(var source_1 = (0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(source), source_1_1; source_1_1 = yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(source_1.next()), !source_1_1.done;){\n                    const value = source_1_1.value;\n                    if (builder.append(value)[sizeProperty] >= highWaterMark) ++numChunks && (yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(builder.toVector()));\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(_a.call(source_1));\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n            if (builder.finish().length > 0 || numChunks === 0) yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(builder.toVector());\n        });\n    };\n}\n\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nfunction $3dd8df82ab2b4707$export$1481174935707bfd(schema, vecs) {\n    return $3dd8df82ab2b4707$var$uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v)=>v.data.concat()));\n}\n/** @ignore */ function $3dd8df82ab2b4707$var$uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {\n    const fields = [\n        ...schema.fields\n    ];\n    const batches = [];\n    const memo = {\n        numBatches: cols.reduce((n, c)=>Math.max(n, c.length), 0)\n    };\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = cols.length;\n    let child, children = [];\n    while(memo.numBatches-- > 0){\n        for(batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;){\n            children[i] = child = cols[i].shift();\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n        if (Number.isFinite(batchLength)) {\n            children = $3dd8df82ab2b4707$var$distributeChildren(fields, batchLength, children, cols, memo);\n            if (batchLength > 0) batches[numBatches++] = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(fields),\n                length: batchLength,\n                nullCount: 0,\n                children: children.slice()\n            });\n        }\n    }\n    return [\n        schema = schema.assign(fields),\n        batches.map((data)=>new (0, $7f44af34908592fc$export$cd370d004a302752)(schema, data))\n    ];\n}\n/** @ignore */ function $3dd8df82ab2b4707$var$distributeChildren(fields, batchLength, children, columns, memo) {\n    var _a;\n    const nullBitmapSize = (batchLength + 63 & -64) >> 3;\n    for(let i = -1, n = columns.length; ++i < n;){\n        const child = children[i];\n        const length = child === null || child === void 0 ? void 0 : child.length;\n        if (length >= batchLength) {\n            if (length === batchLength) children[i] = child;\n            else {\n                children[i] = child.slice(0, batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(child.slice(batchLength, length - batchLength)));\n            }\n        } else {\n            const field = fields[i];\n            fields[i] = field.clone({\n                nullable: true\n            });\n            children[i] = (_a = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a !== void 0 ? _a : (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                type: field.type,\n                length: batchLength,\n                nullCount: batchLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n    return children;\n}\n\n\n\n\n\n\n\n\n\n\nvar $8aa47498f8e624f2$var$_a;\nclass $8aa47498f8e624f2$export$54ec01a60f47d33d {\n    constructor(...args){\n        var _b, _c;\n        if (args.length === 0) {\n            this.batches = [];\n            this.schema = new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)([]);\n            this._offsets = [\n                0\n            ];\n            return this;\n        }\n        let schema;\n        let offsets;\n        if (args[0] instanceof (0, $f3b63445f9bfe464$export$19342e026b58ebb7)) schema = args.shift();\n        if (args[args.length - 1] instanceof Uint32Array) offsets = args.pop();\n        const unwrap = (x)=>{\n            if (x) {\n                if (x instanceof (0, $7f44af34908592fc$export$cd370d004a302752)) return [\n                    x\n                ];\n                else if (x instanceof $8aa47498f8e624f2$export$54ec01a60f47d33d) return x.batches;\n                else if (x instanceof (0, $e570fe8df119273b$export$2d0294657ab35f1b)) {\n                    if (x.type instanceof (0, $7101ea1b1020e1ec$export$eabc71f011df675a)) return [\n                        new (0, $7f44af34908592fc$export$cd370d004a302752)(new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(x.type.children), x)\n                    ];\n                } else if (Array.isArray(x)) return x.flatMap((v)=>unwrap(v));\n                else if (typeof x[Symbol.iterator] === \"function\") return [\n                    ...x\n                ].flatMap((v)=>unwrap(v));\n                else if (typeof x === \"object\") {\n                    const keys = Object.keys(x);\n                    const vecs = keys.map((k)=>new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                            x[k]\n                        ]));\n                    const schema = new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(keys.map((k, i)=>new (0, $f3b63445f9bfe464$export$a455218a85c89869)(String(k), vecs[i].type)));\n                    const [, batches] = (0, $3dd8df82ab2b4707$export$1481174935707bfd)(schema, vecs);\n                    return batches.length === 0 ? [\n                        new (0, $7f44af34908592fc$export$cd370d004a302752)(x)\n                    ] : batches;\n                }\n            }\n            return [];\n        };\n        const batches = args.flatMap((v)=>unwrap(v));\n        schema = (_c = schema !== null && schema !== void 0 ? schema : (_b = batches[0]) === null || _b === void 0 ? void 0 : _b.schema) !== null && _c !== void 0 ? _c : new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)([]);\n        if (!(schema instanceof (0, $f3b63445f9bfe464$export$19342e026b58ebb7))) throw new TypeError(\"Table constructor expects a [Schema, RecordBatch[]] pair.\");\n        for (const batch of batches){\n            if (!(batch instanceof (0, $7f44af34908592fc$export$cd370d004a302752))) throw new TypeError(\"Table constructor expects a [Schema, RecordBatch[]] pair.\");\n            if (!(0, $d47c8e7f9c21dc9d$export$fcd775bba374c9dc)(schema, batch.schema)) throw new TypeError(\"Table and inner RecordBatch schemas must be equivalent.\");\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this._offsets = offsets !== null && offsets !== void 0 ? offsets : (0, $93291429152ee31f$export$dc8ec309c5963567)(this.data);\n    }\n    /**\n     * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n     */ get data() {\n        return this.batches.map(({ data: data })=>data);\n    }\n    /**\n     * The number of columns in this Table.\n     */ get numCols() {\n        return this.schema.fields.length;\n    }\n    /**\n     * The number of rows in this Table.\n     */ get numRows() {\n        return this.data.reduce((numRows, data)=>numRows + data.length, 0);\n    }\n    /**\n     * The number of null rows in this Table.\n     */ get nullCount() {\n        if (this._nullCount === -1) this._nullCount = (0, $93291429152ee31f$export$66186826dace05d7)(this.data);\n        return this._nullCount;\n    }\n    /**\n     * Check whether an element is null.\n     *\n     * @param index The index at which to read the validity bitmap.\n     */ // @ts-ignore\n    isValid(index) {\n        return false;\n    }\n    /**\n     * Get an element value by position.\n     *\n     * @param index The index of the element to read.\n     */ // @ts-ignore\n    get(index) {\n        return null;\n    }\n    /**\n     * Set an element value by position.\n     *\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */ // @ts-ignore\n    set(index, value) {\n        return;\n    }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     *\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */ // @ts-ignore\n    indexOf(element, offset) {\n        return -1;\n    }\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */ // @ts-ignore\n    getByteLength(index) {\n        return 0;\n    }\n    /**\n     * Iterator for rows in this Table.\n     */ [Symbol.iterator]() {\n        if (this.batches.length > 0) return (0, $5475c8864f011599$export$9544d5bb712b01ea).visit(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)(this.data));\n        return new Array(0)[Symbol.iterator]();\n    }\n    /**\n     * Return a JavaScript Array of the Table rows.\n     *\n     * @returns An Array of Table rows.\n     */ toArray() {\n        return [\n            ...this\n        ];\n    }\n    /**\n     * Returns a string representation of the Table rows.\n     *\n     * @returns A string representation of the Table rows.\n     */ toString() {\n        return `[\\n  ${this.toArray().join(\",\\n  \")}\\n]`;\n    }\n    /**\n     * Combines two or more Tables of the same schema.\n     *\n     * @param others Additional Tables to add to the end of this Tables.\n     */ concat(...others) {\n        const schema = this.schema;\n        const data = this.data.concat(others.flatMap(({ data: data })=>data));\n        return new $8aa47498f8e624f2$export$54ec01a60f47d33d(schema, data.map((data)=>new (0, $7f44af34908592fc$export$cd370d004a302752)(schema, data)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Table.\n     *\n     * @param begin The beginning of the specified portion of the Table.\n     * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.\n     */ slice(begin, end) {\n        const schema = this.schema;\n        [begin, end] = (0, $6a5b4b7795980060$export$e9d4863bcce07ce9)({\n            length: this.numRows\n        }, begin, end);\n        const data = (0, $93291429152ee31f$export$aac8c68e61aca8b9)(this.data, this._offsets, begin, end);\n        return new $8aa47498f8e624f2$export$54ec01a60f47d33d(schema, data.map((chunk)=>new (0, $7f44af34908592fc$export$cd370d004a302752)(schema, chunk)));\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     *\n     * @param name The name of the child to retrieve.\n     */ getChild(name) {\n        return this.getChildAt(this.schema.fields.findIndex((f)=>f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     *\n     * @param index The index of the child to retrieve.\n     */ getChildAt(index) {\n        if (index > -1 && index < this.schema.fields.length) {\n            const data = this.data.map((data)=>data.children[index]);\n            if (data.length === 0) {\n                const { type: type } = this.schema.fields[index];\n                const empty = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                    type: type,\n                    length: 0,\n                    nullCount: 0\n                });\n                data.push(empty._changeLengthAndBackfillNullBitmap(this.numRows));\n            }\n            return new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)(data);\n        }\n        return null;\n    }\n    /**\n     * Sets a child Vector by name.\n     *\n     * @param name The name of the child to overwrite.\n     * @returns A new Table with the supplied child for the specified name.\n     */ setChild(name, child) {\n        var _b;\n        return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f)=>f.name === name), child);\n    }\n    setChildAt(index, child) {\n        let schema = this.schema;\n        let batches = [\n            ...this.batches\n        ];\n        if (index > -1 && index < this.numCols) {\n            if (!child) child = new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n                    type: new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae),\n                    length: this.numRows\n                })\n            ]);\n            const fields = schema.fields.slice();\n            const field = fields[index].clone({\n                type: child.type\n            });\n            const children = this.schema.fields.map((_, i)=>this.getChildAt(i));\n            [fields[index], children[index]] = [\n                field,\n                child\n            ];\n            [schema, batches] = (0, $3dd8df82ab2b4707$export$1481174935707bfd)(schema, children);\n        }\n        return new $8aa47498f8e624f2$export$54ec01a60f47d33d(schema, batches);\n    }\n    /**\n     * Construct a new Table containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new Table of columns matching the specified names.\n     */ select(columnNames) {\n        const nameToIndex = this.schema.fields.reduce((m, f, i)=>m.set(f.name, i), new Map());\n        return this.selectAt(columnNames.map((columnName)=>nameToIndex.get(columnName)).filter((x)=>x > -1));\n    }\n    /**\n     * Construct a new Table containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new Table of columns at the specified indices.\n     */ selectAt(columnIndices) {\n        const schema = this.schema.selectAt(columnIndices);\n        const data = this.batches.map((batch)=>batch.selectAt(columnIndices));\n        return new $8aa47498f8e624f2$export$54ec01a60f47d33d(schema, data);\n    }\n    assign(other) {\n        const fields = this.schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx)=>{\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f)=>f.name === f2.name);\n            ~i ? oldToNew[i] = newIdx : indices.push(newIdx);\n            return memo;\n        }, [\n            [],\n            []\n        ]);\n        const schema = this.schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_, i)=>[\n                    i,\n                    oldToNew[i]\n                ]).map(([i, j])=>j === undefined ? this.getChildAt(i) : other.getChildAt(j)),\n            ...indices.map((i)=>other.getChildAt(i))\n        ].filter(Boolean);\n        return new $8aa47498f8e624f2$export$54ec01a60f47d33d(...(0, $3dd8df82ab2b4707$export$1481174935707bfd)(schema, columns));\n    }\n}\n$8aa47498f8e624f2$var$_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\n$8aa47498f8e624f2$export$54ec01a60f47d33d[$8aa47498f8e624f2$var$_a] = ((proto)=>{\n    proto.schema = null;\n    proto.batches = [];\n    proto._offsets = new Uint32Array([\n        0\n    ]);\n    proto._nullCount = -1;\n    proto[Symbol.isConcatSpreadable] = true;\n    proto[\"isValid\"] = (0, $93291429152ee31f$export$a18deb2181038191)((0, $93291429152ee31f$export$bbb8f619af0ed78f));\n    proto[\"get\"] = (0, $93291429152ee31f$export$a18deb2181038191)((0, $d281eaf03ad48e28$export$9544d5bb712b01ea).getVisitFn((0, $f79edd7127f4719f$export$92738401e1603719).Struct));\n    proto[\"set\"] = (0, $93291429152ee31f$export$534e46eacac9083a)((0, $02b131079e669552$export$9544d5bb712b01ea).getVisitFn((0, $f79edd7127f4719f$export$92738401e1603719).Struct));\n    proto[\"indexOf\"] = (0, $93291429152ee31f$export$d7a757adef85ea6e)((0, $16163aaa31ee8eda$export$9544d5bb712b01ea).getVisitFn((0, $f79edd7127f4719f$export$92738401e1603719).Struct));\n    proto[\"getByteLength\"] = (0, $93291429152ee31f$export$a18deb2181038191)((0, $5eca7df6080929be$export$9544d5bb712b01ea).getVisitFn((0, $f79edd7127f4719f$export$92738401e1603719).Struct));\n    return \"Table\";\n})($8aa47498f8e624f2$export$54ec01a60f47d33d.prototype);\nfunction $8aa47498f8e624f2$export$d96816ff34d2479a(input) {\n    const vecs = {};\n    const inputs = Object.entries(input);\n    for (const [key, col] of inputs)vecs[key] = (0, $32ea7584b42ab85d$export$ee1be48762406d20)(col);\n    return new $8aa47498f8e624f2$export$54ec01a60f47d33d(vecs);\n}\nfunction $8aa47498f8e624f2$export$8b42005c093bed82(input) {\n    const vecs = {};\n    const inputs = Object.entries(input);\n    for (const [key, col] of inputs)vecs[key] = (0, $773df4429b03e9d2$export$da7228224b7cc3e)(col);\n    return new $8aa47498f8e624f2$export$54ec01a60f47d33d(vecs);\n}\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable @typescript-eslint/naming-convention */ // automatically generated by the FlatBuffers compiler, do not modify\nclass $55acd062e3b07133$export$d96a8827a60d6b69 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     */ offset() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * Length of the metadata\n     */ metaDataLength() {\n        return this.bb.readInt32(this.bb_pos + 8);\n    }\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metadata).\n     */ bodyLength() {\n        return this.bb.readInt64(this.bb_pos + 16);\n    }\n    static sizeOf() {\n        return 24;\n    }\n    static createBlock(builder, offset, metaDataLength, bodyLength) {\n        builder.prep(8, 24);\n        builder.writeInt64(bodyLength);\n        builder.pad(4);\n        builder.writeInt32(metaDataLength);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\nconst $b8849adfb5ff85b9$export$f56c4803c80fed3c = 2;\nconst $b8849adfb5ff85b9$export$e8e819ef5c027f91 = 4;\nconst $b8849adfb5ff85b9$export$74b03f0cc21be82e = 4;\nconst $b8849adfb5ff85b9$export$8b4bad21195989e3 = 4;\n\n\nconst $0f693df3e668ea5c$export$1d95835383bb05a = new Int32Array(2);\nconst $0f693df3e668ea5c$export$1a4bac2aea11f30e = new Float32Array($0f693df3e668ea5c$export$1d95835383bb05a.buffer);\nconst $0f693df3e668ea5c$export$76f82835c9736f87 = new Float64Array($0f693df3e668ea5c$export$1d95835383bb05a.buffer);\nconst $0f693df3e668ea5c$export$50a7e2d9fa5ce460 = new Uint16Array(new Uint8Array([\n    1,\n    0\n]).buffer)[0] === 1;\n\n\nfunction $252e58727f592771$export$3753205ae302ec5f(low, high) {\n    return $252e58727f592771$export$12ac1d26449d9c2e.create(low, high);\n}\nclass $252e58727f592771$export$12ac1d26449d9c2e {\n    constructor(low, high){\n        this.low = low | 0;\n        this.high = high | 0;\n    }\n    static create(low, high) {\n        // Special-case zero to avoid GC overhead for default values\n        return low == 0 && high == 0 ? $252e58727f592771$export$12ac1d26449d9c2e.ZERO : new $252e58727f592771$export$12ac1d26449d9c2e(low, high);\n    }\n    toFloat64() {\n        return (this.low >>> 0) + this.high * 0x100000000;\n    }\n    equals(other) {\n        return this.low == other.low && this.high == other.high;\n    }\n}\n$252e58727f592771$export$12ac1d26449d9c2e.ZERO = new $252e58727f592771$export$12ac1d26449d9c2e(0, 0);\n\n\nvar $e1f67f0adda0ed3e$export$72958ca7c468c63b;\n(function(Encoding) {\n    Encoding[Encoding[\"UTF8_BYTES\"] = 1] = \"UTF8_BYTES\";\n    Encoding[Encoding[\"UTF16_STRING\"] = 2] = \"UTF16_STRING\";\n})($e1f67f0adda0ed3e$export$72958ca7c468c63b || ($e1f67f0adda0ed3e$export$72958ca7c468c63b = {}));\n\n\n\n\n\n\nclass $b791e9664c1babe0$export$b21dcdb2a0c6c467 {\n    /**\r\n     * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)\r\n     */ constructor(bytes_){\n        this.bytes_ = bytes_;\n        this.position_ = 0;\n    }\n    /**\r\n     * Create and allocate a new ByteBuffer with a given size.\r\n     */ static allocate(byte_size) {\n        return new $b791e9664c1babe0$export$b21dcdb2a0c6c467(new Uint8Array(byte_size));\n    }\n    clear() {\n        this.position_ = 0;\n    }\n    /**\r\n     * Get the underlying `Uint8Array`.\r\n     */ bytes() {\n        return this.bytes_;\n    }\n    /**\r\n     * Get the buffer's position.\r\n     */ position() {\n        return this.position_;\n    }\n    /**\r\n     * Set the buffer's position.\r\n     */ setPosition(position) {\n        this.position_ = position;\n    }\n    /**\r\n     * Get the buffer's capacity.\r\n     */ capacity() {\n        return this.bytes_.length;\n    }\n    readInt8(offset) {\n        return this.readUint8(offset) << 24 >> 24;\n    }\n    readUint8(offset) {\n        return this.bytes_[offset];\n    }\n    readInt16(offset) {\n        return this.readUint16(offset) << 16 >> 16;\n    }\n    readUint16(offset) {\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n    }\n    readInt32(offset) {\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n    }\n    readUint32(offset) {\n        return this.readInt32(offset) >>> 0;\n    }\n    readInt64(offset) {\n        return new (0, $252e58727f592771$export$12ac1d26449d9c2e)(this.readInt32(offset), this.readInt32(offset + 4));\n    }\n    readUint64(offset) {\n        return new (0, $252e58727f592771$export$12ac1d26449d9c2e)(this.readUint32(offset), this.readUint32(offset + 4));\n    }\n    readFloat32(offset) {\n        (0, $0f693df3e668ea5c$export$1d95835383bb05a)[0] = this.readInt32(offset);\n        return (0, $0f693df3e668ea5c$export$1a4bac2aea11f30e)[0];\n    }\n    readFloat64(offset) {\n        (0, $0f693df3e668ea5c$export$1d95835383bb05a)[(0, $0f693df3e668ea5c$export$50a7e2d9fa5ce460) ? 0 : 1] = this.readInt32(offset);\n        (0, $0f693df3e668ea5c$export$1d95835383bb05a)[(0, $0f693df3e668ea5c$export$50a7e2d9fa5ce460) ? 1 : 0] = this.readInt32(offset + 4);\n        return (0, $0f693df3e668ea5c$export$76f82835c9736f87)[0];\n    }\n    writeInt8(offset, value) {\n        this.bytes_[offset] = value;\n    }\n    writeUint8(offset, value) {\n        this.bytes_[offset] = value;\n    }\n    writeInt16(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n    }\n    writeUint16(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n    }\n    writeInt32(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n        this.bytes_[offset + 2] = value >> 16;\n        this.bytes_[offset + 3] = value >> 24;\n    }\n    writeUint32(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n        this.bytes_[offset + 2] = value >> 16;\n        this.bytes_[offset + 3] = value >> 24;\n    }\n    writeInt64(offset, value) {\n        this.writeInt32(offset, value.low);\n        this.writeInt32(offset + 4, value.high);\n    }\n    writeUint64(offset, value) {\n        this.writeUint32(offset, value.low);\n        this.writeUint32(offset + 4, value.high);\n    }\n    writeFloat32(offset, value) {\n        (0, $0f693df3e668ea5c$export$1a4bac2aea11f30e)[0] = value;\n        this.writeInt32(offset, (0, $0f693df3e668ea5c$export$1d95835383bb05a)[0]);\n    }\n    writeFloat64(offset, value) {\n        (0, $0f693df3e668ea5c$export$76f82835c9736f87)[0] = value;\n        this.writeInt32(offset, (0, $0f693df3e668ea5c$export$1d95835383bb05a)[(0, $0f693df3e668ea5c$export$50a7e2d9fa5ce460) ? 0 : 1]);\n        this.writeInt32(offset + 4, (0, $0f693df3e668ea5c$export$1d95835383bb05a)[(0, $0f693df3e668ea5c$export$50a7e2d9fa5ce460) ? 1 : 0]);\n    }\n    /**\r\n     * Return the file identifier.   Behavior is undefined for FlatBuffers whose\r\n     * schema does not include a file_identifier (likely points at padding or the\r\n     * start of a the root vtable).\r\n     */ getBufferIdentifier() {\n        if (this.bytes_.length < this.position_ + (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91) + (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e)) throw new Error(\"FlatBuffers: ByteBuffer is too short to contain an identifier.\");\n        let result = \"\";\n        for(let i = 0; i < (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e); i++)result += String.fromCharCode(this.readInt8(this.position_ + (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91) + i));\n        return result;\n    }\n    /**\r\n     * Look up a field in the vtable, return an offset into the object, or 0 if the\r\n     * field is not present.\r\n     */ __offset(bb_pos, vtable_offset) {\n        const vtable = bb_pos - this.readInt32(bb_pos);\n        return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n    }\n    /**\r\n     * Initialize any Table-derived type to point to the union at the given offset.\r\n     */ __union(t, offset) {\n        t.bb_pos = offset + this.readInt32(offset);\n        t.bb = this;\n        return t;\n    }\n    /**\r\n     * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\r\n     * This allocates a new string and converts to wide chars upon each access.\r\n     *\r\n     * To avoid the conversion to UTF-16, pass Encoding.UTF8_BYTES as\r\n     * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\r\n     * and from UTF-16 when the data will just be packaged back up in another\r\n     * FlatBuffer later on.\r\n     *\r\n     * @param offset\r\n     * @param opt_encoding Defaults to UTF16_STRING\r\n     */ __string(offset, opt_encoding) {\n        offset += this.readInt32(offset);\n        const length = this.readInt32(offset);\n        let result = \"\";\n        let i = 0;\n        offset += (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91);\n        if (opt_encoding === (0, $e1f67f0adda0ed3e$export$72958ca7c468c63b).UTF8_BYTES) return this.bytes_.subarray(offset, offset + length);\n        while(i < length){\n            let codePoint;\n            // Decode UTF-8\n            const a = this.readUint8(offset + i++);\n            if (a < 0xC0) codePoint = a;\n            else {\n                const b = this.readUint8(offset + i++);\n                if (a < 0xE0) codePoint = (a & 0x1F) << 6 | b & 0x3F;\n                else {\n                    const c = this.readUint8(offset + i++);\n                    if (a < 0xF0) codePoint = (a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F;\n                    else {\n                        const d = this.readUint8(offset + i++);\n                        codePoint = (a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F;\n                    }\n                }\n            }\n            // Encode UTF-16\n            if (codePoint < 0x10000) result += String.fromCharCode(codePoint);\n            else {\n                codePoint -= 0x10000;\n                result += String.fromCharCode((codePoint >> 10) + 0xD800, (codePoint & 1023) + 0xDC00);\n            }\n        }\n        return result;\n    }\n    /**\r\n     * Handle unions that can contain string as its member, if a Table-derived type then initialize it,\r\n     * if a string then return a new one\r\n     *\r\n     * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this\r\n     * makes the behaviour of __union_with_string different compared to __union\r\n     */ __union_with_string(o, offset) {\n        if (typeof o === \"string\") return this.__string(offset);\n        return this.__union(o, offset);\n    }\n    /**\r\n     * Retrieve the relative offset stored at \"offset\"\r\n     */ __indirect(offset) {\n        return offset + this.readInt32(offset);\n    }\n    /**\r\n     * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\r\n     */ __vector(offset) {\n        return offset + this.readInt32(offset) + (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91); // data starts after the length\n    }\n    /**\r\n     * Get the length of a vector whose offset is stored at \"offset\" in this object.\r\n     */ __vector_len(offset) {\n        return this.readInt32(offset + this.readInt32(offset));\n    }\n    __has_identifier(ident) {\n        if (ident.length != (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e)) throw new Error(\"FlatBuffers: file identifier must be length \" + (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e));\n        for(let i = 0; i < (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e); i++){\n            if (ident.charCodeAt(i) != this.readInt8(this.position() + (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91) + i)) return false;\n        }\n        return true;\n    }\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */ createLong(low, high) {\n        return (0, $252e58727f592771$export$12ac1d26449d9c2e).create(low, high);\n    }\n    /**\r\n     * A helper function for generating list for obj api\r\n     */ createScalarList(listAccessor, listLength) {\n        const ret = [];\n        for(let i = 0; i < listLength; ++i)if (listAccessor(i) !== null) ret.push(listAccessor(i));\n        return ret;\n    }\n    /**\r\n     * A helper function for generating list for obj api\r\n     * @param listAccessor function that accepts an index and return data at that index\r\n     * @param listLength listLength\r\n     * @param res result list\r\n     */ createObjList(listAccessor, listLength) {\n        const ret = [];\n        for(let i = 0; i < listLength; ++i){\n            const val = listAccessor(i);\n            if (val !== null) ret.push(val.unpack());\n        }\n        return ret;\n    }\n}\n\n\n\n\nclass $5d9d3e6dae320589$export$f75e4297694ec637 {\n    /**\r\n     * Create a FlatBufferBuilder.\r\n     */ constructor(opt_initial_size){\n        /** Minimum alignment encountered so far. */ this.minalign = 1;\n        /** The vtable for the current table. */ this.vtable = null;\n        /** The amount of fields we're actually using. */ this.vtable_in_use = 0;\n        /** Whether we are currently serializing a table. */ this.isNested = false;\n        /** Starting offset of the current struct/table. */ this.object_start = 0;\n        /** List of offsets of all vtables. */ this.vtables = [];\n        /** For the current vector being built. */ this.vector_num_elems = 0;\n        /** False omits default values from the serialized data */ this.force_defaults = false;\n        this.string_maps = null;\n        let initial_size;\n        if (!opt_initial_size) initial_size = 1024;\n        else initial_size = opt_initial_size;\n        /**\r\n         * @type {ByteBuffer}\r\n         * @private\r\n         */ this.bb = (0, $b791e9664c1babe0$export$b21dcdb2a0c6c467).allocate(initial_size);\n        this.space = initial_size;\n    }\n    clear() {\n        this.bb.clear();\n        this.space = this.bb.capacity();\n        this.minalign = 1;\n        this.vtable = null;\n        this.vtable_in_use = 0;\n        this.isNested = false;\n        this.object_start = 0;\n        this.vtables = [];\n        this.vector_num_elems = 0;\n        this.force_defaults = false;\n        this.string_maps = null;\n    }\n    /**\r\n     * In order to save space, fields that are set to their default value\r\n     * don't get serialized into the buffer. Forcing defaults provides a\r\n     * way to manually disable this optimization.\r\n     *\r\n     * @param forceDefaults true always serializes default values\r\n     */ forceDefaults(forceDefaults) {\n        this.force_defaults = forceDefaults;\n    }\n    /**\r\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\r\n     * called finish(). The actual data starts at the ByteBuffer's current position,\r\n     * not necessarily at 0.\r\n     */ dataBuffer() {\n        return this.bb;\n    }\n    /**\r\n     * Get the bytes representing the FlatBuffer. Only call this after you've\r\n     * called finish().\r\n     */ asUint8Array() {\n        return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n    }\n    /**\r\n     * Prepare to write an element of `size` after `additional_bytes` have been\r\n     * written, e.g. if you write a string, you need to align such the int length\r\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\r\n     * you need to do is alignment, `additional_bytes` will be 0.\r\n     *\r\n     * @param size This is the of the new element to write\r\n     * @param additional_bytes The padding size\r\n     */ prep(size, additional_bytes) {\n        // Track the biggest thing we've ever aligned to.\n        if (size > this.minalign) this.minalign = size;\n        // Find the amount of alignment needed such that `size` is properly\n        // aligned after `additional_bytes`\n        const align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;\n        // Reallocate the buffer if needed.\n        while(this.space < align_size + size + additional_bytes){\n            const old_buf_size = this.bb.capacity();\n            this.bb = $5d9d3e6dae320589$export$f75e4297694ec637.growByteBuffer(this.bb);\n            this.space += this.bb.capacity() - old_buf_size;\n        }\n        this.pad(align_size);\n    }\n    pad(byte_size) {\n        for(let i = 0; i < byte_size; i++)this.bb.writeInt8(--this.space, 0);\n    }\n    writeInt8(value) {\n        this.bb.writeInt8(this.space -= 1, value);\n    }\n    writeInt16(value) {\n        this.bb.writeInt16(this.space -= 2, value);\n    }\n    writeInt32(value) {\n        this.bb.writeInt32(this.space -= 4, value);\n    }\n    writeInt64(value) {\n        this.bb.writeInt64(this.space -= 8, value);\n    }\n    writeFloat32(value) {\n        this.bb.writeFloat32(this.space -= 4, value);\n    }\n    writeFloat64(value) {\n        this.bb.writeFloat64(this.space -= 8, value);\n    }\n    /**\r\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int8` to add the the buffer.\r\n     */ addInt8(value) {\n        this.prep(1, 0);\n        this.writeInt8(value);\n    }\n    /**\r\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int16` to add the the buffer.\r\n     */ addInt16(value) {\n        this.prep(2, 0);\n        this.writeInt16(value);\n    }\n    /**\r\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int32` to add the the buffer.\r\n     */ addInt32(value) {\n        this.prep(4, 0);\n        this.writeInt32(value);\n    }\n    /**\r\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int64` to add the the buffer.\r\n     */ addInt64(value) {\n        this.prep(8, 0);\n        this.writeInt64(value);\n    }\n    /**\r\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float32` to add the the buffer.\r\n     */ addFloat32(value) {\n        this.prep(4, 0);\n        this.writeFloat32(value);\n    }\n    /**\r\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float64` to add the the buffer.\r\n     */ addFloat64(value) {\n        this.prep(8, 0);\n        this.writeFloat64(value);\n    }\n    addFieldInt8(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt8(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt16(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt16(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt32(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt32(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt64(voffset, value, defaultValue) {\n        if (this.force_defaults || !value.equals(defaultValue)) {\n            this.addInt64(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldFloat32(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addFloat32(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldFloat64(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addFloat64(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldOffset(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addOffset(value);\n            this.slot(voffset);\n        }\n    }\n    /**\r\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\r\n     */ addFieldStruct(voffset, value, defaultValue) {\n        if (value != defaultValue) {\n            this.nested(value);\n            this.slot(voffset);\n        }\n    }\n    /**\r\n     * Structures are always stored inline, they need to be created right\r\n     * where they're used.  You'll get this assertion failure if you\r\n     * created it elsewhere.\r\n     */ nested(obj) {\n        if (obj != this.offset()) throw new Error(\"FlatBuffers: struct must be serialized inline.\");\n    }\n    /**\r\n     * Should not be creating any other object, string or vector\r\n     * while an object is being constructed\r\n     */ notNested() {\n        if (this.isNested) throw new Error(\"FlatBuffers: object serialization must not be nested.\");\n    }\n    /**\r\n     * Set the current vtable at `voffset` to the current location in the buffer.\r\n     */ slot(voffset) {\n        if (this.vtable !== null) this.vtable[voffset] = this.offset();\n    }\n    /**\r\n     * @returns Offset relative to the end of the buffer.\r\n     */ offset() {\n        return this.bb.capacity() - this.space;\n    }\n    /**\r\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\r\n     * the end of the new buffer (since we build the buffer backwards).\r\n     *\r\n     * @param bb The current buffer with the existing data\r\n     * @returns A new byte buffer with the old data copied\r\n     * to it. The data is located at the end of the buffer.\r\n     *\r\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\r\n     * it a uint8Array we need to suppress the type check:\r\n     * @suppress {checkTypes}\r\n     */ static growByteBuffer(bb) {\n        const old_buf_size = bb.capacity();\n        // Ensure we don't grow beyond what fits in an int.\n        if (old_buf_size & 0xC0000000) throw new Error(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\");\n        const new_buf_size = old_buf_size << 1;\n        const nbb = (0, $b791e9664c1babe0$export$b21dcdb2a0c6c467).allocate(new_buf_size);\n        nbb.setPosition(new_buf_size - old_buf_size);\n        nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n        return nbb;\n    }\n    /**\r\n     * Adds on offset, relative to where it will be written.\r\n     *\r\n     * @param offset The offset to add.\r\n     */ addOffset(offset) {\n        this.prep((0, $b8849adfb5ff85b9$export$e8e819ef5c027f91), 0); // Ensure alignment is already done.\n        this.writeInt32(this.offset() - offset + (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91));\n    }\n    /**\r\n     * Start encoding a new object in the buffer.  Users will not usually need to\r\n     * call this directly. The FlatBuffers compiler will generate helper methods\r\n     * that call this method internally.\r\n     */ startObject(numfields) {\n        this.notNested();\n        if (this.vtable == null) this.vtable = [];\n        this.vtable_in_use = numfields;\n        for(let i = 0; i < numfields; i++)this.vtable[i] = 0; // This will push additional elements as needed\n        this.isNested = true;\n        this.object_start = this.offset();\n    }\n    /**\r\n     * Finish off writing the object that is under construction.\r\n     *\r\n     * @returns The offset to the object inside `dataBuffer`\r\n     */ endObject() {\n        if (this.vtable == null || !this.isNested) throw new Error(\"FlatBuffers: endObject called without startObject\");\n        this.addInt32(0);\n        const vtableloc = this.offset();\n        // Trim trailing zeroes.\n        let i = this.vtable_in_use - 1;\n        // eslint-disable-next-line no-empty\n        for(; i >= 0 && this.vtable[i] == 0; i--);\n        const trimmed_size = i + 1;\n        // Write out the current vtable.\n        for(; i >= 0; i--)// Offset relative to the start of the table.\n        this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n        const standard_fields = 2; // The fields below:\n        this.addInt16(vtableloc - this.object_start);\n        const len = (trimmed_size + standard_fields) * (0, $b8849adfb5ff85b9$export$f56c4803c80fed3c);\n        this.addInt16(len);\n        // Search for an existing vtable that matches the current one.\n        let existing_vtable = 0;\n        const vt1 = this.space;\n        outer_loop: for(i = 0; i < this.vtables.length; i++){\n            const vt2 = this.bb.capacity() - this.vtables[i];\n            if (len == this.bb.readInt16(vt2)) {\n                for(let j = (0, $b8849adfb5ff85b9$export$f56c4803c80fed3c); j < len; j += (0, $b8849adfb5ff85b9$export$f56c4803c80fed3c)){\n                    if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) continue outer_loop;\n                }\n                existing_vtable = this.vtables[i];\n                break;\n            }\n        }\n        if (existing_vtable) {\n            // Found a match:\n            // Remove the current vtable.\n            this.space = this.bb.capacity() - vtableloc;\n            // Point table to existing vtable.\n            this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n        } else {\n            // No match:\n            // Add the location of the current vtable to the list of vtables.\n            this.vtables.push(this.offset());\n            // Point table to current vtable.\n            this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n        }\n        this.isNested = false;\n        return vtableloc;\n    }\n    /**\r\n     * Finalize a buffer, poiting to the given `root_table`.\r\n     */ finish(root_table, opt_file_identifier, opt_size_prefix) {\n        const size_prefix = opt_size_prefix ? (0, $b8849adfb5ff85b9$export$8b4bad21195989e3) : 0;\n        if (opt_file_identifier) {\n            const file_identifier = opt_file_identifier;\n            this.prep(this.minalign, (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91) + (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e) + size_prefix);\n            if (file_identifier.length != (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e)) throw new Error(\"FlatBuffers: file identifier must be length \" + (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e));\n            for(let i = (0, $b8849adfb5ff85b9$export$74b03f0cc21be82e) - 1; i >= 0; i--)this.writeInt8(file_identifier.charCodeAt(i));\n        }\n        this.prep(this.minalign, (0, $b8849adfb5ff85b9$export$e8e819ef5c027f91) + size_prefix);\n        this.addOffset(root_table);\n        if (size_prefix) this.addInt32(this.bb.capacity() - this.space);\n        this.bb.setPosition(this.space);\n    }\n    /**\r\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\r\n     */ finishSizePrefixed(root_table, opt_file_identifier) {\n        this.finish(root_table, opt_file_identifier, true);\n    }\n    /**\r\n     * This checks a required field has been set in a given table that has\r\n     * just been constructed.\r\n     */ requiredField(table, field) {\n        const table_start = this.bb.capacity() - table;\n        const vtable_start = table_start - this.bb.readInt32(table_start);\n        const ok = this.bb.readInt16(vtable_start + field) != 0;\n        // If this fails, the caller will show what field needs to be set.\n        if (!ok) throw new Error(\"FlatBuffers: field \" + field + \" must be set\");\n    }\n    /**\r\n     * Start a new array/vector of objects.  Users usually will not call\r\n     * this directly. The FlatBuffers compiler will create a start/end\r\n     * method for vector types in generated code.\r\n     *\r\n     * @param elem_size The size of each element in the array\r\n     * @param num_elems The number of elements in the array\r\n     * @param alignment The alignment of the array\r\n     */ startVector(elem_size, num_elems, alignment) {\n        this.notNested();\n        this.vector_num_elems = num_elems;\n        this.prep((0, $b8849adfb5ff85b9$export$e8e819ef5c027f91), elem_size * num_elems);\n        this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n    }\n    /**\r\n     * Finish off the creation of an array and all its elements. The array must be\r\n     * created with `startVector`.\r\n     *\r\n     * @returns The offset at which the newly created array\r\n     * starts.\r\n     */ endVector() {\n        this.writeInt32(this.vector_num_elems);\n        return this.offset();\n    }\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has\r\n     * already been seen, we return the offset of the already written string\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */ createSharedString(s) {\n        if (!s) return 0;\n        if (!this.string_maps) this.string_maps = new Map();\n        if (this.string_maps.has(s)) return this.string_maps.get(s);\n        const offset = this.createString(s);\n        this.string_maps.set(s, offset);\n        return offset;\n    }\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\r\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */ createString(s) {\n        if (!s) return 0;\n        let utf8;\n        if (s instanceof Uint8Array) utf8 = s;\n        else {\n            utf8 = [];\n            let i = 0;\n            while(i < s.length){\n                let codePoint;\n                // Decode UTF-16\n                const a = s.charCodeAt(i++);\n                if (a < 0xD800 || a >= 0xDC00) codePoint = a;\n                else {\n                    const b = s.charCodeAt(i++);\n                    codePoint = (a << 10) + b + -56613888;\n                }\n                // Encode UTF-8\n                if (codePoint < 0x80) utf8.push(codePoint);\n                else {\n                    if (codePoint < 0x800) utf8.push(codePoint >> 6 & 0x1F | 0xC0);\n                    else {\n                        if (codePoint < 0x10000) utf8.push(codePoint >> 12 & 0x0F | 0xE0);\n                        else utf8.push(codePoint >> 18 & 0x07 | 0xF0, codePoint >> 12 & 0x3F | 0x80);\n                        utf8.push(codePoint >> 6 & 0x3F | 0x80);\n                    }\n                    utf8.push(codePoint & 0x3F | 0x80);\n                }\n            }\n        }\n        this.addInt8(0);\n        this.startVector(1, utf8.length, 1);\n        this.bb.setPosition(this.space -= utf8.length);\n        for(let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++)bytes[offset++] = utf8[i];\n        return this.endVector();\n    }\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */ createLong(low, high) {\n        return (0, $252e58727f592771$export$12ac1d26449d9c2e).create(low, high);\n    }\n    /**\r\n     * A helper function to pack an object\r\n     *\r\n     * @returns offset of obj\r\n     */ createObjectOffset(obj) {\n        if (obj === null) return 0;\n        if (typeof obj === \"string\") return this.createString(obj);\n        else return obj.pack(this);\n    }\n    /**\r\n     * A helper function to pack a list of object\r\n     *\r\n     * @returns list of offsets of each non null object\r\n     */ createObjectOffsetList(list) {\n        const ret = [];\n        for(let i = 0; i < list.length; ++i){\n            const val = list[i];\n            if (val !== null) ret.push(this.createObjectOffset(val));\n            else throw new Error(\"FlatBuffers: Argument for createObjectOffsetList cannot contain null.\");\n        }\n        return ret;\n    }\n    createStructOffsetList(list, startFunc) {\n        startFunc(this, list.length);\n        this.createObjectOffsetList(list);\n        return this.endVector();\n    }\n}\n\n\n\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $60e61be83537f0a4$export$12b3cc2522c3bba5 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsKeyValue(bb, obj) {\n        return (obj || new $60e61be83537f0a4$export$12b3cc2522c3bba5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsKeyValue(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $60e61be83537f0a4$export$12b3cc2522c3bba5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    key(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    value(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startKeyValue(builder) {\n        builder.startObject(2);\n    }\n    static addKey(builder, keyOffset) {\n        builder.addFieldOffset(0, keyOffset, 0);\n    }\n    static addValue(builder, valueOffset) {\n        builder.addFieldOffset(1, valueOffset, 0);\n    }\n    static endKeyValue(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createKeyValue(builder, keyOffset, valueOffset) {\n        $60e61be83537f0a4$export$12b3cc2522c3bba5.startKeyValue(builder);\n        $60e61be83537f0a4$export$12b3cc2522c3bba5.addKey(builder, keyOffset);\n        $60e61be83537f0a4$export$12b3cc2522c3bba5.addValue(builder, valueOffset);\n        return $60e61be83537f0a4$export$12b3cc2522c3bba5.endKeyValue(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * Logical types, vector layouts, and schemas\n * Format Version History.\n * Version 1.0 - Forward and backwards compatibility guaranteed.\n * Version 1.1 - Add Decimal256 (No format release).\n * Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO\n */ var $bf29d10dcc5aa496$export$12ea6169eb5318ff;\n(function(MetadataVersion) {\n    /**\n     * 0.1.0 (October 2016).\n     */ MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */ MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */ MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */ MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */ MetadataVersion[MetadataVersion[\"V5\"] = 4] = \"V5\";\n})($bf29d10dcc5aa496$export$12ea6169eb5318ff || ($bf29d10dcc5aa496$export$12ea6169eb5318ff = {}));\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n */ var $302f8f848493eb05$export$c590ef2020908539;\n(function(Endianness) {\n    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n})($302f8f848493eb05$export$c590ef2020908539 || ($302f8f848493eb05$export$c590ef2020908539 = {}));\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n * Maintained for forwards compatibility, in the future\n * Dictionaries might be explicit maps between integers and values\n * allowing for non-contiguous index values\n */ var $5858391da6778b56$export$a3a4dc35292f3fd6;\n(function(DictionaryKind) {\n    DictionaryKind[DictionaryKind[\"DenseArray\"] = 0] = \"DenseArray\";\n})($5858391da6778b56$export$a3a4dc35292f3fd6 || ($5858391da6778b56$export$a3a4dc35292f3fd6 = {}));\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $fbe95b7d2bf7fb98$export$fdd676b64b72b00 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsInt(bb, obj) {\n        return (obj || new $fbe95b7d2bf7fb98$export$fdd676b64b72b00()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsInt(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $fbe95b7d2bf7fb98$export$fdd676b64b72b00()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    isSigned() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startInt(builder) {\n        builder.startObject(2);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(0, bitWidth, 0);\n    }\n    static addIsSigned(builder, isSigned) {\n        builder.addFieldInt8(1, +isSigned, 0);\n    }\n    static endInt(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createInt(builder, bitWidth, isSigned) {\n        $fbe95b7d2bf7fb98$export$fdd676b64b72b00.startInt(builder);\n        $fbe95b7d2bf7fb98$export$fdd676b64b72b00.addBitWidth(builder, bitWidth);\n        $fbe95b7d2bf7fb98$export$fdd676b64b72b00.addIsSigned(builder, isSigned);\n        return $fbe95b7d2bf7fb98$export$fdd676b64b72b00.endInt(builder);\n    }\n}\n\n\nclass $16a40d7e684a12f1$export$57d09fbdc0927e09 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryEncoding(bb, obj) {\n        return (obj || new $16a40d7e684a12f1$export$57d09fbdc0927e09()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryEncoding(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $16a40d7e684a12f1$export$57d09fbdc0927e09()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     */ id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * The dictionary indices are constrained to be non-negative integers. If\n     * this field is null, the indices must be signed int32. To maximize\n     * cross-language compatibility and performance, implementations are\n     * recommended to prefer signed integer types over unsigned integer types\n     * and to avoid uint64 indices unless they are required by an application.\n     */ indexType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     */ isOrdered() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    dictionaryKind() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $5858391da6778b56$export$a3a4dc35292f3fd6).DenseArray;\n    }\n    static startDictionaryEncoding(builder) {\n        builder.startObject(4);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n    static addIndexType(builder, indexTypeOffset) {\n        builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n    static addIsOrdered(builder, isOrdered) {\n        builder.addFieldInt8(2, +isOrdered, 0);\n    }\n    static addDictionaryKind(builder, dictionaryKind) {\n        builder.addFieldInt16(3, dictionaryKind, (0, $5858391da6778b56$export$a3a4dc35292f3fd6).DenseArray);\n    }\n    static endDictionaryEncoding(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $94737fb90c929e48$export$dbada097a9bd1de9 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBinary(bb, obj) {\n        return (obj || new $94737fb90c929e48$export$dbada097a9bd1de9()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBinary(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $94737fb90c929e48$export$dbada097a9bd1de9()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startBinary(builder) {\n        builder.startObject(0);\n    }\n    static endBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBinary(builder) {\n        $94737fb90c929e48$export$dbada097a9bd1de9.startBinary(builder);\n        return $94737fb90c929e48$export$dbada097a9bd1de9.endBinary(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $7115a99830a05127$export$6e6298e1abe0d5b {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBool(bb, obj) {\n        return (obj || new $7115a99830a05127$export$6e6298e1abe0d5b()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBool(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $7115a99830a05127$export$6e6298e1abe0d5b()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startBool(builder) {\n        builder.startObject(0);\n    }\n    static endBool(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBool(builder) {\n        $7115a99830a05127$export$6e6298e1abe0d5b.startBool(builder);\n        return $7115a99830a05127$export$6e6298e1abe0d5b.endBool(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $566cfdc0309a83e7$export$b3f55ef7f087e744;\n(function(DateUnit) {\n    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n})($566cfdc0309a83e7$export$b3f55ef7f087e744 || ($566cfdc0309a83e7$export$b3f55ef7f087e744 = {}));\n\n\nclass $7c73ec3dc476ef53$export$6341f9a885713487 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDate(bb, obj) {\n        return (obj || new $7c73ec3dc476ef53$export$6341f9a885713487()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDate(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $7c73ec3dc476ef53$export$6341f9a885713487()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $566cfdc0309a83e7$export$b3f55ef7f087e744).MILLISECOND;\n    }\n    static startDate(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, (0, $566cfdc0309a83e7$export$b3f55ef7f087e744).MILLISECOND);\n    }\n    static endDate(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDate(builder, unit) {\n        $7c73ec3dc476ef53$export$6341f9a885713487.startDate(builder);\n        $7c73ec3dc476ef53$export$6341f9a885713487.addUnit(builder, unit);\n        return $7c73ec3dc476ef53$export$6341f9a885713487.endDate(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $e056555f1b3a6c36$export$95c991896bef8714 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDecimal(bb, obj) {\n        return (obj || new $e056555f1b3a6c36$export$95c991896bef8714()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDecimal(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $e056555f1b3a6c36$export$95c991896bef8714()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Total number of decimal digits\n     */ precision() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of digits after the decimal point \".\"\n     */ scale() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of bits per value. The only accepted widths are 128 and 256.\n     * We use bitWidth for consistency with Int::bitWidth.\n     */ bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;\n    }\n    static startDecimal(builder) {\n        builder.startObject(3);\n    }\n    static addPrecision(builder, precision) {\n        builder.addFieldInt32(0, precision, 0);\n    }\n    static addScale(builder, scale) {\n        builder.addFieldInt32(1, scale, 0);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(2, bitWidth, 128);\n    }\n    static endDecimal(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDecimal(builder, precision, scale, bitWidth) {\n        $e056555f1b3a6c36$export$95c991896bef8714.startDecimal(builder);\n        $e056555f1b3a6c36$export$95c991896bef8714.addPrecision(builder, precision);\n        $e056555f1b3a6c36$export$95c991896bef8714.addScale(builder, scale);\n        $e056555f1b3a6c36$export$95c991896bef8714.addBitWidth(builder, bitWidth);\n        return $e056555f1b3a6c36$export$95c991896bef8714.endDecimal(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $d39c4f9572a45b90$export$d9e59215631231e3;\n(function(TimeUnit) {\n    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n})($d39c4f9572a45b90$export$d9e59215631231e3 || ($d39c4f9572a45b90$export$d9e59215631231e3 = {}));\n\n\nclass $cb0d6c526adad1dc$export$3b11bc38611c5941 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDuration(bb, obj) {\n        return (obj || new $cb0d6c526adad1dc$export$3b11bc38611c5941()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDuration(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $cb0d6c526adad1dc$export$3b11bc38611c5941()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $d39c4f9572a45b90$export$d9e59215631231e3).MILLISECOND;\n    }\n    static startDuration(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, (0, $d39c4f9572a45b90$export$d9e59215631231e3).MILLISECOND);\n    }\n    static endDuration(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDuration(builder, unit) {\n        $cb0d6c526adad1dc$export$3b11bc38611c5941.startDuration(builder);\n        $cb0d6c526adad1dc$export$3b11bc38611c5941.addUnit(builder, unit);\n        return $cb0d6c526adad1dc$export$3b11bc38611c5941.endDuration(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $b20e8c514d226bfe$export$acd1628a1dd918f2 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFixedSizeBinary(bb, obj) {\n        return (obj || new $b20e8c514d226bfe$export$acd1628a1dd918f2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFixedSizeBinary(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $b20e8c514d226bfe$export$acd1628a1dd918f2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Number of bytes per value\n     */ byteWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    static startFixedSizeBinary(builder) {\n        builder.startObject(1);\n    }\n    static addByteWidth(builder, byteWidth) {\n        builder.addFieldInt32(0, byteWidth, 0);\n    }\n    static endFixedSizeBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFixedSizeBinary(builder, byteWidth) {\n        $b20e8c514d226bfe$export$acd1628a1dd918f2.startFixedSizeBinary(builder);\n        $b20e8c514d226bfe$export$acd1628a1dd918f2.addByteWidth(builder, byteWidth);\n        return $b20e8c514d226bfe$export$acd1628a1dd918f2.endFixedSizeBinary(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $c5dec885bac02404$export$ae9e55e1d8a2f4b7 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFixedSizeList(bb, obj) {\n        return (obj || new $c5dec885bac02404$export$ae9e55e1d8a2f4b7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFixedSizeList(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $c5dec885bac02404$export$ae9e55e1d8a2f4b7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Number of list items per value\n     */ listSize() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    static startFixedSizeList(builder) {\n        builder.startObject(1);\n    }\n    static addListSize(builder, listSize) {\n        builder.addFieldInt32(0, listSize, 0);\n    }\n    static endFixedSizeList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFixedSizeList(builder, listSize) {\n        $c5dec885bac02404$export$ae9e55e1d8a2f4b7.startFixedSizeList(builder);\n        $c5dec885bac02404$export$ae9e55e1d8a2f4b7.addListSize(builder, listSize);\n        return $c5dec885bac02404$export$ae9e55e1d8a2f4b7.endFixedSizeList(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $158ee7f128ddf007$export$be201676156f3e60;\n(function(Precision) {\n    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n})($158ee7f128ddf007$export$be201676156f3e60 || ($158ee7f128ddf007$export$be201676156f3e60 = {}));\n\n\nclass $8b8f66b318af7438$export$257b1589cbfd46ce {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFloatingPoint(bb, obj) {\n        return (obj || new $8b8f66b318af7438$export$257b1589cbfd46ce()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFloatingPoint(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $8b8f66b318af7438$export$257b1589cbfd46ce()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    precision() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $158ee7f128ddf007$export$be201676156f3e60).HALF;\n    }\n    static startFloatingPoint(builder) {\n        builder.startObject(1);\n    }\n    static addPrecision(builder, precision) {\n        builder.addFieldInt16(0, precision, (0, $158ee7f128ddf007$export$be201676156f3e60).HALF);\n    }\n    static endFloatingPoint(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFloatingPoint(builder, precision) {\n        $8b8f66b318af7438$export$257b1589cbfd46ce.startFloatingPoint(builder);\n        $8b8f66b318af7438$export$257b1589cbfd46ce.addPrecision(builder, precision);\n        return $8b8f66b318af7438$export$257b1589cbfd46ce.endFloatingPoint(builder);\n    }\n}\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $3be20a208af938f2$export$dd27fec05eba03b;\n(function(IntervalUnit) {\n    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n    IntervalUnit[IntervalUnit[\"MONTH_DAY_NANO\"] = 2] = \"MONTH_DAY_NANO\";\n})($3be20a208af938f2$export$dd27fec05eba03b || ($3be20a208af938f2$export$dd27fec05eba03b = {}));\n\n\nclass $67dfcdbd6df72b46$export$e659c2681d58d45b {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsInterval(bb, obj) {\n        return (obj || new $67dfcdbd6df72b46$export$e659c2681d58d45b()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsInterval(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $67dfcdbd6df72b46$export$e659c2681d58d45b()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $3be20a208af938f2$export$dd27fec05eba03b).YEAR_MONTH;\n    }\n    static startInterval(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, (0, $3be20a208af938f2$export$dd27fec05eba03b).YEAR_MONTH);\n    }\n    static endInterval(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createInterval(builder, unit) {\n        $67dfcdbd6df72b46$export$e659c2681d58d45b.startInterval(builder);\n        $67dfcdbd6df72b46$export$e659c2681d58d45b.addUnit(builder, unit);\n        return $67dfcdbd6df72b46$export$e659c2681d58d45b.endInterval(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $a12e6adb97868564$export$a54716498bc29389 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeBinary(bb, obj) {\n        return (obj || new $a12e6adb97868564$export$a54716498bc29389()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeBinary(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $a12e6adb97868564$export$a54716498bc29389()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeBinary(builder) {\n        builder.startObject(0);\n    }\n    static endLargeBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeBinary(builder) {\n        $a12e6adb97868564$export$a54716498bc29389.startLargeBinary(builder);\n        return $a12e6adb97868564$export$a54716498bc29389.endLargeBinary(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $2ec5c327506b0269$export$1ac049f1b1535d22 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeList(bb, obj) {\n        return (obj || new $2ec5c327506b0269$export$1ac049f1b1535d22()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeList(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $2ec5c327506b0269$export$1ac049f1b1535d22()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeList(builder) {\n        builder.startObject(0);\n    }\n    static endLargeList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeList(builder) {\n        $2ec5c327506b0269$export$1ac049f1b1535d22.startLargeList(builder);\n        return $2ec5c327506b0269$export$1ac049f1b1535d22.endLargeList(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $88f6b565a51a7645$export$b56689ab763a764 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeUtf8(bb, obj) {\n        return (obj || new $88f6b565a51a7645$export$b56689ab763a764()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeUtf8(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $88f6b565a51a7645$export$b56689ab763a764()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeUtf8(builder) {\n        builder.startObject(0);\n    }\n    static endLargeUtf8(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeUtf8(builder) {\n        $88f6b565a51a7645$export$b56689ab763a764.startLargeUtf8(builder);\n        return $88f6b565a51a7645$export$b56689ab763a764.endLargeUtf8(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $318f60c1e90e3c35$export$54c2e3dc7acea9f5 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsList(bb, obj) {\n        return (obj || new $318f60c1e90e3c35$export$54c2e3dc7acea9f5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsList(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $318f60c1e90e3c35$export$54c2e3dc7acea9f5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startList(builder) {\n        builder.startObject(0);\n    }\n    static endList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createList(builder) {\n        $318f60c1e90e3c35$export$54c2e3dc7acea9f5.startList(builder);\n        return $318f60c1e90e3c35$export$54c2e3dc7acea9f5.endList(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $6e1a040cdf3db503$export$a5c7b93649eaf8f8 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsMap(bb, obj) {\n        return (obj || new $6e1a040cdf3db503$export$a5c7b93649eaf8f8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsMap(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $6e1a040cdf3db503$export$a5c7b93649eaf8f8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Set to true if the keys within each value are sorted\n     */ keysSorted() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startMap(builder) {\n        builder.startObject(1);\n    }\n    static addKeysSorted(builder, keysSorted) {\n        builder.addFieldInt8(0, +keysSorted, 0);\n    }\n    static endMap(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createMap(builder, keysSorted) {\n        $6e1a040cdf3db503$export$a5c7b93649eaf8f8.startMap(builder);\n        $6e1a040cdf3db503$export$a5c7b93649eaf8f8.addKeysSorted(builder, keysSorted);\n        return $6e1a040cdf3db503$export$a5c7b93649eaf8f8.endMap(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $9da36a504a0f9170$export$26c9c3a80cd996ae {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsNull(bb, obj) {\n        return (obj || new $9da36a504a0f9170$export$26c9c3a80cd996ae()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsNull(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $9da36a504a0f9170$export$26c9c3a80cd996ae()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startNull(builder) {\n        builder.startObject(0);\n    }\n    static endNull(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createNull(builder) {\n        $9da36a504a0f9170$export$26c9c3a80cd996ae.startNull(builder);\n        return $9da36a504a0f9170$export$26c9c3a80cd996ae.endNull(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $958f401a3d4efa97$export$3b43426ee282bc31 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsStruct_(bb, obj) {\n        return (obj || new $958f401a3d4efa97$export$3b43426ee282bc31()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsStruct_(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $958f401a3d4efa97$export$3b43426ee282bc31()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startStruct_(builder) {\n        builder.startObject(0);\n    }\n    static endStruct_(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createStruct_(builder) {\n        $958f401a3d4efa97$export$3b43426ee282bc31.startStruct_(builder);\n        return $958f401a3d4efa97$export$3b43426ee282bc31.endStruct_(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\nclass $2410d33bb612780a$export$680ea196effce5f {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTime(bb, obj) {\n        return (obj || new $2410d33bb612780a$export$680ea196effce5f()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTime(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $2410d33bb612780a$export$680ea196effce5f()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $d39c4f9572a45b90$export$d9e59215631231e3).MILLISECOND;\n    }\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n    static startTime(builder) {\n        builder.startObject(2);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, (0, $d39c4f9572a45b90$export$d9e59215631231e3).MILLISECOND);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(1, bitWidth, 32);\n    }\n    static endTime(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTime(builder, unit, bitWidth) {\n        $2410d33bb612780a$export$680ea196effce5f.startTime(builder);\n        $2410d33bb612780a$export$680ea196effce5f.addUnit(builder, unit);\n        $2410d33bb612780a$export$680ea196effce5f.addBitWidth(builder, bitWidth);\n        return $2410d33bb612780a$export$680ea196effce5f.endTime(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\nclass $b149de23afe7bc26$export$d9bcbd5e1ff81430 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTimestamp(bb, obj) {\n        return (obj || new $b149de23afe7bc26$export$d9bcbd5e1ff81430()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTimestamp(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $b149de23afe7bc26$export$d9bcbd5e1ff81430()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $d39c4f9572a45b90$export$d9e59215631231e3).SECOND;\n    }\n    timezone(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startTimestamp(builder) {\n        builder.startObject(2);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, (0, $d39c4f9572a45b90$export$d9e59215631231e3).SECOND);\n    }\n    static addTimezone(builder, timezoneOffset) {\n        builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n    static endTimestamp(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTimestamp(builder, unit, timezoneOffset) {\n        $b149de23afe7bc26$export$d9bcbd5e1ff81430.startTimestamp(builder);\n        $b149de23afe7bc26$export$d9bcbd5e1ff81430.addUnit(builder, unit);\n        $b149de23afe7bc26$export$d9bcbd5e1ff81430.addTimezone(builder, timezoneOffset);\n        return $b149de23afe7bc26$export$d9bcbd5e1ff81430.endTimestamp(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $3863307d08abbf0f$export$a82fae803f3856de;\n(function(UnionMode) {\n    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n})($3863307d08abbf0f$export$a82fae803f3856de || ($3863307d08abbf0f$export$a82fae803f3856de = {}));\n\n\nclass $970e60b352bbdc20$export$6cbb4f8fa0c4c986 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsUnion(bb, obj) {\n        return (obj || new $970e60b352bbdc20$export$6cbb4f8fa0c4c986()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsUnion(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $970e60b352bbdc20$export$6cbb4f8fa0c4c986()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    mode() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $3863307d08abbf0f$export$a82fae803f3856de).Sparse;\n    }\n    typeIds(index) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n    typeIdsLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    typeIdsArray() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    static startUnion(builder) {\n        builder.startObject(2);\n    }\n    static addMode(builder, mode) {\n        builder.addFieldInt16(0, mode, (0, $3863307d08abbf0f$export$a82fae803f3856de).Sparse);\n    }\n    static addTypeIds(builder, typeIdsOffset) {\n        builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n    static createTypeIdsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addInt32(data[i]);\n        return builder.endVector();\n    }\n    static startTypeIdsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endUnion(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createUnion(builder, mode, typeIdsOffset) {\n        $970e60b352bbdc20$export$6cbb4f8fa0c4c986.startUnion(builder);\n        $970e60b352bbdc20$export$6cbb4f8fa0c4c986.addMode(builder, mode);\n        $970e60b352bbdc20$export$6cbb4f8fa0c4c986.addTypeIds(builder, typeIdsOffset);\n        return $970e60b352bbdc20$export$6cbb4f8fa0c4c986.endUnion(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $98ef8af8e5ac0550$export$3ee43a596719d7b5 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsUtf8(bb, obj) {\n        return (obj || new $98ef8af8e5ac0550$export$3ee43a596719d7b5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsUtf8(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $98ef8af8e5ac0550$export$3ee43a596719d7b5()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startUtf8(builder) {\n        builder.startObject(0);\n    }\n    static endUtf8(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createUtf8(builder) {\n        $98ef8af8e5ac0550$export$3ee43a596719d7b5.startUtf8(builder);\n        return $98ef8af8e5ac0550$export$3ee43a596719d7b5.endUtf8(builder);\n    }\n}\n\n\nvar $01b9561b6ed8e117$export$92738401e1603719;\n(function(Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[Type[\"Duration\"] = 18] = \"Duration\";\n    Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n    Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n    Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n})($01b9561b6ed8e117$export$92738401e1603719 || ($01b9561b6ed8e117$export$92738401e1603719 = {}));\nfunction $01b9561b6ed8e117$export$34c562fc1452987(type, accessor) {\n    switch($01b9561b6ed8e117$export$92738401e1603719[type]){\n        case \"NONE\":\n            return null;\n        case \"Null\":\n            return accessor(new (0, $9da36a504a0f9170$export$26c9c3a80cd996ae)());\n        case \"Int\":\n            return accessor(new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)());\n        case \"FloatingPoint\":\n            return accessor(new (0, $8b8f66b318af7438$export$257b1589cbfd46ce)());\n        case \"Binary\":\n            return accessor(new (0, $94737fb90c929e48$export$dbada097a9bd1de9)());\n        case \"Utf8\":\n            return accessor(new (0, $98ef8af8e5ac0550$export$3ee43a596719d7b5)());\n        case \"Bool\":\n            return accessor(new (0, $7115a99830a05127$export$6e6298e1abe0d5b)());\n        case \"Decimal\":\n            return accessor(new (0, $e056555f1b3a6c36$export$95c991896bef8714)());\n        case \"Date\":\n            return accessor(new (0, $7c73ec3dc476ef53$export$6341f9a885713487)());\n        case \"Time\":\n            return accessor(new (0, $2410d33bb612780a$export$680ea196effce5f)());\n        case \"Timestamp\":\n            return accessor(new (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430)());\n        case \"Interval\":\n            return accessor(new (0, $67dfcdbd6df72b46$export$e659c2681d58d45b)());\n        case \"List\":\n            return accessor(new (0, $318f60c1e90e3c35$export$54c2e3dc7acea9f5)());\n        case \"Struct_\":\n            return accessor(new (0, $958f401a3d4efa97$export$3b43426ee282bc31)());\n        case \"Union\":\n            return accessor(new (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986)());\n        case \"FixedSizeBinary\":\n            return accessor(new (0, $b20e8c514d226bfe$export$acd1628a1dd918f2)());\n        case \"FixedSizeList\":\n            return accessor(new (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7)());\n        case \"Map\":\n            return accessor(new (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8)());\n        case \"Duration\":\n            return accessor(new (0, $cb0d6c526adad1dc$export$3b11bc38611c5941)());\n        case \"LargeBinary\":\n            return accessor(new (0, $a12e6adb97868564$export$a54716498bc29389)());\n        case \"LargeUtf8\":\n            return accessor(new (0, $88f6b565a51a7645$export$b56689ab763a764)());\n        case \"LargeList\":\n            return accessor(new (0, $2ec5c327506b0269$export$1ac049f1b1535d22)());\n        default:\n            return null;\n    }\n}\nfunction $01b9561b6ed8e117$export$2640a18030c94252(type, accessor, index) {\n    switch($01b9561b6ed8e117$export$92738401e1603719[type]){\n        case \"NONE\":\n            return null;\n        case \"Null\":\n            return accessor(index, new (0, $9da36a504a0f9170$export$26c9c3a80cd996ae)());\n        case \"Int\":\n            return accessor(index, new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)());\n        case \"FloatingPoint\":\n            return accessor(index, new (0, $8b8f66b318af7438$export$257b1589cbfd46ce)());\n        case \"Binary\":\n            return accessor(index, new (0, $94737fb90c929e48$export$dbada097a9bd1de9)());\n        case \"Utf8\":\n            return accessor(index, new (0, $98ef8af8e5ac0550$export$3ee43a596719d7b5)());\n        case \"Bool\":\n            return accessor(index, new (0, $7115a99830a05127$export$6e6298e1abe0d5b)());\n        case \"Decimal\":\n            return accessor(index, new (0, $e056555f1b3a6c36$export$95c991896bef8714)());\n        case \"Date\":\n            return accessor(index, new (0, $7c73ec3dc476ef53$export$6341f9a885713487)());\n        case \"Time\":\n            return accessor(index, new (0, $2410d33bb612780a$export$680ea196effce5f)());\n        case \"Timestamp\":\n            return accessor(index, new (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430)());\n        case \"Interval\":\n            return accessor(index, new (0, $67dfcdbd6df72b46$export$e659c2681d58d45b)());\n        case \"List\":\n            return accessor(index, new (0, $318f60c1e90e3c35$export$54c2e3dc7acea9f5)());\n        case \"Struct_\":\n            return accessor(index, new (0, $958f401a3d4efa97$export$3b43426ee282bc31)());\n        case \"Union\":\n            return accessor(index, new (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986)());\n        case \"FixedSizeBinary\":\n            return accessor(index, new (0, $b20e8c514d226bfe$export$acd1628a1dd918f2)());\n        case \"FixedSizeList\":\n            return accessor(index, new (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7)());\n        case \"Map\":\n            return accessor(index, new (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8)());\n        case \"Duration\":\n            return accessor(index, new (0, $cb0d6c526adad1dc$export$3b11bc38611c5941)());\n        case \"LargeBinary\":\n            return accessor(index, new (0, $a12e6adb97868564$export$a54716498bc29389)());\n        case \"LargeUtf8\":\n            return accessor(index, new (0, $88f6b565a51a7645$export$b56689ab763a764)());\n        case \"LargeList\":\n            return accessor(index, new (0, $2ec5c327506b0269$export$1ac049f1b1535d22)());\n        default:\n            return null;\n    }\n}\n\n\nclass $ae377e5d72a755d0$export$a455218a85c89869 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsField(bb, obj) {\n        return (obj || new $ae377e5d72a755d0$export$a455218a85c89869()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsField(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $ae377e5d72a755d0$export$a455218a85c89869()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    name(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    /**\n     * Whether or not this field can contain nulls. Should be true in general.\n     */ nullable() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : (0, $01b9561b6ed8e117$export$92738401e1603719).NONE;\n    }\n    /**\n     * This is the type of the decoded value if the field is dictionary encoded.\n     */ // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * Present only if the field is dictionary encoded.\n     */ dictionary(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new (0, $16a40d7e684a12f1$export$57d09fbdc0927e09)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * children apply only to nested data types like Struct, List and Union. For\n     * primitive types children will have length 0.\n     */ children(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? (obj || new $ae377e5d72a755d0$export$a455218a85c89869()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    childrenLength() {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * User-defined metadata\n     */ customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? (obj || new (0, $60e61be83537f0a4$export$12b3cc2522c3bba5)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startField(builder) {\n        builder.startObject(7);\n    }\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    static addNullable(builder, nullable) {\n        builder.addFieldInt8(1, +nullable, 0);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(2, typeType, (0, $01b9561b6ed8e117$export$92738401e1603719).NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(3, typeOffset, 0);\n    }\n    static addDictionary(builder, dictionaryOffset) {\n        builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n    static addChildren(builder, childrenOffset) {\n        builder.addFieldOffset(5, childrenOffset, 0);\n    }\n    static createChildrenVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startChildrenVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(6, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endField(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n\n\nclass $819543e9b63af107$export$19342e026b58ebb7 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSchema(bb, obj) {\n        return (obj || new $819543e9b63af107$export$19342e026b58ebb7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSchema(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $819543e9b63af107$export$19342e026b58ebb7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     */ endianness() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $302f8f848493eb05$export$c590ef2020908539).Little;\n    }\n    fields(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $ae377e5d72a755d0$export$a455218a85c89869)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    fieldsLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $60e61be83537f0a4$export$12b3cc2522c3bba5)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Features used in the stream/file.\n     */ features(index) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    featuresLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startSchema(builder) {\n        builder.startObject(4);\n    }\n    static addEndianness(builder, endianness) {\n        builder.addFieldInt16(0, endianness, (0, $302f8f848493eb05$export$c590ef2020908539).Little);\n    }\n    static addFields(builder, fieldsOffset) {\n        builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n    static createFieldsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startFieldsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addFeatures(builder, featuresOffset) {\n        builder.addFieldOffset(3, featuresOffset, 0);\n    }\n    static createFeaturesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for(let i = data.length - 1; i >= 0; i--)builder.addInt64(data[i]);\n        return builder.endVector();\n    }\n    static startFeaturesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static endSchema(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishSchemaBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedSchemaBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    static createSchema(builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {\n        $819543e9b63af107$export$19342e026b58ebb7.startSchema(builder);\n        $819543e9b63af107$export$19342e026b58ebb7.addEndianness(builder, endianness);\n        $819543e9b63af107$export$19342e026b58ebb7.addFields(builder, fieldsOffset);\n        $819543e9b63af107$export$19342e026b58ebb7.addCustomMetadata(builder, customMetadataOffset);\n        $819543e9b63af107$export$19342e026b58ebb7.addFeatures(builder, featuresOffset);\n        return $819543e9b63af107$export$19342e026b58ebb7.endSchema(builder);\n    }\n}\n\n\nclass $f9038961808552d6$export$a06f1c675e846f6f {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFooter(bb, obj) {\n        return (obj || new $f9038961808552d6$export$a06f1c675e846f6f()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFooter(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $f9038961808552d6$export$a06f1c675e846f6f()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    version() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $bf29d10dcc5aa496$export$12ea6169eb5318ff).V1;\n    }\n    schema(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $819543e9b63af107$export$19342e026b58ebb7)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    dictionaries(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $55acd062e3b07133$export$d96a8827a60d6b69)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n    dictionariesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    recordBatches(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new (0, $55acd062e3b07133$export$d96a8827a60d6b69)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n    recordBatchesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * User-defined metadata\n     */ customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new (0, $60e61be83537f0a4$export$12b3cc2522c3bba5)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startFooter(builder) {\n        builder.startObject(5);\n    }\n    static addVersion(builder, version) {\n        builder.addFieldInt16(0, version, (0, $bf29d10dcc5aa496$export$12ea6169eb5318ff).V1);\n    }\n    static addSchema(builder, schemaOffset) {\n        builder.addFieldOffset(1, schemaOffset, 0);\n    }\n    static addDictionaries(builder, dictionariesOffset) {\n        builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n    static startDictionariesVector(builder, numElems) {\n        builder.startVector(24, numElems, 8);\n    }\n    static addRecordBatches(builder, recordBatchesOffset) {\n        builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n    static startRecordBatchesVector(builder, numElems) {\n        builder.startVector(24, numElems, 8);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endFooter(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishFooterBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedFooterBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n\n\n\n\n\nvar $407d155e284267e1$var$Long = $252e58727f592771$export$12ac1d26449d9c2e;\nvar $407d155e284267e1$var$Builder = $5d9d3e6dae320589$export$f75e4297694ec637;\nvar $407d155e284267e1$var$ByteBuffer = $b791e9664c1babe0$export$b21dcdb2a0c6c467;\n/** @ignore */ class $407d155e284267e1$export$a06f1c675e846f6f {\n    constructor(schema, version = (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, recordBatches, dictionaryBatches){\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */ static decode(buf) {\n        buf = new $407d155e284267e1$var$ByteBuffer((0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(buf));\n        const footer = (0, $f9038961808552d6$export$a06f1c675e846f6f).getRootAsFooter(buf);\n        const schema = (0, $f3b63445f9bfe464$export$19342e026b58ebb7).decode(footer.schema());\n        return new $407d155e284267e1$var$OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */ static encode(footer) {\n        const b = new $407d155e284267e1$var$Builder();\n        const schemaOffset = (0, $f3b63445f9bfe464$export$19342e026b58ebb7).encode(b, footer.schema);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).startRecordBatchesVector(b, footer.numRecordBatches);\n        for (const rb of [\n            ...footer.recordBatches()\n        ].slice().reverse())$407d155e284267e1$export$f0973857ccdc167a.encode(b, rb);\n        const recordBatchesOffset = b.endVector();\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).startDictionariesVector(b, footer.numDictionaries);\n        for (const db of [\n            ...footer.dictionaryBatches()\n        ].slice().reverse())$407d155e284267e1$export$f0973857ccdc167a.encode(b, db);\n        const dictionaryBatchesOffset = b.endVector();\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).startFooter(b);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).addSchema(b, schemaOffset);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).addVersion(b, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).addRecordBatches(b, recordBatchesOffset);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).addDictionaries(b, dictionaryBatchesOffset);\n        (0, $f9038961808552d6$export$a06f1c675e846f6f).finishFooterBuffer(b, (0, $f9038961808552d6$export$a06f1c675e846f6f).endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() {\n        return this._recordBatches.length;\n    }\n    get numDictionaries() {\n        return this._dictionaryBatches.length;\n    }\n    *recordBatches() {\n        for(let block, i = -1, n = this.numRecordBatches; ++i < n;)if (block = this.getRecordBatch(i)) yield block;\n    }\n    *dictionaryBatches() {\n        for(let block, i = -1, n = this.numDictionaries; ++i < n;)if (block = this.getDictionaryBatch(i)) yield block;\n    }\n    getRecordBatch(index) {\n        return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;\n    }\n}\n/** @ignore */ class $407d155e284267e1$var$OffHeapFooter extends $407d155e284267e1$export$a06f1c675e846f6f {\n    constructor(schema, _footer){\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() {\n        return this._footer.recordBatchesLength();\n    }\n    get numDictionaries() {\n        return this._footer.dictionariesLength();\n    }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) return $407d155e284267e1$export$f0973857ccdc167a.decode(fileBlock);\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) return $407d155e284267e1$export$f0973857ccdc167a.decode(fileBlock);\n        }\n        return null;\n    }\n}\nclass $407d155e284267e1$export$f0973857ccdc167a {\n    constructor(metaDataLength, bodyLength, offset){\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === \"number\" ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === \"number\" ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */ static decode(block) {\n        return new $407d155e284267e1$export$f0973857ccdc167a(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */ static encode(b, fileBlock) {\n        const { metaDataLength: metaDataLength } = fileBlock;\n        const offset = new $407d155e284267e1$var$Long(fileBlock.offset, 0);\n        const bodyLength = new $407d155e284267e1$var$Long(fileBlock.bodyLength, 0);\n        return (0, $55acd062e3b07133$export$d96a8827a60d6b69).createBlock(b, offset, metaDataLength, bodyLength);\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nvar /** @ignore */ $8a2782f1bb5c945f$export$2e2bcd8739ae039 = {\n    fromIterable (source) {\n        return $8a2782f1bb5c945f$var$pump($8a2782f1bb5c945f$var$fromIterable(source));\n    },\n    fromAsyncIterable (source) {\n        return $8a2782f1bb5c945f$var$pump($8a2782f1bb5c945f$var$fromAsyncIterable(source));\n    },\n    fromDOMStream (source) {\n        return $8a2782f1bb5c945f$var$pump($8a2782f1bb5c945f$var$fromDOMStream(source));\n    },\n    fromNodeStream (stream) {\n        return $8a2782f1bb5c945f$var$pump($8a2782f1bb5c945f$var$fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream (source, options) {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream (source, options) {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    }\n};\n/** @ignore */ const $8a2782f1bb5c945f$var$pump = (iterator)=>{\n    iterator.next();\n    return iterator;\n};\n/** @ignore */ function* $8a2782f1bb5c945f$var$fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === \"peek\") return (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size)[0];\n        [buffer, buffers, bufferLength] = (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd: cmd, size: size } = yield null);\n    // initialize the iterator\n    const it = (0, $6a2dadc936df2dd3$export$93fb14a79c82cede)(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done: done, value: buffer } = Number.isNaN(size - bufferLength) ? it.next() : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) do ({ cmd: cmd, size: size } = yield byteRange());\n            while (size < bufferLength);\n        }while (!done);\n    } catch (e) {\n        (threw = true, typeof it.throw === \"function\") && it.throw(e);\n    } finally{\n        threw === false && typeof it.return === \"function\" && it.return(null);\n    }\n    return null;\n}\n/** @ignore */ function $8a2782f1bb5c945f$var$fromAsyncIterable(source) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* fromAsyncIterable_1() {\n        let done, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === \"peek\") return (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size)[0];\n            [buffer, buffers, bufferLength] = (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before creating the source AsyncIterator\n        ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null));\n        // initialize the iterator\n        const it = (0, $6a2dadc936df2dd3$export$20fc6274387de476)(source)[Symbol.asyncIterator]();\n        try {\n            do {\n                // read the next value\n                ({ done: done, value: buffer } = Number.isNaN(size - bufferLength) ? yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it.next()) : yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it.next(size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) do ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(byteRange()));\n                while (size < bufferLength);\n            }while (!done);\n        } catch (e) {\n            (threw = true, typeof it.throw === \"function\") && (yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it.throw(e)));\n        } finally{\n            threw === false && typeof it.return === \"function\" && (yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it.return(new Uint8Array(0))));\n        }\n        return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null);\n    });\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */ function $8a2782f1bb5c945f$var$fromDOMStream(source) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* fromDOMStream_1() {\n        let done = false, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === \"peek\") return (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size)[0];\n            [buffer, buffers, bufferLength] = (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we establish the ReadableStream lock\n        ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null));\n        // initialize the reader and lock the stream\n        const it = new $8a2782f1bb5c945f$var$AdaptiveByteReader(source);\n        try {\n            do {\n                // read the next value\n                ({ done: done, value: buffer } = Number.isNaN(size - bufferLength) ? yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it[\"read\"]()) : yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it[\"read\"](size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push((0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(buffer));\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) do ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(byteRange()));\n                while (size < bufferLength);\n            }while (!done);\n        } catch (e) {\n            threw = true, yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it[\"cancel\"](e));\n        } finally{\n            threw === false ? yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(it[\"cancel\"]()) : source[\"locked\"] && it.releaseLock();\n        }\n        return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null);\n    });\n}\n/** @ignore */ class $8a2782f1bb5c945f$var$AdaptiveByteReader {\n    constructor(source){\n        this.source = source;\n        this.reader = null;\n        this.reader = this.source[\"getReader\"]();\n        // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n        // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n        // about why these errors are raised, but I'm sure there's some important spec reason that\n        // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n        // only solution in this case :/\n        this.reader[\"closed\"].catch(()=>{});\n    }\n    get closed() {\n        return this.reader ? this.reader[\"closed\"].catch(()=>{}) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) this.reader.releaseLock();\n        this.reader = null;\n    }\n    cancel(reason) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const { reader: reader, source: source } = this;\n            reader && (yield reader[\"cancel\"](reason).catch(()=>{}));\n            source && source[\"locked\"] && this.releaseLock();\n        });\n    }\n    read(size) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (size === 0) return {\n                done: this.reader == null,\n                value: new Uint8Array(0)\n            };\n            const result = yield this.reader.read();\n            !result.done && (result.value = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(result));\n            return result;\n        });\n    }\n}\n/** @ignore */ const $8a2782f1bb5c945f$var$onEvent = (stream, event)=>{\n    const handler = (_)=>resolve([\n            event,\n            _\n        ]);\n    let resolve;\n    return [\n        event,\n        handler,\n        new Promise((r)=>(resolve = r) && stream[\"once\"](event, handler))\n    ];\n};\n/** @ignore */ function $8a2782f1bb5c945f$var$fromNodeStream(stream) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* fromNodeStream_1() {\n        const events = [];\n        let event = \"error\";\n        let done = false, err = null;\n        let cmd, size, bufferLength = 0;\n        let buffers = [], buffer;\n        function byteRange() {\n            if (cmd === \"peek\") return (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size)[0];\n            [buffer, buffers, bufferLength] = (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we\n        // add the listener for the source stream's 'readable' event.\n        ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null));\n        // ignore stdin if it's a TTY\n        if (stream[\"isTTY\"]) {\n            yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(new Uint8Array(0));\n            return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null);\n        }\n        try {\n            // initialize the stream event handlers\n            events[0] = $8a2782f1bb5c945f$var$onEvent(stream, \"end\");\n            events[1] = $8a2782f1bb5c945f$var$onEvent(stream, \"error\");\n            do {\n                events[2] = $8a2782f1bb5c945f$var$onEvent(stream, \"readable\");\n                // wait on the first message event from the stream\n                [event, err] = yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(Promise.race(events.map((x)=>x[2])));\n                // if the stream emitted an Error, rethrow it\n                if (event === \"error\") break;\n                if (!(done = event === \"end\")) {\n                    // If the size is NaN, request to read everything in the stream's internal buffer\n                    if (!Number.isFinite(size - bufferLength)) buffer = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(stream[\"read\"]());\n                    else {\n                        buffer = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(stream[\"read\"](size - bufferLength));\n                        // If the byteLength is 0, then the requested amount is more than the stream has\n                        // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                        // continue emitting readable events, so request to read everything the stream\n                        // has in its internal buffer right now.\n                        if (buffer.byteLength < size - bufferLength) buffer = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(stream[\"read\"]());\n                    }\n                    // if chunk is not null or empty, push it onto the queue\n                    if (buffer.byteLength > 0) {\n                        buffers.push(buffer);\n                        bufferLength += buffer.byteLength;\n                    }\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) do ({ cmd: cmd, size: size } = yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(byteRange()));\n                while (size < bufferLength);\n            }while (!done);\n        } finally{\n            yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(cleanup(events, event === \"error\" ? err : null));\n        }\n        return yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(null);\n        function cleanup(events, err) {\n            buffer = buffers = null;\n            return new Promise((resolve, reject)=>{\n                for (const [evt, fn] of events)stream[\"off\"](evt, fn);\n                try {\n                    // Some stream implementations don't call the destroy callback,\n                    // because it's really a node-internal API. Just calling `destroy`\n                    // here should be enough to conform to the ReadableStream contract\n                    const destroy = stream[\"destroy\"];\n                    destroy && destroy.call(stream, err);\n                    err = undefined;\n                } catch (e) {\n                    err = e || err;\n                } finally{\n                    err != null ? reject(err) : resolve();\n                }\n            });\n        }\n    });\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nconst $38d3e9fec019c197$export$597fde002da0996e = Object.freeze({\n    done: true,\n    value: void 0\n});\nclass $38d3e9fec019c197$export$b222306c71bb2657 {\n    constructor(_json){\n        this._json = _json;\n    }\n    get schema() {\n        return this._json[\"schema\"];\n    }\n    get batches() {\n        return this._json[\"batches\"] || [];\n    }\n    get dictionaries() {\n        return this._json[\"dictionaries\"] || [];\n    }\n}\nclass $38d3e9fec019c197$export$cba7c5923fc9b663 {\n    tee() {\n        return this._getDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) {\n        return this._getDOMStream().pipeTo(writable, options);\n    }\n    pipeThrough(duplex, options) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n    _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n    _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\nclass $38d3e9fec019c197$export$c24e73273208a9bb extends $38d3e9fec019c197$export$cba7c5923fc9b663 {\n    constructor(){\n        super();\n        this._values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r)=>this._closedPromiseResolve = r);\n    }\n    get closed() {\n        return this._closedPromise;\n    }\n    cancel(reason) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.return(reason);\n        });\n    }\n    write(value) {\n        if (this._ensureOpen()) this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({\n            done: false,\n            value: value\n        });\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) this.resolvers.length <= 0 ? this._error = {\n            error: value\n        } : this.resolvers.shift().reject({\n            done: true,\n            value: value\n        });\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers: resolvers } = this;\n            while(resolvers.length > 0)resolvers.shift().resolve($38d3e9fec019c197$export$597fde002da0996e);\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    toDOMStream(options) {\n        return (0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n    }\n    toNodeStream(options) {\n        return (0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n    }\n    throw(_) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.abort(_);\n            return $38d3e9fec019c197$export$597fde002da0996e;\n        });\n    }\n    return(_) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.close();\n            return $38d3e9fec019c197$export$597fde002da0996e;\n        });\n    }\n    read(size) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return (yield this.next(size, \"read\")).value;\n        });\n    }\n    peek(size) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return (yield this.next(size, \"peek\")).value;\n        });\n    }\n    next(..._args) {\n        if (this._values.length > 0) return Promise.resolve({\n            done: false,\n            value: this._values.shift()\n        });\n        else if (this._error) return Promise.reject({\n            done: true,\n            value: this._error.error\n        });\n        else if (!this._closedPromiseResolve) return Promise.resolve($38d3e9fec019c197$export$597fde002da0996e);\n        else return new Promise((resolve, reject)=>{\n            this.resolvers.push({\n                resolve: resolve,\n                reject: reject\n            });\n        });\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) return true;\n        throw new Error(`AsyncQueue is closed`);\n    }\n}\n\n\n\n\nclass $44f8cce78045ceee$export$7e4b59827e1829f extends (0, $38d3e9fec019c197$export$c24e73273208a9bb) {\n    write(value) {\n        if ((value = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(value)).byteLength > 0) return super.write(value);\n    }\n    toString(sync = false) {\n        return sync ? (0, $919e3c7689196a2e$export$72118b85b055afd)(this.toUint8Array(true)) : this.toUint8Array(false).then((0, $919e3c7689196a2e$export$72118b85b055afd));\n    }\n    toUint8Array(sync = false) {\n        return sync ? (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(this._values)[0] : (()=>(0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n                var e_1, _a;\n                const buffers = [];\n                let byteLength = 0;\n                try {\n                    for(var _b = (0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(this), _c; _c = yield _b.next(), !_c.done;){\n                        const chunk = _c.value;\n                        buffers.push(chunk);\n                        byteLength += chunk.byteLength;\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                return (0, $6a2dadc936df2dd3$export$5f31b60ee74e9ce)(buffers, byteLength)[0];\n            }))();\n    }\n}\nclass $44f8cce78045ceee$export$8130652b8df6235f {\n    constructor(source){\n        if (source) this.source = new $44f8cce78045ceee$var$ByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromIterable(source));\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next(value) {\n        return this.source.next(value);\n    }\n    throw(value) {\n        return this.source.throw(value);\n    }\n    return(value) {\n        return this.source.return(value);\n    }\n    peek(size) {\n        return this.source.peek(size);\n    }\n    read(size) {\n        return this.source.read(size);\n    }\n}\nclass $44f8cce78045ceee$export$acccd0ac6a925199 {\n    constructor(source){\n        if (source instanceof $44f8cce78045ceee$export$acccd0ac6a925199) this.source = source.source;\n        else if (source instanceof $44f8cce78045ceee$export$7e4b59827e1829f) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromAsyncIterable(source));\n        else if ((0, $f61ec9f35ec4c8b9$export$2940183a2d5db90f)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromNodeStream(source));\n        else if ((0, $f61ec9f35ec4c8b9$export$f8bb1f6b773199b7)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromDOMStream(source));\n        else if ((0, $f61ec9f35ec4c8b9$export$81f27058be86d7ea)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromDOMStream(source.body));\n        else if ((0, $f61ec9f35ec4c8b9$export$9652023d9040757)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromIterable(source));\n        else if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromAsyncIterable(source));\n        else if ((0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(source)) this.source = new $44f8cce78045ceee$var$AsyncByteStreamSource((0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).fromAsyncIterable(source));\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    next(value) {\n        return this.source.next(value);\n    }\n    throw(value) {\n        return this.source.throw(value);\n    }\n    return(value) {\n        return this.source.return(value);\n    }\n    get closed() {\n        return this.source.closed;\n    }\n    cancel(reason) {\n        return this.source.cancel(reason);\n    }\n    peek(size) {\n        return this.source.peek(size);\n    }\n    read(size) {\n        return this.source.read(size);\n    }\n}\n/** @ignore */ class $44f8cce78045ceee$var$ByteStreamSource {\n    constructor(source){\n        this.source = source;\n    }\n    cancel(reason) {\n        this.return(reason);\n    }\n    peek(size) {\n        return this.next(size, \"peek\").value;\n    }\n    read(size) {\n        return this.next(size, \"read\").value;\n    }\n    next(size, cmd = \"read\") {\n        return this.source.next({\n            cmd: cmd,\n            size: size\n        });\n    }\n    throw(value) {\n        return Object.create(this.source.throw && this.source.throw(value) || (0, $38d3e9fec019c197$export$597fde002da0996e));\n    }\n    return(value) {\n        return Object.create(this.source.return && this.source.return(value) || (0, $38d3e9fec019c197$export$597fde002da0996e));\n    }\n}\n/** @ignore */ class $44f8cce78045ceee$var$AsyncByteStreamSource {\n    constructor(source){\n        this.source = source;\n        this._closedPromise = new Promise((r)=>this._closedPromiseResolve = r);\n    }\n    cancel(reason) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.return(reason);\n        });\n    }\n    get closed() {\n        return this._closedPromise;\n    }\n    read(size) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return (yield this.next(size, \"read\")).value;\n        });\n    }\n    peek(size) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return (yield this.next(size, \"peek\")).value;\n        });\n    }\n    next(size, cmd = \"read\") {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return yield this.source.next({\n                cmd: cmd,\n                size: size\n            });\n        });\n    }\n    throw(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const result = this.source.throw && (yield this.source.throw(value)) || (0, $38d3e9fec019c197$export$597fde002da0996e);\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n    return(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const result = this.source.return && (yield this.source.return(value)) || (0, $38d3e9fec019c197$export$597fde002da0996e);\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nclass $c07b9a56e8c93016$export$f0e578974429970a extends (0, $44f8cce78045ceee$export$8130652b8df6235f) {\n    constructor(buffer, byteLength){\n        super();\n        this.position = 0;\n        this.buffer = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(buffer);\n        this.size = typeof byteLength === \"undefined\" ? this.buffer.byteLength : byteLength;\n    }\n    readInt32(position) {\n        const { buffer: buffer, byteOffset: byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer: buffer, size: size, position: position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== \"number\") nBytes = Number.POSITIVE_INFINITY;\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() {\n        this.buffer && (this.buffer = null);\n    }\n    throw(value) {\n        this.close();\n        return {\n            done: true,\n            value: value\n        };\n    }\n    return(value) {\n        this.close();\n        return {\n            done: true,\n            value: value\n        };\n    }\n}\nclass $c07b9a56e8c93016$export$4c8403cd526f9bff extends (0, $44f8cce78045ceee$export$acccd0ac6a925199) {\n    constructor(file, byteLength){\n        super();\n        this.position = 0;\n        this._handle = file;\n        if (typeof byteLength === \"number\") this.size = byteLength;\n        else this._pending = (()=>(0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n                this.size = (yield file.stat()).size;\n                delete this._pending;\n            }))();\n    }\n    readInt32(position) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const { buffer: buffer, byteOffset: byteOffset } = yield this.readAt(position, 4);\n            return new DataView(buffer, byteOffset).getInt32(0, true);\n        });\n    }\n    seek(position) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            this._pending && (yield this._pending);\n            this.position = Math.min(position, this.size);\n            return position < this.size;\n        });\n    }\n    read(nBytes) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            this._pending && (yield this._pending);\n            const { _handle: file, size: size, position: position } = this;\n            if (file && position < size) {\n                if (typeof nBytes !== \"number\") nBytes = Number.POSITIVE_INFINITY;\n                let pos = position, offset = 0, bytesRead = 0;\n                const end = Math.min(size, pos + Math.min(size - pos, nBytes));\n                const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n                while((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength)({ bytesRead: bytesRead } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));\n                return buffer;\n            }\n            return null;\n        });\n    }\n    readAt(position, nBytes) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            this._pending && (yield this._pending);\n            const { _handle: file, size: size } = this;\n            if (file && position + nBytes < size) {\n                const end = Math.min(size, position + nBytes);\n                const buffer = new Uint8Array(end - position);\n                return (yield file.read(buffer, 0, nBytes, position)).buffer;\n            }\n            return new Uint8Array(nBytes);\n        });\n    }\n    close() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const f = this._handle;\n            this._handle = null;\n            f && (yield f.close());\n        });\n    }\n    throw(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.close();\n            return {\n                done: true,\n                value: value\n            };\n        });\n    }\n    return(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.close();\n            return {\n                done: true,\n                value: value\n            };\n        });\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */ const $92bbd5bee0a4f219$var$carryBit16 = 65536;\n/** @ignore */ function $92bbd5bee0a4f219$var$intAsHex(value) {\n    if (value < 0) value = 0xFFFFFFFF + value + 1;\n    return `0x${value.toString(16)}`;\n}\n/** @ignore */ const $92bbd5bee0a4f219$var$kInt32DecimalDigits = 8;\n/** @ignore */ const $92bbd5bee0a4f219$var$kPowersOfTen = [\n    1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000\n];\nclass $92bbd5bee0a4f219$export$abbd50bb57d2d77f {\n    constructor(buffer){\n        this.buffer = buffer;\n    }\n    high() {\n        return this.buffer[1];\n    }\n    low() {\n        return this.buffer[0];\n    }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = L[3] * R[2] >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = sum >>> 0 < product ? $92bbd5bee0a4f219$var$carryBit16 : 0;\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = this.buffer[0] + other.buffer[0] >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < this.buffer[0] >>> 0) ++this.buffer[1];\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${$92bbd5bee0a4f219$var$intAsHex(this.buffer[1])} ${$92bbd5bee0a4f219$var$intAsHex(this.buffer[0])}`;\n    }\n}\nclass $92bbd5bee0a4f219$export$46950b17866d859a extends $92bbd5bee0a4f219$export$abbd50bb57d2d77f {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */ static from(val, out_buffer = new Uint32Array(2)) {\n        return $92bbd5bee0a4f219$export$46950b17866d859a.fromString(typeof val === \"string\" ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return $92bbd5bee0a4f219$export$46950b17866d859a.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        const out = new $92bbd5bee0a4f219$export$46950b17866d859a(out_buffer);\n        for(let posn = 0; posn < length;){\n            const group = $92bbd5bee0a4f219$var$kInt32DecimalDigits < length - posn ? $92bbd5bee0a4f219$var$kInt32DecimalDigits : length - posn;\n            const chunk = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n                Number.parseInt(str.slice(posn, posn + group), 10),\n                0\n            ]));\n            const multiple = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n                $92bbd5bee0a4f219$var$kPowersOfTen[group],\n                0\n            ]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */ static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for(let i = -1, n = values.length; ++i < n;)$92bbd5bee0a4f219$export$46950b17866d859a.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        return data;\n    }\n    /** @nocollapse */ static multiply(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */ static add(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nclass $92bbd5bee0a4f219$export$8a5e19712a0a5deb extends $92bbd5bee0a4f219$export$abbd50bb57d2d77f {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) ++this.buffer[1];\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const this_high = this.buffer[1] << 0;\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n    }\n    /** @nocollapse */ static from(val, out_buffer = new Uint32Array(2)) {\n        return $92bbd5bee0a4f219$export$8a5e19712a0a5deb.fromString(typeof val === \"string\" ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return $92bbd5bee0a4f219$export$8a5e19712a0a5deb.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith(\"-\");\n        const length = str.length;\n        const out = new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(out_buffer);\n        for(let posn = negate ? 1 : 0; posn < length;){\n            const group = $92bbd5bee0a4f219$var$kInt32DecimalDigits < length - posn ? $92bbd5bee0a4f219$var$kInt32DecimalDigits : length - posn;\n            const chunk = new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array([\n                Number.parseInt(str.slice(posn, posn + group), 10),\n                0\n            ]));\n            const multiple = new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array([\n                $92bbd5bee0a4f219$var$kPowersOfTen[group],\n                0\n            ]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */ static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for(let i = -1, n = values.length; ++i < n;)$92bbd5bee0a4f219$export$8a5e19712a0a5deb.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        return data;\n    }\n    /** @nocollapse */ static multiply(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */ static add(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nclass $92bbd5bee0a4f219$export$10080978c6e031ea {\n    constructor(buffer){\n        this.buffer = buffer;\n    // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n    }\n    high() {\n        return new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new $92bbd5bee0a4f219$export$8a5e19712a0a5deb(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) ++this.buffer[1];\n        if (this.buffer[1] == 0) ++this.buffer[2];\n        if (this.buffer[2] == 0) ++this.buffer[3];\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            this.buffer[3],\n            0\n        ]));\n        const L1 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            this.buffer[2],\n            0\n        ]));\n        const L2 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            this.buffer[1],\n            0\n        ]));\n        const L3 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            this.buffer[0],\n            0\n        ]));\n        const R0 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            other.buffer[3],\n            0\n        ]));\n        const R1 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            other.buffer[2],\n            0\n        ]));\n        const R2 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            other.buffer[1],\n            0\n        ]));\n        const R3 = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            other.buffer[0],\n            0\n        ]));\n        let product = $92bbd5bee0a4f219$export$46950b17866d859a.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        const sum = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array([\n            product.high(),\n            0\n        ]));\n        product = $92bbd5bee0a4f219$export$46950b17866d859a.multiply(L2, R3);\n        sum.plus(product);\n        product = $92bbd5bee0a4f219$export$46950b17866d859a.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n        this.buffer[2] = sum.high();\n        const high = new $92bbd5bee0a4f219$export$46950b17866d859a(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L1, R3)).plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L2, R2)).plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L3, R1));\n        this.buffer[3] += $92bbd5bee0a4f219$export$46950b17866d859a.multiply(L0, R3).plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L1, R2)).plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L2, R1)).plus($92bbd5bee0a4f219$export$46950b17866d859a.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        const sums = new Uint32Array(4);\n        sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n        sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n        sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n        sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n        if (sums[0] < this.buffer[0] >>> 0) ++sums[1];\n        if (sums[1] < this.buffer[1] >>> 0) ++sums[2];\n        if (sums[2] < this.buffer[2] >>> 0) ++sums[3];\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${$92bbd5bee0a4f219$var$intAsHex(this.buffer[3])} ${$92bbd5bee0a4f219$var$intAsHex(this.buffer[2])} ${$92bbd5bee0a4f219$var$intAsHex(this.buffer[1])} ${$92bbd5bee0a4f219$var$intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */ static multiply(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$10080978c6e031ea(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */ static add(left, right) {\n        const rtrn = new $92bbd5bee0a4f219$export$10080978c6e031ea(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */ static from(val, out_buffer = new Uint32Array(4)) {\n        return $92bbd5bee0a4f219$export$10080978c6e031ea.fromString(typeof val === \"string\" ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return $92bbd5bee0a4f219$export$10080978c6e031ea.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */ static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith(\"-\");\n        const length = str.length;\n        const out = new $92bbd5bee0a4f219$export$10080978c6e031ea(out_buffer);\n        for(let posn = negate ? 1 : 0; posn < length;){\n            const group = $92bbd5bee0a4f219$var$kInt32DecimalDigits < length - posn ? $92bbd5bee0a4f219$var$kInt32DecimalDigits : length - posn;\n            const chunk = new $92bbd5bee0a4f219$export$10080978c6e031ea(new Uint32Array([\n                Number.parseInt(str.slice(posn, posn + group), 10),\n                0,\n                0,\n                0\n            ]));\n            const multiple = new $92bbd5bee0a4f219$export$10080978c6e031ea(new Uint32Array([\n                $92bbd5bee0a4f219$var$kPowersOfTen[group],\n                0,\n                0,\n                0\n            ]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */ static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for(let i = -1, n = values.length; ++i < n;)$92bbd5bee0a4f219$export$10080978c6e031ea.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 16 * i, 4));\n        return data;\n    }\n}\n\n\n\n\nclass $df070b5e2232f4c1$export$6f22fd25972f18b8 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    constructor(bytes, nodes, buffers, dictionaries){\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n    visit(node) {\n        return super.visit(node instanceof (0, $f3b63445f9bfe464$export$a455218a85c89869) ? node.type : node);\n    }\n    visitNull(type, { length: length } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length\n        });\n    }\n    visitBool(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitInt(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitFloat(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitUtf8(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            valueOffsets: this.readOffsets(type),\n            data: this.readData(type)\n        });\n    }\n    visitBinary(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            valueOffsets: this.readOffsets(type),\n            data: this.readData(type)\n        });\n    }\n    visitFixedSizeBinary(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitDate(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitTimestamp(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitTime(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitDecimal(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitList(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            valueOffsets: this.readOffsets(type),\n            \"child\": this.visit(type.children[0])\n        });\n    }\n    visitStruct(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            children: this.visitMany(type.children)\n        });\n    }\n    visitUnion(type) {\n        return type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n    }\n    visitDenseUnion(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            typeIds: this.readTypeIds(type),\n            valueOffsets: this.readOffsets(type),\n            children: this.visitMany(type.children)\n        });\n    }\n    visitSparseUnion(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            typeIds: this.readTypeIds(type),\n            children: this.visitMany(type.children)\n        });\n    }\n    visitDictionary(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type.indices),\n            dictionary: this.readDictionary(type)\n        });\n    }\n    visitInterval(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            data: this.readData(type)\n        });\n    }\n    visitFixedSizeList(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            \"child\": this.visit(type.children[0])\n        });\n    }\n    visitMap(type, { length: length, nullCount: nullCount } = this.nextFieldNode()) {\n        return (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: type,\n            length: length,\n            nullCount: nullCount,\n            nullBitmap: this.readNullBitmap(type, nullCount),\n            valueOffsets: this.readOffsets(type),\n            \"child\": this.visit(type.children[0])\n        });\n    }\n    nextFieldNode() {\n        return this.nodes[++this.nodesIndex];\n    }\n    nextBufferRange() {\n        return this.buffers[++this.buffersIndex];\n    }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) {\n        return this.readData(type, buffer);\n    }\n    readTypeIds(type, buffer) {\n        return this.readData(type, buffer);\n    }\n    readData(_type, { length: length, offset: offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    readDictionary(type) {\n        return this.dictionaries.get(type.id);\n    }\n}\nclass $df070b5e2232f4c1$export$447fd3976f575d87 extends $df070b5e2232f4c1$export$6f22fd25972f18b8 {\n    constructor(sources, nodes, buffers, dictionaries){\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset: offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : (0, $d76f09d2d6f16785$export$9b04d6b190dfec92)(this.sources[offset]);\n    }\n    readOffsets(_type, { offset: offset } = this.nextBufferRange()) {\n        return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(type, { offset: offset } = this.nextBufferRange()) {\n        return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, this.sources[offset]));\n    }\n    readData(type, { offset: offset } = this.nextBufferRange()) {\n        const { sources: sources } = this;\n        if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isTimestamp(type)) return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $92bbd5bee0a4f219$export$8a5e19712a0a5deb).convertArray(sources[offset]));\n        else if (((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isInt(type) || (0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isTime(type)) && type.bitWidth === 64) return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $92bbd5bee0a4f219$export$8a5e19712a0a5deb).convertArray(sources[offset]));\n        else if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDate(type) && type.unit === (0, $f79edd7127f4719f$export$b3f55ef7f087e744).MILLISECOND) return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $92bbd5bee0a4f219$export$8a5e19712a0a5deb).convertArray(sources[offset]));\n        else if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDecimal(type)) return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $92bbd5bee0a4f219$export$10080978c6e031ea).convertArray(sources[offset]));\n        else if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isBinary(type) || (0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isFixedSizeBinary(type)) return $df070b5e2232f4c1$var$binaryDataFromJSON(sources[offset]);\n        else if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isBool(type)) return (0, $d76f09d2d6f16785$export$9b04d6b190dfec92)(sources[offset]);\n        else if ((0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isUtf8(type)) return (0, $919e3c7689196a2e$export$8f647c2204da8484)(sources[offset].join(\"\"));\n        return (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(Uint8Array, (0, $6a2dadc936df2dd3$export$8f34f840217f9551)(type.ArrayType, sources[offset].map((x)=>+x)));\n    }\n}\n/** @ignore */ function $df070b5e2232f4c1$var$binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join(\"\");\n    const data = new Uint8Array(joined.length / 2);\n    for(let i = 0; i < joined.length; i += 2)data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);\n    return data;\n}\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */ \n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * Provided for forward compatibility in case we need to support different\n * strategies for compressing the IPC message body (like whole-body\n * compression rather than buffer-level) in the future\n */ var $f40c2a144b79e77b$export$55552fe210a97406;\n(function(BodyCompressionMethod) {\n    /**\n     * Each constituent buffer is first compressed with the indicated\n     * compressor, and then written with the uncompressed length in the first 8\n     * bytes as a 64-bit little-endian signed integer followed by the compressed\n     * buffer bytes (and then padding as required by the protocol). The\n     * uncompressed length may be set to -1 to indicate that the data that\n     * follows is not compressed, which can be useful for cases where\n     * compression does not yield appreciable savings.\n     */ BodyCompressionMethod[BodyCompressionMethod[\"BUFFER\"] = 0] = \"BUFFER\";\n})($f40c2a144b79e77b$export$55552fe210a97406 || ($f40c2a144b79e77b$export$55552fe210a97406 = {}));\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb;\n(function(CompressionType) {\n    CompressionType[CompressionType[\"LZ4_FRAME\"] = 0] = \"LZ4_FRAME\";\n    CompressionType[CompressionType[\"ZSTD\"] = 1] = \"ZSTD\";\n})($bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb || ($bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb = {}));\n\n\nclass $d839acc798eff740$export$e169d91759ed5c6d {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBodyCompression(bb, obj) {\n        return (obj || new $d839acc798eff740$export$e169d91759ed5c6d()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBodyCompression(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $d839acc798eff740$export$e169d91759ed5c6d()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Compressor library.\n     * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n     */ codec() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : (0, $bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb).LZ4_FRAME;\n    }\n    /**\n     * Indicates the way the record batch body was compressed\n     */ method() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : (0, $f40c2a144b79e77b$export$55552fe210a97406).BUFFER;\n    }\n    static startBodyCompression(builder) {\n        builder.startObject(2);\n    }\n    static addCodec(builder, codec) {\n        builder.addFieldInt8(0, codec, (0, $bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb).LZ4_FRAME);\n    }\n    static addMethod(builder, method) {\n        builder.addFieldInt8(1, method, (0, $f40c2a144b79e77b$export$55552fe210a97406).BUFFER);\n    }\n    static endBodyCompression(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBodyCompression(builder, codec, method) {\n        $d839acc798eff740$export$e169d91759ed5c6d.startBodyCompression(builder);\n        $d839acc798eff740$export$e169d91759ed5c6d.addCodec(builder, codec);\n        $d839acc798eff740$export$e169d91759ed5c6d.addMethod(builder, method);\n        return $d839acc798eff740$export$e169d91759ed5c6d.endBodyCompression(builder);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n */ class $a638943281c19bea$export$a143d493d941bafc {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     */ offset() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive). When building\n     * messages using the encapsulated IPC message, padding bytes may be written\n     * after a buffer, but such padding bytes do not need to be accounted for in\n     * the size here.\n     */ length() {\n        return this.bb.readInt64(this.bb_pos + 8);\n    }\n    static sizeOf() {\n        return 16;\n    }\n    static createBuffer(builder, offset, length) {\n        builder.prep(8, 16);\n        builder.writeInt64(length);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n */ class $1c7325cb5a3aa4e6$export$e0208c849596fb6a {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     */ length() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     */ nullCount() {\n        return this.bb.readInt64(this.bb_pos + 8);\n    }\n    static sizeOf() {\n        return 16;\n    }\n    static createFieldNode(builder, length, null_count) {\n        builder.prep(8, 16);\n        builder.writeInt64(null_count);\n        builder.writeInt64(length);\n        return builder.offset();\n    }\n}\n\n\nclass $bab7c05ed448aa03$export$cd370d004a302752 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsRecordBatch(bb, obj) {\n        return (obj || new $bab7c05ed448aa03$export$cd370d004a302752()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsRecordBatch(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $bab7c05ed448aa03$export$cd370d004a302752()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     */ length() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     */ nodes(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $1c7325cb5a3aa4e6$export$e0208c849596fb6a)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    nodesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     */ buffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    buffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Optional compression of the message body\n     */ compression(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new (0, $d839acc798eff740$export$e169d91759ed5c6d)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    static startRecordBatch(builder) {\n        builder.startObject(4);\n    }\n    static addLength(builder, length) {\n        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n    static addNodes(builder, nodesOffset) {\n        builder.addFieldOffset(1, nodesOffset, 0);\n    }\n    static startNodesVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addBuffers(builder, buffersOffset) {\n        builder.addFieldOffset(2, buffersOffset, 0);\n    }\n    static startBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addCompression(builder, compressionOffset) {\n        builder.addFieldOffset(3, compressionOffset, 0);\n    }\n    static endRecordBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\nclass $8ebc2d9fda7a9040$export$5e75ba0eb1186f77 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryBatch(bb, obj) {\n        return (obj || new $8ebc2d9fda7a9040$export$5e75ba0eb1186f77()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryBatch(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $8ebc2d9fda7a9040$export$5e75ba0eb1186f77()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $bab7c05ed448aa03$export$cd370d004a302752)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id. If isDelta is false this dictionary\n     * should replace the existing dictionary.\n     */ isDelta() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startDictionaryBatch(builder) {\n        builder.startObject(3);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldOffset(1, dataOffset, 0);\n    }\n    static addIsDelta(builder, isDelta) {\n        builder.addFieldInt8(2, +isDelta, 0);\n    }\n    static endDictionaryBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\nvar $30f17f16e50d5b3b$export$66d12fec0d6538a7;\n(function(SparseMatrixCompressedAxis) {\n    SparseMatrixCompressedAxis[SparseMatrixCompressedAxis[\"Row\"] = 0] = \"Row\";\n    SparseMatrixCompressedAxis[SparseMatrixCompressedAxis[\"Column\"] = 1] = \"Column\";\n})($30f17f16e50d5b3b$export$66d12fec0d6538a7 || ($30f17f16e50d5b3b$export$66d12fec0d6538a7 = {}));\n\n\nclass $6917a20a54efb491$export$9ef2f3f0cef471e7 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseMatrixIndexCSX(bb, obj) {\n        return (obj || new $6917a20a54efb491$export$9ef2f3f0cef471e7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseMatrixIndexCSX(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $6917a20a54efb491$export$9ef2f3f0cef471e7()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Which axis, row or column, is compressed\n     */ compressedAxis() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $30f17f16e50d5b3b$export$66d12fec0d6538a7).Row;\n    }\n    /**\n     * The type of values in indptrBuffer\n     */ indptrType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indptrBuffer stores the location and size of indptr array that\n     * represents the range of the rows.\n     * The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.\n     * The length of this array is 1 + (the number of rows), and the type\n     * of index value is long.\n     *\n     * For example, let X be the following 6x4 matrix:\n     * ```text\n     *   X := [[0, 1, 2, 0],\n     *         [0, 0, 3, 0],\n     *         [0, 4, 0, 5],\n     *         [0, 0, 0, 0],\n     *         [6, 0, 7, 8],\n     *         [0, 9, 0, 0]].\n     * ```\n     * The array of non-zero values in X is:\n     * ```text\n     *   values(X) = [1, 2, 3, 4, 5, 6, 7, 8, 9].\n     * ```\n     * And the indptr of X is:\n     * ```text\n     *   indptr(X) = [0, 2, 3, 5, 5, 8, 10].\n     * ```\n     */ indptrBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    /**\n     * The type of values in indicesBuffer\n     */ indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indicesBuffer stores the location and size of the array that\n     * contains the column indices of the corresponding non-zero values.\n     * The type of index value is long.\n     *\n     * For example, the indices of the above X is:\n     * ```text\n     *   indices(X) = [1, 2, 2, 1, 3, 0, 2, 3, 1].\n     * ```\n     * Note that the indices are sorted in lexicographical order for each row.\n     */ indicesBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startSparseMatrixIndexCSX(builder) {\n        builder.startObject(5);\n    }\n    static addCompressedAxis(builder, compressedAxis) {\n        builder.addFieldInt16(0, compressedAxis, (0, $30f17f16e50d5b3b$export$66d12fec0d6538a7).Row);\n    }\n    static addIndptrType(builder, indptrTypeOffset) {\n        builder.addFieldOffset(1, indptrTypeOffset, 0);\n    }\n    static addIndptrBuffer(builder, indptrBufferOffset) {\n        builder.addFieldStruct(2, indptrBufferOffset, 0);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(3, indicesTypeOffset, 0);\n    }\n    static addIndicesBuffer(builder, indicesBufferOffset) {\n        builder.addFieldStruct(4, indicesBufferOffset, 0);\n    }\n    static endSparseMatrixIndexCSX(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // indptrType\n        builder.requiredField(offset, 8); // indptrBuffer\n        builder.requiredField(offset, 10); // indicesType\n        builder.requiredField(offset, 12); // indicesBuffer\n        return offset;\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n\nclass $4fb841fa20a9fc8f$export$e72b65af861ceb68 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensorIndexCOO(bb, obj) {\n        return (obj || new $4fb841fa20a9fc8f$export$e72b65af861ceb68()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensorIndexCOO(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $4fb841fa20a9fc8f$export$e72b65af861ceb68()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * The type of values in indicesBuffer\n     */ indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * Non-negative byte offsets to advance one value cell along each dimension\n     * If omitted, default to row-major order (C-like).\n     */ indicesStrides(index) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    indicesStridesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The location and size of the indices matrix's data\n     */ indicesBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    /**\n     * This flag is true if and only if the indices matrix is sorted in\n     * row-major order, and does not have duplicated entries.\n     * This sort order is the same as of Tensorflow's SparseTensor,\n     * but it is inverse order of SciPy's canonical coo_matrix\n     * (SciPy employs column-major order for its coo_matrix).\n     */ isCanonical() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startSparseTensorIndexCOO(builder) {\n        builder.startObject(4);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(0, indicesTypeOffset, 0);\n    }\n    static addIndicesStrides(builder, indicesStridesOffset) {\n        builder.addFieldOffset(1, indicesStridesOffset, 0);\n    }\n    static createIndicesStridesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for(let i = data.length - 1; i >= 0; i--)builder.addInt64(data[i]);\n        return builder.endVector();\n    }\n    static startIndicesStridesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static addIndicesBuffer(builder, indicesBufferOffset) {\n        builder.addFieldStruct(2, indicesBufferOffset, 0);\n    }\n    static addIsCanonical(builder, isCanonical) {\n        builder.addFieldInt8(3, +isCanonical, 0);\n    }\n    static endSparseTensorIndexCOO(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 4); // indicesType\n        builder.requiredField(offset, 8); // indicesBuffer\n        return offset;\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n\nclass $bc8d4d69d3217034$export$791ce3e4a0024b08 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensorIndexCSF(bb, obj) {\n        return (obj || new $bc8d4d69d3217034$export$791ce3e4a0024b08()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensorIndexCSF(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $bc8d4d69d3217034$export$791ce3e4a0024b08()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * CSF is a generalization of compressed sparse row (CSR) index.\n     * See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)\n     *\n     * CSF index recursively compresses each dimension of a tensor into a set\n     * of prefix trees. Each path from a root to leaf forms one tensor\n     * non-zero index. CSF is implemented with two arrays of buffers and one\n     * arrays of integers.\n     *\n     * For example, let X be a 2x3x4x5 tensor and let it have the following\n     * 8 non-zero values:\n     * ```text\n     *   X[0, 0, 0, 1] := 1\n     *   X[0, 0, 0, 2] := 2\n     *   X[0, 1, 0, 0] := 3\n     *   X[0, 1, 0, 2] := 4\n     *   X[0, 1, 1, 0] := 5\n     *   X[1, 1, 1, 0] := 6\n     *   X[1, 1, 1, 1] := 7\n     *   X[1, 1, 1, 2] := 8\n     * ```\n     * As a prefix tree this would be represented as:\n     * ```text\n     *         0          1\n     *        / \\         |\n     *       0   1        1\n     *      /   / \\       |\n     *     0   0   1      1\n     *    /|  /|   |    /| |\n     *   1 2 0 2   0   0 1 2\n     * ```\n     * The type of values in indptrBuffers\n     */ indptrType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indptrBuffers stores the sparsity structure.\n     * Each two consecutive dimensions in a tensor correspond to a buffer in\n     * indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`\n     * and `indptrBuffers[dim][i + 1]` signify a range of nodes in\n     * `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.\n     *\n     * For example, the indptrBuffers for the above X is:\n     * ```text\n     *   indptrBuffer(X) = [\n     *                       [0, 2, 3],\n     *                       [0, 1, 3, 4],\n     *                       [0, 2, 4, 5, 8]\n     *                     ].\n     * ```\n     */ indptrBuffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    indptrBuffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The type of values in indicesBuffers\n     */ indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indicesBuffers stores values of nodes.\n     * Each tensor dimension corresponds to a buffer in indicesBuffers.\n     * For example, the indicesBuffers for the above X is:\n     * ```text\n     *   indicesBuffer(X) = [\n     *                        [0, 1],\n     *                        [0, 1, 1],\n     *                        [0, 0, 1, 1],\n     *                        [1, 2, 0, 2, 0, 0, 1, 2]\n     *                      ].\n     * ```\n     */ indicesBuffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    indicesBuffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * axisOrder stores the sequence in which dimensions were traversed to\n     * produce the prefix tree.\n     * For example, the axisOrder for the above X is:\n     * ```text\n     *   axisOrder(X) = [0, 1, 2, 3].\n     * ```\n     */ axisOrder(index) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n    axisOrderLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    axisOrderArray() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    static startSparseTensorIndexCSF(builder) {\n        builder.startObject(5);\n    }\n    static addIndptrType(builder, indptrTypeOffset) {\n        builder.addFieldOffset(0, indptrTypeOffset, 0);\n    }\n    static addIndptrBuffers(builder, indptrBuffersOffset) {\n        builder.addFieldOffset(1, indptrBuffersOffset, 0);\n    }\n    static startIndptrBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(2, indicesTypeOffset, 0);\n    }\n    static addIndicesBuffers(builder, indicesBuffersOffset) {\n        builder.addFieldOffset(3, indicesBuffersOffset, 0);\n    }\n    static startIndicesBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addAxisOrder(builder, axisOrderOffset) {\n        builder.addFieldOffset(4, axisOrderOffset, 0);\n    }\n    static createAxisOrderVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addInt32(data[i]);\n        return builder.endVector();\n    }\n    static startAxisOrderVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endSparseTensorIndexCSF(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 4); // indptrType\n        builder.requiredField(offset, 6); // indptrBuffers\n        builder.requiredField(offset, 8); // indicesType\n        builder.requiredField(offset, 10); // indicesBuffers\n        builder.requiredField(offset, 12); // axisOrder\n        return offset;\n    }\n}\n\n\nvar $4d91f622da36b978$export$e2ea2ee89b689b03;\n(function(SparseTensorIndex) {\n    SparseTensorIndex[SparseTensorIndex[\"NONE\"] = 0] = \"NONE\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseTensorIndexCOO\"] = 1] = \"SparseTensorIndexCOO\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseMatrixIndexCSX\"] = 2] = \"SparseMatrixIndexCSX\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseTensorIndexCSF\"] = 3] = \"SparseTensorIndexCSF\";\n})($4d91f622da36b978$export$e2ea2ee89b689b03 || ($4d91f622da36b978$export$e2ea2ee89b689b03 = {}));\nfunction $4d91f622da36b978$export$c714072be2830141(type, accessor) {\n    switch($4d91f622da36b978$export$e2ea2ee89b689b03[type]){\n        case \"NONE\":\n            return null;\n        case \"SparseTensorIndexCOO\":\n            return accessor(new (0, $4fb841fa20a9fc8f$export$e72b65af861ceb68)());\n        case \"SparseMatrixIndexCSX\":\n            return accessor(new (0, $6917a20a54efb491$export$9ef2f3f0cef471e7)());\n        case \"SparseTensorIndexCSF\":\n            return accessor(new (0, $bc8d4d69d3217034$export$791ce3e4a0024b08)());\n        default:\n            return null;\n    }\n}\nfunction $4d91f622da36b978$export$90bfbbf7e8f8d188(type, accessor, index) {\n    switch($4d91f622da36b978$export$e2ea2ee89b689b03[type]){\n        case \"NONE\":\n            return null;\n        case \"SparseTensorIndexCOO\":\n            return accessor(index, new (0, $4fb841fa20a9fc8f$export$e72b65af861ceb68)());\n        case \"SparseMatrixIndexCSX\":\n            return accessor(index, new (0, $6917a20a54efb491$export$9ef2f3f0cef471e7)());\n        case \"SparseTensorIndexCSF\":\n            return accessor(index, new (0, $bc8d4d69d3217034$export$791ce3e4a0024b08)());\n        default:\n            return null;\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nclass $97c3420187516c5f$export$3597b7e169299e22 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTensorDim(bb, obj) {\n        return (obj || new $97c3420187516c5f$export$3597b7e169299e22()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTensorDim(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $97c3420187516c5f$export$3597b7e169299e22()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Length of dimension\n     */ size() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    name(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startTensorDim(builder) {\n        builder.startObject(2);\n    }\n    static addSize(builder, size) {\n        builder.addFieldInt64(0, size, builder.createLong(0, 0));\n    }\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(1, nameOffset, 0);\n    }\n    static endTensorDim(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTensorDim(builder, size, nameOffset) {\n        $97c3420187516c5f$export$3597b7e169299e22.startTensorDim(builder);\n        $97c3420187516c5f$export$3597b7e169299e22.addSize(builder, size);\n        $97c3420187516c5f$export$3597b7e169299e22.addName(builder, nameOffset);\n        return $97c3420187516c5f$export$3597b7e169299e22.endTensorDim(builder);\n    }\n}\n\n\n\nclass $865075070f187054$export$b845267fb0963dfc {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensor(bb, obj) {\n        return (obj || new $865075070f187054$export$b845267fb0963dfc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensor(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $865075070f187054$export$b845267fb0963dfc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : (0, $01b9561b6ed8e117$export$92738401e1603719).NONE;\n    }\n    /**\n     * The type of data contained in a value cell.\n     * Currently only fixed-width value types are supported,\n     * no strings or nested types.\n     */ // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The dimensions of the tensor, optionally named.\n     */ shape(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $97c3420187516c5f$export$3597b7e169299e22)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    shapeLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The number of non-zero values in a sparse tensor.\n     */ nonZeroLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    sparseIndexType() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : (0, $4d91f622da36b978$export$e2ea2ee89b689b03).NONE;\n    }\n    /**\n     * Sparse tensor index\n     */ // @ts-ignore\n    sparseIndex(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The location and size of the tensor's data\n     */ data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startSparseTensor(builder) {\n        builder.startObject(7);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(0, typeType, (0, $01b9561b6ed8e117$export$92738401e1603719).NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(1, typeOffset, 0);\n    }\n    static addShape(builder, shapeOffset) {\n        builder.addFieldOffset(2, shapeOffset, 0);\n    }\n    static createShapeVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startShapeVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addNonZeroLength(builder, nonZeroLength) {\n        builder.addFieldInt64(3, nonZeroLength, builder.createLong(0, 0));\n    }\n    static addSparseIndexType(builder, sparseIndexType) {\n        builder.addFieldInt8(4, sparseIndexType, (0, $4d91f622da36b978$export$e2ea2ee89b689b03).NONE);\n    }\n    static addSparseIndex(builder, sparseIndexOffset) {\n        builder.addFieldOffset(5, sparseIndexOffset, 0);\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldStruct(6, dataOffset, 0);\n    }\n    static endSparseTensor(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // type\n        builder.requiredField(offset, 8); // shape\n        builder.requiredField(offset, 14); // sparseIndex\n        builder.requiredField(offset, 16); // data\n        return offset;\n    }\n    static finishSparseTensorBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedSparseTensorBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\n\n\n\nclass $c0b81b75856d33bc$export$7b6b8d90402f8814 {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTensor(bb, obj) {\n        return (obj || new $c0b81b75856d33bc$export$7b6b8d90402f8814()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTensor(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $c0b81b75856d33bc$export$7b6b8d90402f8814()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : (0, $01b9561b6ed8e117$export$92738401e1603719).NONE;\n    }\n    /**\n     * The type of data contained in a value cell. Currently only fixed-width\n     * value types are supported, no strings or nested types\n     */ // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The dimensions of the tensor, optionally named\n     */ shape(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new (0, $97c3420187516c5f$export$3597b7e169299e22)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    shapeLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Non-negative byte offsets to advance one value cell along each dimension\n     * If omitted, default to row-major order (C-like).\n     */ strides(index) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    stridesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The location and size of the tensor's data\n     */ data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new (0, $a638943281c19bea$export$a143d493d941bafc)()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startTensor(builder) {\n        builder.startObject(5);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(0, typeType, (0, $01b9561b6ed8e117$export$92738401e1603719).NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(1, typeOffset, 0);\n    }\n    static addShape(builder, shapeOffset) {\n        builder.addFieldOffset(2, shapeOffset, 0);\n    }\n    static createShapeVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startShapeVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addStrides(builder, stridesOffset) {\n        builder.addFieldOffset(3, stridesOffset, 0);\n    }\n    static createStridesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for(let i = data.length - 1; i >= 0; i--)builder.addInt64(data[i]);\n        return builder.endVector();\n    }\n    static startStridesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldStruct(4, dataOffset, 0);\n    }\n    static endTensor(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // type\n        builder.requiredField(offset, 8); // shape\n        builder.requiredField(offset, 12); // data\n        return offset;\n    }\n    static finishTensorBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedTensorBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n\nvar $d4deb62bd6e73779$export$84577d7b7db4f876;\n(function(MessageHeader) {\n    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n    MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n})($d4deb62bd6e73779$export$84577d7b7db4f876 || ($d4deb62bd6e73779$export$84577d7b7db4f876 = {}));\nfunction $d4deb62bd6e73779$export$14f0c51cbd89a5f9(type, accessor) {\n    switch($d4deb62bd6e73779$export$84577d7b7db4f876[type]){\n        case \"NONE\":\n            return null;\n        case \"Schema\":\n            return accessor(new (0, $819543e9b63af107$export$19342e026b58ebb7)());\n        case \"DictionaryBatch\":\n            return accessor(new (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77)());\n        case \"RecordBatch\":\n            return accessor(new (0, $bab7c05ed448aa03$export$cd370d004a302752)());\n        case \"Tensor\":\n            return accessor(new (0, $c0b81b75856d33bc$export$7b6b8d90402f8814)());\n        case \"SparseTensor\":\n            return accessor(new (0, $865075070f187054$export$b845267fb0963dfc)());\n        default:\n            return null;\n    }\n}\nfunction $d4deb62bd6e73779$export$69f67d61af5f7d75(type, accessor, index) {\n    switch($d4deb62bd6e73779$export$84577d7b7db4f876[type]){\n        case \"NONE\":\n            return null;\n        case \"Schema\":\n            return accessor(index, new (0, $819543e9b63af107$export$19342e026b58ebb7)());\n        case \"DictionaryBatch\":\n            return accessor(index, new (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77)());\n        case \"RecordBatch\":\n            return accessor(index, new (0, $bab7c05ed448aa03$export$cd370d004a302752)());\n        case \"Tensor\":\n            return accessor(index, new (0, $c0b81b75856d33bc$export$7b6b8d90402f8814)());\n        case \"SparseTensor\":\n            return accessor(index, new (0, $865075070f187054$export$b845267fb0963dfc)());\n        default:\n            return null;\n    }\n}\n\n\n\nclass $83185f402e0ee7a6$export$f69c19e57285b83a {\n    constructor(){\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsMessage(bb, obj) {\n        return (obj || new $83185f402e0ee7a6$export$f69c19e57285b83a()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsMessage(bb, obj) {\n        bb.setPosition(bb.position() + $b8849adfb5ff85b9$export$8b4bad21195989e3);\n        return (obj || new $83185f402e0ee7a6$export$f69c19e57285b83a()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    version() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : (0, $bf29d10dcc5aa496$export$12ea6169eb5318ff).V1;\n    }\n    headerType() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : (0, $d4deb62bd6e73779$export$84577d7b7db4f876).NONE;\n    }\n    // @ts-ignore\n    header(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    bodyLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new (0, $60e61be83537f0a4$export$12b3cc2522c3bba5)()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startMessage(builder) {\n        builder.startObject(5);\n    }\n    static addVersion(builder, version) {\n        builder.addFieldInt16(0, version, (0, $bf29d10dcc5aa496$export$12ea6169eb5318ff).V1);\n    }\n    static addHeaderType(builder, headerType) {\n        builder.addFieldInt8(1, headerType, (0, $d4deb62bd6e73779$export$84577d7b7db4f876).NONE);\n    }\n    static addHeader(builder, headerOffset) {\n        builder.addFieldOffset(2, headerOffset, 0);\n    }\n    static addBodyLength(builder, bodyLength) {\n        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for(let i = data.length - 1; i >= 0; i--)builder.addOffset(data[i]);\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endMessage(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishMessageBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedMessageBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n        $83185f402e0ee7a6$export$f69c19e57285b83a.startMessage(builder);\n        $83185f402e0ee7a6$export$f69c19e57285b83a.addVersion(builder, version);\n        $83185f402e0ee7a6$export$f69c19e57285b83a.addHeaderType(builder, headerType);\n        $83185f402e0ee7a6$export$f69c19e57285b83a.addHeader(builder, headerOffset);\n        $83185f402e0ee7a6$export$f69c19e57285b83a.addBodyLength(builder, bodyLength);\n        $83185f402e0ee7a6$export$f69c19e57285b83a.addCustomMetadata(builder, customMetadataOffset);\n        return $83185f402e0ee7a6$export$f69c19e57285b83a.endMessage(builder);\n    }\n}\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar $715199850ba413ec$var$Long = $252e58727f592771$export$12ac1d26449d9c2e;\nclass $715199850ba413ec$export$dc32ea7bcb73d1d5 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    visit(node, builder) {\n        return node == null || builder == null ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        (0, $9da36a504a0f9170$export$26c9c3a80cd996ae).startNull(b);\n        return (0, $9da36a504a0f9170$export$26c9c3a80cd996ae).endNull(b);\n    }\n    visitInt(node, b) {\n        (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00).startInt(b);\n        (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00).addBitWidth(b, node.bitWidth);\n        (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00).addIsSigned(b, node.isSigned);\n        return (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00).endInt(b);\n    }\n    visitFloat(node, b) {\n        (0, $8b8f66b318af7438$export$257b1589cbfd46ce).startFloatingPoint(b);\n        (0, $8b8f66b318af7438$export$257b1589cbfd46ce).addPrecision(b, node.precision);\n        return (0, $8b8f66b318af7438$export$257b1589cbfd46ce).endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        (0, $94737fb90c929e48$export$dbada097a9bd1de9).startBinary(b);\n        return (0, $94737fb90c929e48$export$dbada097a9bd1de9).endBinary(b);\n    }\n    visitBool(_node, b) {\n        (0, $7115a99830a05127$export$6e6298e1abe0d5b).startBool(b);\n        return (0, $7115a99830a05127$export$6e6298e1abe0d5b).endBool(b);\n    }\n    visitUtf8(_node, b) {\n        (0, $98ef8af8e5ac0550$export$3ee43a596719d7b5).startUtf8(b);\n        return (0, $98ef8af8e5ac0550$export$3ee43a596719d7b5).endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        (0, $e056555f1b3a6c36$export$95c991896bef8714).startDecimal(b);\n        (0, $e056555f1b3a6c36$export$95c991896bef8714).addScale(b, node.scale);\n        (0, $e056555f1b3a6c36$export$95c991896bef8714).addPrecision(b, node.precision);\n        (0, $e056555f1b3a6c36$export$95c991896bef8714).addBitWidth(b, node.bitWidth);\n        return (0, $e056555f1b3a6c36$export$95c991896bef8714).endDecimal(b);\n    }\n    visitDate(node, b) {\n        (0, $7c73ec3dc476ef53$export$6341f9a885713487).startDate(b);\n        (0, $7c73ec3dc476ef53$export$6341f9a885713487).addUnit(b, node.unit);\n        return (0, $7c73ec3dc476ef53$export$6341f9a885713487).endDate(b);\n    }\n    visitTime(node, b) {\n        (0, $2410d33bb612780a$export$680ea196effce5f).startTime(b);\n        (0, $2410d33bb612780a$export$680ea196effce5f).addUnit(b, node.unit);\n        (0, $2410d33bb612780a$export$680ea196effce5f).addBitWidth(b, node.bitWidth);\n        return (0, $2410d33bb612780a$export$680ea196effce5f).endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = node.timezone && b.createString(node.timezone) || undefined;\n        (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430).startTimestamp(b);\n        (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430).addUnit(b, node.unit);\n        if (timezone !== undefined) (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430).addTimezone(b, timezone);\n        return (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430).endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        (0, $67dfcdbd6df72b46$export$e659c2681d58d45b).startInterval(b);\n        (0, $67dfcdbd6df72b46$export$e659c2681d58d45b).addUnit(b, node.unit);\n        return (0, $67dfcdbd6df72b46$export$e659c2681d58d45b).endInterval(b);\n    }\n    visitList(_node, b) {\n        (0, $318f60c1e90e3c35$export$54c2e3dc7acea9f5).startList(b);\n        return (0, $318f60c1e90e3c35$export$54c2e3dc7acea9f5).endList(b);\n    }\n    visitStruct(_node, b) {\n        (0, $958f401a3d4efa97$export$3b43426ee282bc31).startStruct_(b);\n        return (0, $958f401a3d4efa97$export$3b43426ee282bc31).endStruct_(b);\n    }\n    visitUnion(node, b) {\n        (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).createTypeIdsVector(b, node.typeIds);\n        (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).startUnion(b);\n        (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).addMode(b, node.mode);\n        (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).addTypeIds(b, typeIds);\n        return (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986).endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        (0, $16a40d7e684a12f1$export$57d09fbdc0927e09).startDictionaryEncoding(b);\n        (0, $16a40d7e684a12f1$export$57d09fbdc0927e09).addId(b, new $715199850ba413ec$var$Long(node.id, 0));\n        (0, $16a40d7e684a12f1$export$57d09fbdc0927e09).addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) (0, $16a40d7e684a12f1$export$57d09fbdc0927e09).addIndexType(b, indexType);\n        return (0, $16a40d7e684a12f1$export$57d09fbdc0927e09).endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        (0, $b20e8c514d226bfe$export$acd1628a1dd918f2).startFixedSizeBinary(b);\n        (0, $b20e8c514d226bfe$export$acd1628a1dd918f2).addByteWidth(b, node.byteWidth);\n        return (0, $b20e8c514d226bfe$export$acd1628a1dd918f2).endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7).startFixedSizeList(b);\n        (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7).addListSize(b, node.listSize);\n        return (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7).endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8).startMap(b);\n        (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8).addKeysSorted(b, node.keysSorted);\n        return (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8).endMap(b);\n    }\n}\nconst $715199850ba413ec$export$9544d5bb712b01ea = new $715199850ba413ec$export$dc32ea7bcb73d1d5();\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */ \n\n\n\nfunction $cefb43be799963c6$export$ab3a79a8c01c8f6b(_schema, dictionaries = new Map()) {\n    return new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)($cefb43be799963c6$var$schemaFieldsFromJSON(_schema, dictionaries), $cefb43be799963c6$var$customMetadataFromJSON(_schema[\"customMetadata\"]), dictionaries);\n}\nfunction $cefb43be799963c6$export$a1d56744d35b97b6(b) {\n    return new (0, $15c6a7e2cd1ff7b0$export$cd370d004a302752)(b[\"count\"], $cefb43be799963c6$var$fieldNodesFromJSON(b[\"columns\"]), $cefb43be799963c6$var$buffersFromJSON(b[\"columns\"]));\n}\nfunction $cefb43be799963c6$export$51e2be9f9bd8caa0(b) {\n    return new (0, $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77)($cefb43be799963c6$export$a1d56744d35b97b6(b[\"data\"]), b[\"id\"], b[\"isDelta\"]);\n}\n/** @ignore */ function $cefb43be799963c6$var$schemaFieldsFromJSON(_schema, dictionaries) {\n    return (_schema[\"fields\"] || []).filter(Boolean).map((f)=>(0, $f3b63445f9bfe464$export$a455218a85c89869).fromJSON(f, dictionaries));\n}\n/** @ignore */ function $cefb43be799963c6$var$fieldChildrenFromJSON(_field, dictionaries) {\n    return (_field[\"children\"] || []).filter(Boolean).map((f)=>(0, $f3b63445f9bfe464$export$a455218a85c89869).fromJSON(f, dictionaries));\n}\n/** @ignore */ function $cefb43be799963c6$var$fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column)=>[\n            ...fieldNodes,\n            new (0, $15c6a7e2cd1ff7b0$export$e0208c849596fb6a)(column[\"count\"], $cefb43be799963c6$var$nullCountFromJSON(column[\"VALIDITY\"])),\n            ...$cefb43be799963c6$var$fieldNodesFromJSON(column[\"children\"])\n        ], []);\n}\n/** @ignore */ function $cefb43be799963c6$var$buffersFromJSON(xs, buffers = []) {\n    for(let i = -1, n = (xs || []).length; ++i < n;){\n        const column = xs[i];\n        column[\"VALIDITY\"] && buffers.push(new (0, $15c6a7e2cd1ff7b0$export$64d9b66387ab167f)(buffers.length, column[\"VALIDITY\"].length));\n        column[\"TYPE\"] && buffers.push(new (0, $15c6a7e2cd1ff7b0$export$64d9b66387ab167f)(buffers.length, column[\"TYPE\"].length));\n        column[\"OFFSET\"] && buffers.push(new (0, $15c6a7e2cd1ff7b0$export$64d9b66387ab167f)(buffers.length, column[\"OFFSET\"].length));\n        column[\"DATA\"] && buffers.push(new (0, $15c6a7e2cd1ff7b0$export$64d9b66387ab167f)(buffers.length, column[\"DATA\"].length));\n        buffers = $cefb43be799963c6$var$buffersFromJSON(column[\"children\"], buffers);\n    }\n    return buffers;\n}\n/** @ignore */ function $cefb43be799963c6$var$nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val)=>sum + +(val === 0), 0);\n}\nfunction $cefb43be799963c6$export$f7d042c7cf9234c9(_field, dictionaries) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field[\"dictionary\"])) {\n        type = $cefb43be799963c6$var$typeFromJSON(_field, $cefb43be799963c6$var$fieldChildrenFromJSON(_field, dictionaries));\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(_field[\"name\"], type, _field[\"nullable\"], $cefb43be799963c6$var$customMetadataFromJSON(_field[\"customMetadata\"]));\n    } else if (!dictionaries.has(id = dictMeta[\"id\"])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta[\"indexType\"]) ? $cefb43be799963c6$var$indexTypeFromJSON(keys) : new (0, $7101ea1b1020e1ec$export$493726e231866ac3)();\n        dictionaries.set(id, type = $cefb43be799963c6$var$typeFromJSON(_field, $cefb43be799963c6$var$fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new (0, $7101ea1b1020e1ec$export$4ee70ab773570fb9)(type, keys, id, dictMeta[\"isOrdered\"]);\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(_field[\"name\"], dictType, _field[\"nullable\"], $cefb43be799963c6$var$customMetadataFromJSON(_field[\"customMetadata\"]));\n    } else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta[\"indexType\"]) ? $cefb43be799963c6$var$indexTypeFromJSON(keys) : new (0, $7101ea1b1020e1ec$export$493726e231866ac3)();\n        dictType = new (0, $7101ea1b1020e1ec$export$4ee70ab773570fb9)(dictionaries.get(id), keys, id, dictMeta[\"isOrdered\"]);\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(_field[\"name\"], dictType, _field[\"nullable\"], $cefb43be799963c6$var$customMetadataFromJSON(_field[\"customMetadata\"]));\n    }\n    return field || null;\n}\n/** @ignore */ function $cefb43be799963c6$var$customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\n/** @ignore */ function $cefb43be799963c6$var$indexTypeFromJSON(_type) {\n    return new (0, $7101ea1b1020e1ec$export$fdd676b64b72b00)(_type[\"isSigned\"], _type[\"bitWidth\"]);\n}\n/** @ignore */ function $cefb43be799963c6$var$typeFromJSON(f, children) {\n    const typeId = f[\"type\"][\"name\"];\n    switch(typeId){\n        case \"NONE\":\n            return new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae)();\n        case \"null\":\n            return new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae)();\n        case \"binary\":\n            return new (0, $7101ea1b1020e1ec$export$dbada097a9bd1de9)();\n        case \"utf8\":\n            return new (0, $7101ea1b1020e1ec$export$3ee43a596719d7b5)();\n        case \"bool\":\n            return new (0, $7101ea1b1020e1ec$export$6e6298e1abe0d5b)();\n        case \"list\":\n            return new (0, $7101ea1b1020e1ec$export$54c2e3dc7acea9f5)((children || [])[0]);\n        case \"struct\":\n            return new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(children || []);\n        case \"struct_\":\n            return new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(children || []);\n    }\n    switch(typeId){\n        case \"int\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$fdd676b64b72b00)(t[\"isSigned\"], t[\"bitWidth\"]);\n            }\n        case \"floatingpoint\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$bb89b76e902dbdb5)((0, $f79edd7127f4719f$export$be201676156f3e60)[t[\"precision\"]]);\n            }\n        case \"decimal\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$95c991896bef8714)(t[\"scale\"], t[\"precision\"], t[\"bitWidth\"]);\n            }\n        case \"date\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$6d0683f8044360cf)((0, $f79edd7127f4719f$export$b3f55ef7f087e744)[t[\"unit\"]]);\n            }\n        case \"time\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$680ea196effce5f)((0, $f79edd7127f4719f$export$d9e59215631231e3)[t[\"unit\"]], t[\"bitWidth\"]);\n            }\n        case \"timestamp\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$d9bcbd5e1ff81430)((0, $f79edd7127f4719f$export$d9e59215631231e3)[t[\"unit\"]], t[\"timezone\"]);\n            }\n        case \"interval\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$e659c2681d58d45b)((0, $f79edd7127f4719f$export$dd27fec05eba03b)[t[\"unit\"]]);\n            }\n        case \"union\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986)((0, $f79edd7127f4719f$export$a82fae803f3856de)[t[\"mode\"]], t[\"typeIds\"] || [], children || []);\n            }\n        case \"fixedsizebinary\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$acd1628a1dd918f2)(t[\"byteWidth\"]);\n            }\n        case \"fixedsizelist\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7)(t[\"listSize\"], (children || [])[0]);\n            }\n        case \"map\":\n            {\n                const t = f[\"type\"];\n                return new (0, $7101ea1b1020e1ec$export$deb68d24b0e86bc0)((children || [])[0], t[\"keysSorted\"]);\n            }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n\n\nvar $15c6a7e2cd1ff7b0$var$Long = $252e58727f592771$export$12ac1d26449d9c2e;\nvar $15c6a7e2cd1ff7b0$var$Builder = $5d9d3e6dae320589$export$f75e4297694ec637;\nvar $15c6a7e2cd1ff7b0$var$ByteBuffer = $b791e9664c1babe0$export$b21dcdb2a0c6c467;\nclass $15c6a7e2cd1ff7b0$export$f69c19e57285b83a {\n    constructor(bodyLength, version, headerType, header){\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = ()=>header);\n        this._bodyLength = typeof bodyLength === \"number\" ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */ static fromJSON(msg, headerType) {\n        const message = new $15c6a7e2cd1ff7b0$export$f69c19e57285b83a(0, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, headerType);\n        message._createHeader = $15c6a7e2cd1ff7b0$var$messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */ static decode(buf) {\n        buf = new $15c6a7e2cd1ff7b0$var$ByteBuffer((0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(buf));\n        const _message = (0, $83185f402e0ee7a6$export$f69c19e57285b83a).getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new $15c6a7e2cd1ff7b0$export$f69c19e57285b83a(bodyLength, version, headerType);\n        message._createHeader = $15c6a7e2cd1ff7b0$var$decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */ static encode(message) {\n        const b = new $15c6a7e2cd1ff7b0$var$Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) headerOffset = (0, $f3b63445f9bfe464$export$19342e026b58ebb7).encode(b, message.header());\n        else if (message.isRecordBatch()) headerOffset = $15c6a7e2cd1ff7b0$export$cd370d004a302752.encode(b, message.header());\n        else if (message.isDictionaryBatch()) headerOffset = $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77.encode(b, message.header());\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).startMessage(b);\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).addVersion(b, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4);\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).addHeader(b, headerOffset);\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).addHeaderType(b, message.headerType);\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).addBodyLength(b, new $15c6a7e2cd1ff7b0$var$Long(message.bodyLength, 0));\n        (0, $83185f402e0ee7a6$export$f69c19e57285b83a).finishMessageBuffer(b, (0, $83185f402e0ee7a6$export$f69c19e57285b83a).endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */ static from(header, bodyLength = 0) {\n        if (header instanceof (0, $f3b63445f9bfe464$export$19342e026b58ebb7)) return new $15c6a7e2cd1ff7b0$export$f69c19e57285b83a(0, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema, header);\n        if (header instanceof $15c6a7e2cd1ff7b0$export$cd370d004a302752) return new $15c6a7e2cd1ff7b0$export$f69c19e57285b83a(bodyLength, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch, header);\n        if (header instanceof $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77) return new $15c6a7e2cd1ff7b0$export$f69c19e57285b83a(bodyLength, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch, header);\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() {\n        return this.headerType;\n    }\n    get version() {\n        return this._version;\n    }\n    get headerType() {\n        return this._headerType;\n    }\n    get bodyLength() {\n        return this._bodyLength;\n    }\n    header() {\n        return this._createHeader();\n    }\n    isSchema() {\n        return this.headerType === (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema;\n    }\n    isRecordBatch() {\n        return this.headerType === (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch;\n    }\n    isDictionaryBatch() {\n        return this.headerType === (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch;\n    }\n}\nclass $15c6a7e2cd1ff7b0$export$cd370d004a302752 {\n    constructor(length, nodes, buffers){\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === \"number\" ? length : length.low;\n    }\n    get nodes() {\n        return this._nodes;\n    }\n    get length() {\n        return this._length;\n    }\n    get buffers() {\n        return this._buffers;\n    }\n}\nclass $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77 {\n    constructor(data, id, isDelta = false){\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === \"number\" ? id : id.low;\n    }\n    get id() {\n        return this._id;\n    }\n    get data() {\n        return this._data;\n    }\n    get isDelta() {\n        return this._isDelta;\n    }\n    get length() {\n        return this.data.length;\n    }\n    get nodes() {\n        return this.data.nodes;\n    }\n    get buffers() {\n        return this.data.buffers;\n    }\n}\nclass $15c6a7e2cd1ff7b0$export$64d9b66387ab167f {\n    constructor(offset, length){\n        this.offset = typeof offset === \"number\" ? offset : offset.low;\n        this.length = typeof length === \"number\" ? length : length.low;\n    }\n}\nclass $15c6a7e2cd1ff7b0$export$e0208c849596fb6a {\n    constructor(length, nullCount){\n        this.length = typeof length === \"number\" ? length : length.low;\n        this.nullCount = typeof nullCount === \"number\" ? nullCount : nullCount.low;\n    }\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$messageHeaderFromJSON(message, type) {\n    return ()=>{\n        switch(type){\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema:\n                return (0, $f3b63445f9bfe464$export$19342e026b58ebb7).fromJSON(message);\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch:\n                return $15c6a7e2cd1ff7b0$export$cd370d004a302752.fromJSON(message);\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch:\n                return $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${(0, $f79edd7127f4719f$export$84577d7b7db4f876)[type]}, type: ${type} }`);\n    };\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeMessageHeader(message, type) {\n    return ()=>{\n        switch(type){\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema:\n                return (0, $f3b63445f9bfe464$export$19342e026b58ebb7).decode(message.header(new (0, $819543e9b63af107$export$19342e026b58ebb7)()));\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch:\n                return $15c6a7e2cd1ff7b0$export$cd370d004a302752.decode(message.header(new (0, $bab7c05ed448aa03$export$cd370d004a302752)()), message.version());\n            case (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch:\n                return $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77.decode(message.header(new (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77)()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${(0, $f79edd7127f4719f$export$84577d7b7db4f876)[type]}, type: ${type} }`);\n    };\n}\n(0, $f3b63445f9bfe464$export$a455218a85c89869)[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeField;\n(0, $f3b63445f9bfe464$export$a455218a85c89869)[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeField;\n(0, $f3b63445f9bfe464$export$a455218a85c89869)[\"fromJSON\"] = (0, $cefb43be799963c6$export$f7d042c7cf9234c9);\n(0, $f3b63445f9bfe464$export$19342e026b58ebb7)[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeSchema;\n(0, $f3b63445f9bfe464$export$19342e026b58ebb7)[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeSchema;\n(0, $f3b63445f9bfe464$export$19342e026b58ebb7)[\"fromJSON\"] = (0, $cefb43be799963c6$export$ab3a79a8c01c8f6b);\n$15c6a7e2cd1ff7b0$export$cd370d004a302752[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeRecordBatch;\n$15c6a7e2cd1ff7b0$export$cd370d004a302752[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeRecordBatch;\n$15c6a7e2cd1ff7b0$export$cd370d004a302752[\"fromJSON\"] = (0, $cefb43be799963c6$export$a1d56744d35b97b6);\n$15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeDictionaryBatch;\n$15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeDictionaryBatch;\n$15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77[\"fromJSON\"] = (0, $cefb43be799963c6$export$51e2be9f9bd8caa0);\n$15c6a7e2cd1ff7b0$export$e0208c849596fb6a[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeFieldNode;\n$15c6a7e2cd1ff7b0$export$e0208c849596fb6a[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeFieldNode;\n$15c6a7e2cd1ff7b0$export$64d9b66387ab167f[\"encode\"] = $15c6a7e2cd1ff7b0$var$encodeBufferRegion;\n$15c6a7e2cd1ff7b0$export$64d9b66387ab167f[\"decode\"] = $15c6a7e2cd1ff7b0$var$decodeBufferRegion;\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeSchema(_schema, dictionaries = new Map()) {\n    const fields = $15c6a7e2cd1ff7b0$var$decodeSchemaFields(_schema, dictionaries);\n    return new (0, $f3b63445f9bfe464$export$19342e026b58ebb7)(fields, $15c6a7e2cd1ff7b0$var$decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeRecordBatch(batch, version = (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4) {\n    if (batch.compression() !== null) throw new Error(\"Record batch compression not implemented\");\n    return new $15c6a7e2cd1ff7b0$export$cd370d004a302752(batch.length(), $15c6a7e2cd1ff7b0$var$decodeFieldNodes(batch), $15c6a7e2cd1ff7b0$var$decodeBuffers(batch, version));\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeDictionaryBatch(batch, version = (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4) {\n    return new $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77($15c6a7e2cd1ff7b0$export$cd370d004a302752.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeBufferRegion(b) {\n    return new $15c6a7e2cd1ff7b0$export$64d9b66387ab167f(b.offset(), b.length());\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeFieldNode(f) {\n    return new $15c6a7e2cd1ff7b0$export$e0208c849596fb6a(f.length(), f.nullCount());\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeFieldNodes(batch) {\n    const nodes = [];\n    for(let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;)if (f = batch.nodes(i)) nodes[++j] = $15c6a7e2cd1ff7b0$export$e0208c849596fb6a.decode(f);\n    return nodes;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeBuffers(batch, version) {\n    const bufferRegions = [];\n    for(let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;)if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4) b.bb_pos += 8 * (i + 1);\n        bufferRegions[++j] = $15c6a7e2cd1ff7b0$export$64d9b66387ab167f.decode(b);\n    }\n    return bufferRegions;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeSchemaFields(schema, dictionaries) {\n    const fields = [];\n    for(let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;)if (f = schema.fields(i)) fields[++j] = (0, $f3b63445f9bfe464$export$a455218a85c89869).decode(f, dictionaries);\n    return fields;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeFieldChildren(field, dictionaries) {\n    const children = [];\n    for(let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;)if (f = field.children(i)) children[++j] = (0, $f3b63445f9bfe464$export$a455218a85c89869).decode(f, dictionaries);\n    return children;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeField(f, dictionaries) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = $15c6a7e2cd1ff7b0$var$decodeFieldType(f, $15c6a7e2cd1ff7b0$var$decodeFieldChildren(f, dictionaries));\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(f.name(), type, f.nullable(), $15c6a7e2cd1ff7b0$var$decodeCustomMetadata(f));\n    } else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? $15c6a7e2cd1ff7b0$var$decodeIndexType(keys) : new (0, $7101ea1b1020e1ec$export$493726e231866ac3)();\n        dictionaries.set(id, type = $15c6a7e2cd1ff7b0$var$decodeFieldType(f, $15c6a7e2cd1ff7b0$var$decodeFieldChildren(f, dictionaries)));\n        dictType = new (0, $7101ea1b1020e1ec$export$4ee70ab773570fb9)(type, keys, id, dictMeta.isOrdered());\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(f.name(), dictType, f.nullable(), $15c6a7e2cd1ff7b0$var$decodeCustomMetadata(f));\n    } else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? $15c6a7e2cd1ff7b0$var$decodeIndexType(keys) : new (0, $7101ea1b1020e1ec$export$493726e231866ac3)();\n        dictType = new (0, $7101ea1b1020e1ec$export$4ee70ab773570fb9)(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        field = new (0, $f3b63445f9bfe464$export$a455218a85c89869)(f.name(), dictType, f.nullable(), $15c6a7e2cd1ff7b0$var$decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for(let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;)if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) data.set(key, entry.value());\n    }\n    return data;\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeIndexType(_type) {\n    return new (0, $7101ea1b1020e1ec$export$fdd676b64b72b00)(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch(typeId){\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"NONE\"]:\n            return new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae)();\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Null\"]:\n            return new (0, $7101ea1b1020e1ec$export$26c9c3a80cd996ae)();\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Binary\"]:\n            return new (0, $7101ea1b1020e1ec$export$dbada097a9bd1de9)();\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Utf8\"]:\n            return new (0, $7101ea1b1020e1ec$export$3ee43a596719d7b5)();\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Bool\"]:\n            return new (0, $7101ea1b1020e1ec$export$6e6298e1abe0d5b)();\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"List\"]:\n            return new (0, $7101ea1b1020e1ec$export$54c2e3dc7acea9f5)((children || [])[0]);\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Struct_\"]:\n            return new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(children || []);\n    }\n    switch(typeId){\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Int\"]:\n            {\n                const t = f.type(new (0, $fbe95b7d2bf7fb98$export$fdd676b64b72b00)());\n                return new (0, $7101ea1b1020e1ec$export$fdd676b64b72b00)(t.isSigned(), t.bitWidth());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"FloatingPoint\"]:\n            {\n                const t = f.type(new (0, $8b8f66b318af7438$export$257b1589cbfd46ce)());\n                return new (0, $7101ea1b1020e1ec$export$bb89b76e902dbdb5)(t.precision());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Decimal\"]:\n            {\n                const t = f.type(new (0, $e056555f1b3a6c36$export$95c991896bef8714)());\n                return new (0, $7101ea1b1020e1ec$export$95c991896bef8714)(t.scale(), t.precision(), t.bitWidth());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Date\"]:\n            {\n                const t = f.type(new (0, $7c73ec3dc476ef53$export$6341f9a885713487)());\n                return new (0, $7101ea1b1020e1ec$export$6d0683f8044360cf)(t.unit());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Time\"]:\n            {\n                const t = f.type(new (0, $2410d33bb612780a$export$680ea196effce5f)());\n                return new (0, $7101ea1b1020e1ec$export$680ea196effce5f)(t.unit(), t.bitWidth());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Timestamp\"]:\n            {\n                const t = f.type(new (0, $b149de23afe7bc26$export$d9bcbd5e1ff81430)());\n                return new (0, $7101ea1b1020e1ec$export$d9bcbd5e1ff81430)(t.unit(), t.timezone());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Interval\"]:\n            {\n                const t = f.type(new (0, $67dfcdbd6df72b46$export$e659c2681d58d45b)());\n                return new (0, $7101ea1b1020e1ec$export$e659c2681d58d45b)(t.unit());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Union\"]:\n            {\n                const t = f.type(new (0, $970e60b352bbdc20$export$6cbb4f8fa0c4c986)());\n                return new (0, $7101ea1b1020e1ec$export$6cbb4f8fa0c4c986)(t.mode(), t.typeIdsArray() || [], children || []);\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"FixedSizeBinary\"]:\n            {\n                const t = f.type(new (0, $b20e8c514d226bfe$export$acd1628a1dd918f2)());\n                return new (0, $7101ea1b1020e1ec$export$acd1628a1dd918f2)(t.byteWidth());\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"FixedSizeList\"]:\n            {\n                const t = f.type(new (0, $c5dec885bac02404$export$ae9e55e1d8a2f4b7)());\n                return new (0, $7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7)(t.listSize(), (children || [])[0]);\n            }\n        case (0, $01b9561b6ed8e117$export$92738401e1603719)[\"Map\"]:\n            {\n                const t = f.type(new (0, $6e1a040cdf3db503$export$a5c7b93649eaf8f8)());\n                return new (0, $7101ea1b1020e1ec$export$deb68d24b0e86bc0)((children || [])[0], t.keysSorted());\n            }\n    }\n    throw new Error(`Unrecognized type: \"${(0, $01b9561b6ed8e117$export$92738401e1603719)[typeId]}\" (${typeId})`);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f)=>(0, $f3b63445f9bfe464$export$a455218a85c89869).encode(b, f));\n    (0, $819543e9b63af107$export$19342e026b58ebb7).startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = (0, $819543e9b63af107$export$19342e026b58ebb7).createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : (0, $819543e9b63af107$export$19342e026b58ebb7).createCustomMetadataVector(b, [\n        ...schema.metadata\n    ].map(([k, v])=>{\n        const key = b.createString(`${k}`);\n        const val = b.createString(`${v}`);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).startKeyValue(b);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).addKey(b, key);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).addValue(b, val);\n        return (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).endKeyValue(b);\n    }));\n    (0, $819543e9b63af107$export$19342e026b58ebb7).startSchema(b);\n    (0, $819543e9b63af107$export$19342e026b58ebb7).addFields(b, fieldsVectorOffset);\n    (0, $819543e9b63af107$export$19342e026b58ebb7).addEndianness(b, $15c6a7e2cd1ff7b0$var$platformIsLittleEndian ? (0, $302f8f848493eb05$export$c590ef2020908539).Little : (0, $302f8f848493eb05$export$c590ef2020908539).Big);\n    if (metadataOffset !== -1) (0, $819543e9b63af107$export$19342e026b58ebb7).addCustomMetadata(b, metadataOffset);\n    return (0, $819543e9b63af107$export$19342e026b58ebb7).endSchema(b);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    const type = field.type;\n    let typeId = field.typeId;\n    if (!(0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(type)) typeOffset = (0, $715199850ba413ec$export$9544d5bb712b01ea).visit(type, b);\n    else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = (0, $715199850ba413ec$export$9544d5bb712b01ea).visit(type, b);\n        typeOffset = (0, $715199850ba413ec$export$9544d5bb712b01ea).visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f)=>(0, $f3b63445f9bfe464$export$a455218a85c89869).encode(b, f));\n    const childrenVectorOffset = (0, $ae377e5d72a755d0$export$a455218a85c89869).createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : (0, $ae377e5d72a755d0$export$a455218a85c89869).createCustomMetadataVector(b, [\n        ...field.metadata\n    ].map(([k, v])=>{\n        const key = b.createString(`${k}`);\n        const val = b.createString(`${v}`);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).startKeyValue(b);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).addKey(b, key);\n        (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).addValue(b, val);\n        return (0, $60e61be83537f0a4$export$12b3cc2522c3bba5).endKeyValue(b);\n    }));\n    if (field.name) nameOffset = b.createString(field.name);\n    (0, $ae377e5d72a755d0$export$a455218a85c89869).startField(b);\n    (0, $ae377e5d72a755d0$export$a455218a85c89869).addType(b, typeOffset);\n    (0, $ae377e5d72a755d0$export$a455218a85c89869).addTypeType(b, typeId);\n    (0, $ae377e5d72a755d0$export$a455218a85c89869).addChildren(b, childrenVectorOffset);\n    (0, $ae377e5d72a755d0$export$a455218a85c89869).addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) (0, $ae377e5d72a755d0$export$a455218a85c89869).addName(b, nameOffset);\n    if (dictionaryOffset !== -1) (0, $ae377e5d72a755d0$export$a455218a85c89869).addDictionary(b, dictionaryOffset);\n    if (metadataOffset !== -1) (0, $ae377e5d72a755d0$export$a455218a85c89869).addCustomMetadata(b, metadataOffset);\n    return (0, $ae377e5d72a755d0$export$a455218a85c89869).endField(b);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).startNodesVector(b, nodes.length);\n    for (const n of nodes.slice().reverse())$15c6a7e2cd1ff7b0$export$e0208c849596fb6a.encode(b, n);\n    const nodesVectorOffset = b.endVector();\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).startBuffersVector(b, buffers.length);\n    for (const b_ of buffers.slice().reverse())$15c6a7e2cd1ff7b0$export$64d9b66387ab167f.encode(b, b_);\n    const buffersVectorOffset = b.endVector();\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).startRecordBatch(b);\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).addLength(b, new $15c6a7e2cd1ff7b0$var$Long(recordBatch.length, 0));\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).addNodes(b, nodesVectorOffset);\n    (0, $bab7c05ed448aa03$export$cd370d004a302752).addBuffers(b, buffersVectorOffset);\n    return (0, $bab7c05ed448aa03$export$cd370d004a302752).endRecordBatch(b);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = $15c6a7e2cd1ff7b0$export$cd370d004a302752.encode(b, dictionaryBatch.data);\n    (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77).startDictionaryBatch(b);\n    (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77).addId(b, new $15c6a7e2cd1ff7b0$var$Long(dictionaryBatch.id, 0));\n    (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77).addIsDelta(b, dictionaryBatch.isDelta);\n    (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77).addData(b, dataOffset);\n    return (0, $8ebc2d9fda7a9040$export$5e75ba0eb1186f77).endDictionaryBatch(b);\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeFieldNode(b, node) {\n    return (0, $1c7325cb5a3aa4e6$export$e0208c849596fb6a).createFieldNode(b, new $15c6a7e2cd1ff7b0$var$Long(node.length, 0), new $15c6a7e2cd1ff7b0$var$Long(node.nullCount, 0));\n}\n/** @ignore */ function $15c6a7e2cd1ff7b0$var$encodeBufferRegion(b, node) {\n    return (0, $a638943281c19bea$export$a143d493d941bafc).createBuffer(b, new $15c6a7e2cd1ff7b0$var$Long(node.offset, 0), new $15c6a7e2cd1ff7b0$var$Long(node.length, 0));\n}\n/** @ignore */ const $15c6a7e2cd1ff7b0$var$platformIsLittleEndian = (()=>{\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n\n\n\n\n\n\n/** @ignore */ const $67bd99104835ca40$var$invalidMessageType = (type)=>`Expected ${(0, $f79edd7127f4719f$export$84577d7b7db4f876)[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const $67bd99104835ca40$var$nullMessage = (type)=>`Header pointer of flatbuffer-encoded ${(0, $f79edd7127f4719f$export$84577d7b7db4f876)[type]} Message is null or length 0.`;\n/** @ignore */ const $67bd99104835ca40$var$invalidMessageMetadata = (expected, actual)=>`Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const $67bd99104835ca40$var$invalidMessageBodyLength = (expected, actual)=>`Expected to read ${expected} bytes for message body, but only read ${actual}.`;\nclass $67bd99104835ca40$export$c464e0d778ce82be {\n    constructor(source){\n        this.source = source instanceof (0, $44f8cce78045ceee$export$8130652b8df6235f) ? source : new (0, $44f8cce78045ceee$export$8130652b8df6235f)(source);\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if (r.value === -1 && (r = this.readMetadataLength()).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        if ((r = this.readMetadata(r.value)).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        return r;\n    }\n    throw(value) {\n        return this.source.throw(value);\n    }\n    return(value) {\n        return this.source.return(value);\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) return null;\n        if (type != null && r.value.headerType !== type) throw new Error($67bd99104835ca40$var$invalidMessageType(type));\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) return new Uint8Array(0);\n        const buf = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) throw new Error($67bd99104835ca40$var$invalidMessageBodyLength(bodyLength, buf.byteLength));\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ buf.byteOffset % 8 === 0 && /* 2. */ buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema;\n        const message = this.readMessage(type);\n        const schema = message === null || message === void 0 ? void 0 : message.header();\n        if (throwIfNull && !schema) throw new Error($67bd99104835ca40$var$nullMessage(type));\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read($67bd99104835ca40$export$d3cda41e44a6352b);\n        const bb = buf && new (0, $b791e9664c1babe0$export$b21dcdb2a0c6c467)(buf);\n        const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;\n        return {\n            done: len === 0,\n            value: len\n        };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        if (buf.byteLength < metadataLength) throw new Error($67bd99104835ca40$var$invalidMessageMetadata(metadataLength, buf.byteLength));\n        return {\n            done: false,\n            value: (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).decode(buf)\n        };\n    }\n}\nclass $67bd99104835ca40$export$1550c5f3206c201c {\n    constructor(source, byteLength){\n        this.source = source instanceof (0, $44f8cce78045ceee$export$acccd0ac6a925199) ? source : (0, $f61ec9f35ec4c8b9$export$f7fb4208dd02b4db)(source) ? new (0, $c07b9a56e8c93016$export$4c8403cd526f9bff)(source, byteLength) : new (0, $44f8cce78045ceee$export$acccd0ac6a925199)(source);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    next() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            let r;\n            if ((r = yield this.readMetadataLength()).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n            // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n            // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n            // pre-v0.15 message, where the first 4 bytes are the metadata length.\n            if (r.value === -1 && (r = yield this.readMetadataLength()).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n            if ((r = yield this.readMetadata(r.value)).done) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n            return r;\n        });\n    }\n    throw(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return yield this.source.throw(value);\n        });\n    }\n    return(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return yield this.source.return(value);\n        });\n    }\n    readMessage(type) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            let r;\n            if ((r = yield this.next()).done) return null;\n            if (type != null && r.value.headerType !== type) throw new Error($67bd99104835ca40$var$invalidMessageType(type));\n            return r.value;\n        });\n    }\n    readMessageBody(bodyLength) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (bodyLength <= 0) return new Uint8Array(0);\n            const buf = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)((yield this.source.read(bodyLength)));\n            if (buf.byteLength < bodyLength) throw new Error($67bd99104835ca40$var$invalidMessageBodyLength(bodyLength, buf.byteLength));\n            // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n            // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n            return /* 1. */ buf.byteOffset % 8 === 0 && /* 2. */ buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice();\n        });\n    }\n    readSchema(throwIfNull = false) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const type = (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema;\n            const message = yield this.readMessage(type);\n            const schema = message === null || message === void 0 ? void 0 : message.header();\n            if (throwIfNull && !schema) throw new Error($67bd99104835ca40$var$nullMessage(type));\n            return schema;\n        });\n    }\n    readMetadataLength() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const buf = yield this.source.read($67bd99104835ca40$export$d3cda41e44a6352b);\n            const bb = buf && new (0, $b791e9664c1babe0$export$b21dcdb2a0c6c467)(buf);\n            const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;\n            return {\n                done: len === 0,\n                value: len\n            };\n        });\n    }\n    readMetadata(metadataLength) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const buf = yield this.source.read(metadataLength);\n            if (!buf) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n            if (buf.byteLength < metadataLength) throw new Error($67bd99104835ca40$var$invalidMessageMetadata(metadataLength, buf.byteLength));\n            return {\n                done: false,\n                value: (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).decode(buf)\n            };\n        });\n    }\n}\nclass $67bd99104835ca40$export$ee2b02392f0a0089 extends $67bd99104835ca40$export$c464e0d778ce82be {\n    constructor(source){\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof (0, $38d3e9fec019c197$export$b222306c71bb2657) ? source : new (0, $38d3e9fec019c197$export$b222306c71bb2657)(source);\n    }\n    next() {\n        const { _json: _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).fromJSON(_json.schema, (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema);\n            return {\n                done: false,\n                value: message\n            };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch[\"data\"][\"columns\"];\n            const message = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).fromJSON(batch, (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch);\n            return {\n                done: false,\n                value: message\n            };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch[\"columns\"];\n            const message = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).fromJSON(batch, (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch);\n            return {\n                done: false,\n                value: message\n            };\n        }\n        this._body = [];\n        return 0, $38d3e9fec019c197$export$597fde002da0996e;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column)=>[\n                    ...buffers,\n                    ...column[\"VALIDITY\"] && [\n                        column[\"VALIDITY\"]\n                    ] || [],\n                    ...column[\"TYPE\"] && [\n                        column[\"TYPE\"]\n                    ] || [],\n                    ...column[\"OFFSET\"] && [\n                        column[\"OFFSET\"]\n                    ] || [],\n                    ...column[\"DATA\"] && [\n                        column[\"DATA\"]\n                    ] || [],\n                    ...flattenDataSources(column[\"children\"])\n                ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) return null;\n        if (type != null && r.value.headerType !== type) throw new Error($67bd99104835ca40$var$invalidMessageType(type));\n        return r.value;\n    }\n    readSchema() {\n        const type = (0, $f79edd7127f4719f$export$84577d7b7db4f876).Schema;\n        const message = this.readMessage(type);\n        const schema = message === null || message === void 0 ? void 0 : message.header();\n        if (!message || !schema) throw new Error($67bd99104835ca40$var$nullMessage(type));\n        return schema;\n    }\n}\nconst $67bd99104835ca40$export$d3cda41e44a6352b = 4;\nconst $67bd99104835ca40$export$24cf6d3b9b7108f6 = \"ARROW1\";\nconst $67bd99104835ca40$export$b5f3c04026ef1f8 = new Uint8Array($67bd99104835ca40$export$24cf6d3b9b7108f6.length);\nfor(let i = 0; i < $67bd99104835ca40$export$24cf6d3b9b7108f6.length; i += 1)$67bd99104835ca40$export$b5f3c04026ef1f8[i] = $67bd99104835ca40$export$24cf6d3b9b7108f6.codePointAt(i);\nfunction $67bd99104835ca40$export$8545348ce176054(buffer, index = 0) {\n    for(let i = -1, n = $67bd99104835ca40$export$b5f3c04026ef1f8.length; ++i < n;){\n        if ($67bd99104835ca40$export$b5f3c04026ef1f8[i] !== buffer[index + i]) return false;\n    }\n    return true;\n}\nconst $67bd99104835ca40$export$46e067d7c10a9131 = $67bd99104835ca40$export$b5f3c04026ef1f8.length;\nconst $67bd99104835ca40$export$cd8f4fe533c69d26 = $67bd99104835ca40$export$46e067d7c10a9131 + $67bd99104835ca40$export$d3cda41e44a6352b;\nconst $67bd99104835ca40$export$bed22c2b3d840db7 = $67bd99104835ca40$export$46e067d7c10a9131 * 2 + $67bd99104835ca40$export$d3cda41e44a6352b;\n\n\n\nclass $5fa854a93d8dc494$export$5a0dee6589a95d88 extends (0, $38d3e9fec019c197$export$cba7c5923fc9b663) {\n    constructor(impl){\n        super();\n        this._impl = impl;\n    }\n    get closed() {\n        return this._impl.closed;\n    }\n    get schema() {\n        return this._impl.schema;\n    }\n    get autoDestroy() {\n        return this._impl.autoDestroy;\n    }\n    get dictionaries() {\n        return this._impl.dictionaries;\n    }\n    get numDictionaries() {\n        return this._impl.numDictionaries;\n    }\n    get numRecordBatches() {\n        return this._impl.numRecordBatches;\n    }\n    get footer() {\n        return this._impl.isFile() ? this._impl.footer : null;\n    }\n    isSync() {\n        return this._impl.isSync();\n    }\n    isAsync() {\n        return this._impl.isAsync();\n    }\n    isFile() {\n        return this._impl.isFile();\n    }\n    isStream() {\n        return this._impl.isStream();\n    }\n    next() {\n        return this._impl.next();\n    }\n    throw(value) {\n        return this._impl.throw(value);\n    }\n    return(value) {\n        return this._impl.return(value);\n    }\n    cancel() {\n        return this._impl.cancel();\n    }\n    reset(schema) {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    open(options) {\n        const opening = this._impl.open(options);\n        return (0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(opening) ? opening.then(()=>this) : this;\n    }\n    readRecordBatch(index) {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    [Symbol.iterator]() {\n        return this._impl[Symbol.iterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return this._impl[Symbol.asyncIterator]();\n    }\n    toDOMStream() {\n        return (0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).toDOMStream(this.isSync() ? {\n            [Symbol.iterator]: ()=>this\n        } : {\n            [Symbol.asyncIterator]: ()=>this\n        });\n    }\n    toNodeStream() {\n        return (0, $8a2782f1bb5c945f$export$2e2bcd8739ae039).toNodeStream(this.isSync() ? {\n            [Symbol.iterator]: ()=>this\n        } : {\n            [Symbol.asyncIterator]: ()=>this\n        }, {\n            objectMode: true\n        });\n    }\n    /** @nocollapse */ // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */ static throughDOM(// @ts-ignore\n    writableStrategy, // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /** @nocollapse */ static from(source) {\n        if (source instanceof $5fa854a93d8dc494$export$5a0dee6589a95d88) return source;\n        else if ((0, $f61ec9f35ec4c8b9$export$ab2374ca6cd4ece4)(source)) return $5fa854a93d8dc494$var$fromArrowJSON(source);\n        else if ((0, $f61ec9f35ec4c8b9$export$f7fb4208dd02b4db)(source)) return $5fa854a93d8dc494$var$fromFileHandle(source);\n        else if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(source)) return (()=>(0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n                return yield $5fa854a93d8dc494$export$5a0dee6589a95d88.from((yield source));\n            }))();\n        else if ((0, $f61ec9f35ec4c8b9$export$81f27058be86d7ea)(source) || (0, $f61ec9f35ec4c8b9$export$f8bb1f6b773199b7)(source) || (0, $f61ec9f35ec4c8b9$export$2940183a2d5db90f)(source) || (0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(source)) return $5fa854a93d8dc494$var$fromAsyncByteStream(new (0, $44f8cce78045ceee$export$acccd0ac6a925199)(source));\n        return $5fa854a93d8dc494$var$fromByteStream(new (0, $44f8cce78045ceee$export$8130652b8df6235f)(source));\n    }\n    /** @nocollapse */ static readAll(source) {\n        if (source instanceof $5fa854a93d8dc494$export$5a0dee6589a95d88) return source.isSync() ? $5fa854a93d8dc494$var$readAllSync(source) : $5fa854a93d8dc494$var$readAllAsync(source);\n        else if ((0, $f61ec9f35ec4c8b9$export$ab2374ca6cd4ece4)(source) || ArrayBuffer.isView(source) || (0, $f61ec9f35ec4c8b9$export$9652023d9040757)(source) || (0, $f61ec9f35ec4c8b9$export$84ac258cc3d60dc0)(source)) return $5fa854a93d8dc494$var$readAllSync(source);\n        return $5fa854a93d8dc494$var$readAllAsync(source);\n    }\n}\nclass $5fa854a93d8dc494$export$6ae70bde35df1f0e extends $5fa854a93d8dc494$export$5a0dee6589a95d88 {\n    constructor(_impl){\n        super(_impl);\n        this._impl = _impl;\n    }\n    readAll() {\n        return [\n            ...this\n        ];\n    }\n    [Symbol.iterator]() {\n        return this._impl[Symbol.iterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* _a() {\n            yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)((yield* (0, $5c96a02c592fcff1$export$bbd80228419bb833)((0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(this[Symbol.iterator]()))));\n        });\n    }\n}\nclass $5fa854a93d8dc494$export$c09c2de01ec55559 extends $5fa854a93d8dc494$export$5a0dee6589a95d88 {\n    constructor(_impl){\n        super(_impl);\n        this._impl = _impl;\n    }\n    readAll() {\n        var e_1, _a;\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const batches = new Array();\n            try {\n                for(var _b = (0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(this), _c; _c = yield _b.next(), !_c.done;){\n                    const batch = _c.value;\n                    batches.push(batch);\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n            return batches;\n        });\n    }\n    [Symbol.iterator]() {\n        throw new Error(`AsyncRecordBatchStreamReader is not Iterable`);\n    }\n    [Symbol.asyncIterator]() {\n        return this._impl[Symbol.asyncIterator]();\n    }\n}\nclass $5fa854a93d8dc494$export$21b25bf85f17f4ba extends $5fa854a93d8dc494$export$6ae70bde35df1f0e {\n    constructor(_impl){\n        super(_impl);\n        this._impl = _impl;\n    }\n}\nclass $5fa854a93d8dc494$export$d7ab60d5f5b03dbb extends $5fa854a93d8dc494$export$c09c2de01ec55559 {\n    constructor(_impl){\n        super(_impl);\n        this._impl = _impl;\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$RecordBatchReaderImpl {\n    constructor(dictionaries = new Map()){\n        this.closed = false;\n        this.autoDestroy = true;\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() {\n        return this._dictionaryIndex;\n    }\n    get numRecordBatches() {\n        return this._recordBatchIndex;\n    }\n    isSync() {\n        return false;\n    }\n    isAsync() {\n        return false;\n    }\n    isFile() {\n        return false;\n    }\n    isStream() {\n        return false;\n    }\n    reset(schema) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        const children = this._loadVectors(header, body, this.schema.fields);\n        const data = (0, $e570fe8df119273b$export$7dfaddfcce89fb4f)({\n            type: new (0, $7101ea1b1020e1ec$export$eabc71f011df675a)(this.schema.fields),\n            length: header.length,\n            children: children\n        });\n        return new (0, $7f44af34908592fc$export$cd370d004a302752)(this.schema, data);\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id: id, isDelta: isDelta } = header;\n        const { dictionaries: dictionaries, schema: schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id);\n            const data = this._loadVectors(header.data, body, [\n                type\n            ]);\n            return (dictionary && isDelta ? dictionary.concat(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)(data)) : new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)(data)).memoize();\n        }\n        return dictionary.memoize();\n    }\n    _loadVectors(header, body, types) {\n        return new (0, $df070b5e2232f4c1$export$6f22fd25972f18b8)(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$RecordBatchStreamReaderImpl extends $5fa854a93d8dc494$var$RecordBatchReaderImpl {\n    constructor(source, dictionaries){\n        super(dictionaries);\n        this._reader = !(0, $f61ec9f35ec4c8b9$export$ab2374ca6cd4ece4)(source) ? new (0, $67bd99104835ca40$export$c464e0d778ce82be)(this._handle = source) : new (0, $67bd99104835ca40$export$ee2b02392f0a0089)(this._handle = source);\n    }\n    isSync() {\n        return true;\n    }\n    isStream() {\n        return true;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    open(options) {\n        if (!this.closed) {\n            this.autoDestroy = $5fa854a93d8dc494$var$shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()))) this.cancel();\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) return this.reset()._reader.throw(value);\n        return 0, $38d3e9fec019c197$export$597fde002da0996e;\n    }\n    return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) return this.reset()._reader.return(value);\n        return 0, $38d3e9fec019c197$export$597fde002da0996e;\n    }\n    next() {\n        if (this.closed) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        let message;\n        const { _reader: reader } = this;\n        while(message = this._readNextMessageAndValidate()){\n            if (message.isSchema()) this.reset(message.header());\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return {\n                    done: false,\n                    value: recordBatch\n                };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return {\n                done: false,\n                value: new (0, $7f44af34908592fc$export$9dbf71c289537a87)(this.schema)\n            };\n        }\n        return this.return();\n    }\n    _readNextMessageAndValidate(type) {\n        return this._reader.readMessage(type);\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl extends $5fa854a93d8dc494$var$RecordBatchReaderImpl {\n    constructor(source, dictionaries){\n        super(dictionaries);\n        this._reader = new (0, $67bd99104835ca40$export$1550c5f3206c201c)(this._handle = source);\n    }\n    isAsync() {\n        return true;\n    }\n    isStream() {\n        return true;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    cancel() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this.closed && (this.closed = true)) {\n                yield this.reset()._reader.return();\n                this._reader = null;\n                this.dictionaries = null;\n            }\n        });\n    }\n    open(options) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this.closed) {\n                this.autoDestroy = $5fa854a93d8dc494$var$shouldAutoDestroy(this, options);\n                if (!(this.schema || (this.schema = yield this._reader.readSchema()))) yield this.cancel();\n            }\n            return this;\n        });\n    }\n    throw(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this.closed && this.autoDestroy && (this.closed = true)) return yield this.reset()._reader.throw(value);\n            return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        });\n    }\n    return(value) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this.closed && this.autoDestroy && (this.closed = true)) return yield this.reset()._reader.return(value);\n            return 0, $38d3e9fec019c197$export$597fde002da0996e;\n        });\n    }\n    next() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (this.closed) return 0, $38d3e9fec019c197$export$597fde002da0996e;\n            let message;\n            const { _reader: reader } = this;\n            while(message = yield this._readNextMessageAndValidate()){\n                if (message.isSchema()) yield this.reset(message.header());\n                else if (message.isRecordBatch()) {\n                    this._recordBatchIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return {\n                        done: false,\n                        value: recordBatch\n                    };\n                } else if (message.isDictionaryBatch()) {\n                    this._dictionaryIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n            if (this.schema && this._recordBatchIndex === 0) {\n                this._recordBatchIndex++;\n                return {\n                    done: false,\n                    value: new (0, $7f44af34908592fc$export$9dbf71c289537a87)(this.schema)\n                };\n            }\n            return yield this.return();\n        });\n    }\n    _readNextMessageAndValidate(type) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return yield this._reader.readMessage(type);\n        });\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$RecordBatchFileReaderImpl extends $5fa854a93d8dc494$var$RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries){\n        super(source instanceof (0, $c07b9a56e8c93016$export$f0e578974429970a) ? source : new (0, $c07b9a56e8c93016$export$f0e578974429970a)(source), dictionaries);\n    }\n    get footer() {\n        return this._footer;\n    }\n    get numDictionaries() {\n        return this._footer ? this._footer.numDictionaries : 0;\n    }\n    get numRecordBatches() {\n        return this._footer ? this._footer.numRecordBatches : 0;\n    }\n    isSync() {\n        return true;\n    }\n    isFile() {\n        return true;\n    }\n    open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches())block && this._readDictionaryBatch(this._dictionaryIndex++);\n        }\n        return super.open(options);\n    }\n    readRecordBatch(index) {\n        var _a;\n        if (this.closed) return null;\n        if (!this._footer) this.open();\n        const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage((0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch);\n            if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    _readDictionaryBatch(index) {\n        var _a;\n        const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage((0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch);\n            if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    _readFooter() {\n        const { _handle: _handle } = this;\n        const offset = _handle.size - (0, $67bd99104835ca40$export$cd8f4fe533c69d26);\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return (0, $407d155e284267e1$export$a06f1c675e846f6f).decode(buffer);\n    }\n    _readNextMessageAndValidate(type) {\n        var _a;\n        if (!this._footer) this.open();\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) return this._reader.readMessage(type);\n        }\n        return null;\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$AsyncRecordBatchFileReaderImpl extends $5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl {\n    constructor(source, ...rest){\n        const byteLength = typeof rest[0] !== \"number\" ? rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n        super(source instanceof (0, $c07b9a56e8c93016$export$4c8403cd526f9bff) ? source : new (0, $c07b9a56e8c93016$export$4c8403cd526f9bff)(source, byteLength), dictionaries);\n    }\n    get footer() {\n        return this._footer;\n    }\n    get numDictionaries() {\n        return this._footer ? this._footer.numDictionaries : 0;\n    }\n    get numRecordBatches() {\n        return this._footer ? this._footer.numRecordBatches : 0;\n    }\n    isFile() {\n        return true;\n    }\n    isAsync() {\n        return true;\n    }\n    open(options) {\n        const _super = Object.create(null, {\n            open: {\n                get: ()=>super.open\n            }\n        });\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this.closed && !this._footer) {\n                this.schema = (this._footer = yield this._readFooter()).schema;\n                for (const block of this._footer.dictionaryBatches())block && (yield this._readDictionaryBatch(this._dictionaryIndex++));\n            }\n            return yield _super.open.call(this, options);\n        });\n    }\n    readRecordBatch(index) {\n        var _a;\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (this.closed) return null;\n            if (!this._footer) yield this.open();\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n            if (block && (yield this._handle.seek(block.offset))) {\n                const message = yield this._reader.readMessage((0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch);\n                if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {\n                    const header = message.header();\n                    const buffer = yield this._reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return recordBatch;\n                }\n            }\n            return null;\n        });\n    }\n    _readDictionaryBatch(index) {\n        var _a;\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n            if (block && (yield this._handle.seek(block.offset))) {\n                const message = yield this._reader.readMessage((0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch);\n                if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {\n                    const header = message.header();\n                    const buffer = yield this._reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n        });\n    }\n    _readFooter() {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const { _handle: _handle } = this;\n            _handle._pending && (yield _handle._pending);\n            const offset = _handle.size - (0, $67bd99104835ca40$export$cd8f4fe533c69d26);\n            const length = yield _handle.readInt32(offset);\n            const buffer = yield _handle.readAt(offset - length, length);\n            return (0, $407d155e284267e1$export$a06f1c675e846f6f).decode(buffer);\n        });\n    }\n    _readNextMessageAndValidate(type) {\n        return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (!this._footer) yield this.open();\n            if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n                const block = this._footer.getRecordBatch(this._recordBatchIndex);\n                if (block && (yield this._handle.seek(block.offset))) return yield this._reader.readMessage(type);\n            }\n            return null;\n        });\n    }\n}\n/** @ignore */ class $5fa854a93d8dc494$var$RecordBatchJSONReaderImpl extends $5fa854a93d8dc494$var$RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries){\n        super(source, dictionaries);\n    }\n    _loadVectors(header, body, types) {\n        return new (0, $df070b5e2232f4c1$export$447fd3976f575d87)(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */ function $5fa854a93d8dc494$var$shouldAutoDestroy(self, options) {\n    return options && typeof options[\"autoDestroy\"] === \"boolean\" ? options[\"autoDestroy\"] : self[\"autoDestroy\"];\n}\n/** @ignore */ function* $5fa854a93d8dc494$var$readAllSync(source) {\n    const reader = $5fa854a93d8dc494$export$5a0dee6589a95d88.from(source);\n    try {\n        if (!reader.open({\n            autoDestroy: false\n        }).closed) do yield reader;\n        while (!reader.reset().open().closed);\n    } finally{\n        reader.cancel();\n    }\n}\n/** @ignore */ function $5fa854a93d8dc494$var$readAllAsync(source) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function* readAllAsync_1() {\n        const reader = yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)($5fa854a93d8dc494$export$5a0dee6589a95d88.from(source));\n        try {\n            if (!(yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(reader.open({\n                autoDestroy: false\n            }))).closed) do yield yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(reader);\n            while (!(yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(reader.reset().open())).closed);\n        } finally{\n            yield (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(reader.cancel());\n        }\n    });\n}\n/** @ignore */ function $5fa854a93d8dc494$var$fromArrowJSON(source) {\n    return new $5fa854a93d8dc494$export$6ae70bde35df1f0e(new $5fa854a93d8dc494$var$RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */ function $5fa854a93d8dc494$var$fromByteStream(source) {\n    const bytes = source.peek((0, $67bd99104835ca40$export$46e067d7c10a9131) + 7 & -8);\n    return bytes && bytes.byteLength >= 4 ? !(0, $67bd99104835ca40$export$8545348ce176054)(bytes) ? new $5fa854a93d8dc494$export$6ae70bde35df1f0e(new $5fa854a93d8dc494$var$RecordBatchStreamReaderImpl(source)) : new $5fa854a93d8dc494$export$21b25bf85f17f4ba(new $5fa854a93d8dc494$var$RecordBatchFileReaderImpl(source.read())) : new $5fa854a93d8dc494$export$6ae70bde35df1f0e(new $5fa854a93d8dc494$var$RecordBatchStreamReaderImpl(function*() {}()));\n}\n/** @ignore */ function $5fa854a93d8dc494$var$fromAsyncByteStream(source) {\n    return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n        const bytes = yield source.peek((0, $67bd99104835ca40$export$46e067d7c10a9131) + 7 & -8);\n        return bytes && bytes.byteLength >= 4 ? !(0, $67bd99104835ca40$export$8545348ce176054)(bytes) ? new $5fa854a93d8dc494$export$c09c2de01ec55559(new $5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl(source)) : new $5fa854a93d8dc494$export$21b25bf85f17f4ba(new $5fa854a93d8dc494$var$RecordBatchFileReaderImpl((yield source.read()))) : new $5fa854a93d8dc494$export$c09c2de01ec55559(new $5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl(function() {\n            return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function*() {});\n        }()));\n    });\n}\n/** @ignore */ function $5fa854a93d8dc494$var$fromFileHandle(source) {\n    return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n        const { size: size } = yield source.stat();\n        const file = new (0, $c07b9a56e8c93016$export$4c8403cd526f9bff)(source, size);\n        if (size >= (0, $67bd99104835ca40$export$bed22c2b3d840db7) && (0, $67bd99104835ca40$export$8545348ce176054)((yield file.readAt(0, (0, $67bd99104835ca40$export$46e067d7c10a9131) + 7 & -8)))) return new $5fa854a93d8dc494$export$d7ab60d5f5b03dbb(new $5fa854a93d8dc494$var$AsyncRecordBatchFileReaderImpl(file));\n        return new $5fa854a93d8dc494$export$c09c2de01ec55559(new $5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl(file));\n    });\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\n\n\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\n\n\nclass $32528265779863d2$export$d099cf3bf6e2bc7b extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    constructor(){\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */ static assemble(...args) {\n        const unwrap = (nodes)=>nodes.flatMap((node)=>Array.isArray(node) ? unwrap(node) : node instanceof (0, $7f44af34908592fc$export$cd370d004a302752) ? node.data.children : node.data);\n        const assembler = new $32528265779863d2$export$d099cf3bf6e2bc7b();\n        assembler.visitMany(unwrap(args));\n        return assembler;\n    }\n    visit(data) {\n        if (data instanceof (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)) {\n            this.visitMany(data.data);\n            return this;\n        }\n        const { type: type } = data;\n        if (!(0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(type)) {\n            const { length: length, nullCount: nullCount } = data;\n            if (length > 2147483647) /* istanbul ignore next */ throw new RangeError(\"Cannot write arrays larger than 2^31 - 1 in length\");\n            if (!(0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isNull(type)) $32528265779863d2$var$addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer\n             : (0, $d76f09d2d6f16785$export$c21fe70cd847afb)(data.offset, length, data.nullBitmap));\n            this.nodes.push(new (0, $15c6a7e2cd1ff7b0$export$e0208c849596fb6a)(length, nullCount));\n        }\n        return super.visit(data);\n    }\n    visitNull(_null) {\n        return this;\n    }\n    visitDictionary(data) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(data.clone(data.type.indices));\n    }\n    get nodes() {\n        return this._nodes;\n    }\n    get buffers() {\n        return this._buffers;\n    }\n    get byteLength() {\n        return this._byteLength;\n    }\n    get bufferRegions() {\n        return this._bufferRegions;\n    }\n}\n/** @ignore */ function $32528265779863d2$var$addBuffer(values) {\n    const byteLength = values.byteLength + 7 & -8; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new (0, $15c6a7e2cd1ff7b0$export$64d9b66387ab167f)(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n/** @ignore */ function $32528265779863d2$var$assembleUnion(data) {\n    const { type: type, length: length, typeIds: typeIds, valueOffsets: valueOffsets } = data;\n    // All Union Vectors have a typeIds buffer\n    $32528265779863d2$var$addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Sparse) return $32528265779863d2$var$assembleNestedVector.call(this, data);\n    else if (type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (data.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            $32528265779863d2$var$addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return $32528265779863d2$var$assembleNestedVector.call(this, data);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y)=>Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = (0, $6a2dadc936df2dd3$export$d83d9287259d394b)(-valueOffsets[0], length, valueOffsets);\n            for(let typeId, shift, index = -1; ++index < length;){\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            $32528265779863d2$var$addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for(let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;)if (child = data.children[childIndex]) {\n                const typeId = type.typeIds[childIndex];\n                const childLength = Math.min(length, childLengths[typeId]);\n                this.visit(child.slice(childOffsets[typeId], childLength));\n            }\n        }\n    }\n    return this;\n}\n/** @ignore */ function $32528265779863d2$var$assembleBoolVector(data) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (data.nullCount >= data.length) // If all values are null, just insert a placeholder empty data buffer (fastest path)\n    return $32528265779863d2$var$addBuffer.call(this, new Uint8Array(0));\n    else if ((values = data.values) instanceof Uint8Array) // If values is already a Uint8Array, slice the bitmap (fast path)\n    return $32528265779863d2$var$addBuffer.call(this, (0, $d76f09d2d6f16785$export$c21fe70cd847afb)(data.offset, data.length, values));\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we're only doing this for safety.\n    /* istanbul ignore next */ return $32528265779863d2$var$addBuffer.call(this, (0, $d76f09d2d6f16785$export$9b04d6b190dfec92)(data.values));\n}\n/** @ignore */ function $32528265779863d2$var$assembleFlatVector(data) {\n    return $32528265779863d2$var$addBuffer.call(this, data.values.subarray(0, data.length * data.stride));\n}\n/** @ignore */ function $32528265779863d2$var$assembleFlatListVector(data) {\n    const { length: length, values: values, valueOffsets: valueOffsets } = data;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    $32528265779863d2$var$addBuffer.call(this, (0, $6a2dadc936df2dd3$export$d83d9287259d394b)(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    $32528265779863d2$var$addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n/** @ignore */ function $32528265779863d2$var$assembleListVector(data) {\n    const { length: length, valueOffsets: valueOffsets } = data;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) $32528265779863d2$var$addBuffer.call(this, (0, $6a2dadc936df2dd3$export$d83d9287259d394b)(valueOffsets[0], length, valueOffsets));\n    // Then insert the List's values child\n    return this.visit(data.children[0]);\n}\n/** @ignore */ function $32528265779863d2$var$assembleNestedVector(data) {\n    return this.visitMany(data.type.children.map((_, i)=>data.children[i]).filter(Boolean))[0];\n}\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitBool = $32528265779863d2$var$assembleBoolVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitInt = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitFloat = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitUtf8 = $32528265779863d2$var$assembleFlatListVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitBinary = $32528265779863d2$var$assembleFlatListVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitFixedSizeBinary = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitDate = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitTimestamp = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitTime = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitDecimal = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitList = $32528265779863d2$var$assembleListVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitStruct = $32528265779863d2$var$assembleNestedVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitUnion = $32528265779863d2$var$assembleUnion;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitInterval = $32528265779863d2$var$assembleFlatVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitFixedSizeList = $32528265779863d2$var$assembleListVector;\n$32528265779863d2$export$d099cf3bf6e2bc7b.prototype.visitMap = $32528265779863d2$var$assembleListVector;\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nclass $367429a607910d6b$export$68005748b3bbba5c extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    visit(node) {\n        return node == null ? undefined : super.visit(node);\n    }\n    visitNull({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitInt({ typeId: typeId, bitWidth: bitWidth, isSigned: isSigned }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"bitWidth\": bitWidth,\n            \"isSigned\": isSigned\n        };\n    }\n    visitFloat({ typeId: typeId, precision: precision }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"precision\": (0, $f79edd7127f4719f$export$be201676156f3e60)[precision]\n        };\n    }\n    visitBinary({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitBool({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitUtf8({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitDecimal({ typeId: typeId, scale: scale, precision: precision, bitWidth: bitWidth }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"scale\": scale,\n            \"precision\": precision,\n            \"bitWidth\": bitWidth\n        };\n    }\n    visitDate({ typeId: typeId, unit: unit }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"unit\": (0, $f79edd7127f4719f$export$b3f55ef7f087e744)[unit]\n        };\n    }\n    visitTime({ typeId: typeId, unit: unit, bitWidth: bitWidth }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"unit\": (0, $f79edd7127f4719f$export$d9e59215631231e3)[unit],\n            bitWidth: bitWidth\n        };\n    }\n    visitTimestamp({ typeId: typeId, timezone: timezone, unit: unit }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"unit\": (0, $f79edd7127f4719f$export$d9e59215631231e3)[unit],\n            timezone: timezone\n        };\n    }\n    visitInterval({ typeId: typeId, unit: unit }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"unit\": (0, $f79edd7127f4719f$export$dd27fec05eba03b)[unit]\n        };\n    }\n    visitList({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitStruct({ typeId: typeId }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase()\n        };\n    }\n    visitUnion({ typeId: typeId, mode: mode, typeIds: typeIds }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"mode\": (0, $f79edd7127f4719f$export$a82fae803f3856de)[mode],\n            \"typeIds\": [\n                ...typeIds\n            ]\n        };\n    }\n    visitDictionary(node) {\n        return this.visit(node.dictionary);\n    }\n    visitFixedSizeBinary({ typeId: typeId, byteWidth: byteWidth }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"byteWidth\": byteWidth\n        };\n    }\n    visitFixedSizeList({ typeId: typeId, listSize: listSize }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"listSize\": listSize\n        };\n    }\n    visitMap({ typeId: typeId, keysSorted: keysSorted }) {\n        return {\n            \"name\": (0, $01b9561b6ed8e117$export$92738401e1603719)[typeId].toLowerCase(),\n            \"keysSorted\": keysSorted\n        };\n    }\n}\n\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n\n\n\nclass $127290ff6bdb91e8$export$66865573d008b044 extends (0, $f311b4df488f5c42$export$9d54d4ec2dd4b364) {\n    /** @nocollapse */ static assemble(...batches) {\n        const assemlber = new $127290ff6bdb91e8$export$66865573d008b044();\n        return batches.map(({ schema: schema, data: data })=>{\n            return assemlber.visitMany(schema.fields, data.children);\n        });\n    }\n    visit({ name: name }, data) {\n        const { length: length } = data;\n        const { offset: offset, nullCount: nullCount, nullBitmap: nullBitmap } = data;\n        const type = (0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(data.type) ? data.type.indices : data.type;\n        const buffers = Object.assign([], data.buffers, {\n            [(0, $f79edd7127f4719f$export$a9b603917c4d9863).VALIDITY]: undefined\n        });\n        return Object.assign({\n            \"name\": name,\n            \"count\": length,\n            \"VALIDITY\": (0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n                length: length\n            }, ()=>1) : [\n                ...new (0, $d76f09d2d6f16785$export$a90f4fb3bdcebd60)(nullBitmap, offset, length, null, (0, $d76f09d2d6f16785$export$eb7cc99bb8a55d01))\n            ]\n        }, super.visit(data.clone(type, offset, length, 0, buffers)));\n    }\n    visitNull() {\n        return {};\n    }\n    visitBool({ values: values, offset: offset, length: length }) {\n        return {\n            \"DATA\": [\n                ...new (0, $d76f09d2d6f16785$export$a90f4fb3bdcebd60)(values, offset, length, null, (0, $d76f09d2d6f16785$export$2c6d6dc83860258d))\n            ]\n        };\n    }\n    visitInt(data) {\n        return {\n            \"DATA\": data.type.bitWidth < 64 ? [\n                ...data.values\n            ] : [\n                ...$127290ff6bdb91e8$var$bigNumsToStrings(data.values, 2)\n            ]\n        };\n    }\n    visitFloat(data) {\n        return {\n            \"DATA\": [\n                ...data.values\n            ]\n        };\n    }\n    visitUtf8(data) {\n        return {\n            \"DATA\": [\n                ...new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                    data\n                ])\n            ],\n            \"OFFSET\": [\n                ...data.valueOffsets\n            ]\n        };\n    }\n    visitBinary(data) {\n        return {\n            \"DATA\": [\n                ...$127290ff6bdb91e8$var$binaryToString(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                    data\n                ]))\n            ],\n            OFFSET: [\n                ...data.valueOffsets\n            ]\n        };\n    }\n    visitFixedSizeBinary(data) {\n        return {\n            \"DATA\": [\n                ...$127290ff6bdb91e8$var$binaryToString(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n                    data\n                ]))\n            ]\n        };\n    }\n    visitDate(data) {\n        return {\n            \"DATA\": data.type.unit === (0, $f79edd7127f4719f$export$b3f55ef7f087e744).DAY ? [\n                ...data.values\n            ] : [\n                ...$127290ff6bdb91e8$var$bigNumsToStrings(data.values, 2)\n            ]\n        };\n    }\n    visitTimestamp(data) {\n        return {\n            \"DATA\": [\n                ...$127290ff6bdb91e8$var$bigNumsToStrings(data.values, 2)\n            ]\n        };\n    }\n    visitTime(data) {\n        return {\n            \"DATA\": data.type.unit < (0, $f79edd7127f4719f$export$d9e59215631231e3).MICROSECOND ? [\n                ...data.values\n            ] : [\n                ...$127290ff6bdb91e8$var$bigNumsToStrings(data.values, 2)\n            ]\n        };\n    }\n    visitDecimal(data) {\n        return {\n            \"DATA\": [\n                ...$127290ff6bdb91e8$var$bigNumsToStrings(data.values, 4)\n            ]\n        };\n    }\n    visitList(data) {\n        return {\n            \"OFFSET\": [\n                ...data.valueOffsets\n            ],\n            \"children\": this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitStruct(data) {\n        return {\n            \"children\": this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitUnion(data) {\n        return {\n            \"TYPE\": [\n                ...data.typeIds\n            ],\n            \"OFFSET\": data.type.mode === (0, $f79edd7127f4719f$export$a82fae803f3856de).Dense ? [\n                ...data.valueOffsets\n            ] : undefined,\n            \"children\": this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitInterval(data) {\n        return {\n            \"DATA\": [\n                ...data.values\n            ]\n        };\n    }\n    visitFixedSizeList(data) {\n        return {\n            \"children\": this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitMap(data) {\n        return {\n            \"OFFSET\": [\n                ...data.valueOffsets\n            ],\n            \"children\": this.visitMany(data.type.children, data.children)\n        };\n    }\n}\n/** @ignore */ function* $127290ff6bdb91e8$var$binaryToString(vector) {\n    for (const octets of vector)yield octets.reduce((str, byte)=>{\n        return `${str}${(\"0\" + (byte & 0xFF).toString(16)).slice(-2)}`;\n    }, \"\").toUpperCase();\n}\n/** @ignore */ function* $127290ff6bdb91e8$var$bigNumsToStrings(values, stride) {\n    const u32s = new Uint32Array(values.buffer);\n    for(let i = -1, n = u32s.length / stride; ++i < n;)yield `${(0, $9aed8ed3a6d26f6b$export$ed16643e9b9e3dfe).new(u32s.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n}\n\n\n\n\n\n\nclass $3ac5500f0db84a2c$export$f2a6581ee02d5205 extends (0, $38d3e9fec019c197$export$cba7c5923fc9b663) {\n    constructor(options){\n        super();\n        this._position = 0;\n        this._started = false;\n        // @ts-ignore\n        this._sink = new (0, $44f8cce78045ceee$export$7e4b59827e1829f)();\n        this._schema = null;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        (0, $f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a)(options) || (options = {\n            autoDestroy: true,\n            writeLegacyIpcFormat: false\n        });\n        this._autoDestroy = typeof options.autoDestroy === \"boolean\" ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === \"boolean\" ? options.writeLegacyIpcFormat : false;\n    }\n    /** @nocollapse */ // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */ static throughDOM(// @ts-ignore\n    writableStrategy, // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toString(sync = false) {\n        return this._sink.toString(sync);\n    }\n    toUint8Array(sync = false) {\n        return this._sink.toUint8Array(sync);\n    }\n    writeAll(input) {\n        if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(input)) return input.then((x)=>this.writeAll(x));\n        else if ((0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(input)) return $3ac5500f0db84a2c$var$writeAllAsync(this, input);\n        return $3ac5500f0db84a2c$var$writeAll(this, input);\n    }\n    get closed() {\n        return this._sink.closed;\n    }\n    [Symbol.asyncIterator]() {\n        return this._sink[Symbol.asyncIterator]();\n    }\n    toDOMStream(options) {\n        return this._sink.toDOMStream(options);\n    }\n    toNodeStream(options) {\n        return this._sink.toNodeStream(options);\n    }\n    close() {\n        return this.reset()._sink.close();\n    }\n    abort(reason) {\n        return this.reset()._sink.abort(reason);\n    }\n    finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    reset(sink = this._sink, schema = null) {\n        if (sink === this._sink || sink instanceof (0, $44f8cce78045ceee$export$7e4b59827e1829f)) this._sink = sink;\n        else {\n            this._sink = new (0, $44f8cce78045ceee$export$7e4b59827e1829f)();\n            if (sink && (0, $f61ec9f35ec4c8b9$export$5536d41d90245d51)(sink)) this.toDOMStream({\n                type: \"bytes\"\n            }).pipeTo(sink);\n            else if (sink && (0, $f61ec9f35ec4c8b9$export$eec1f46c8eef21a4)(sink)) this.toNodeStream({\n                objectMode: false\n            }).pipe(sink);\n        }\n        if (this._started && this._schema) this._writeFooter(this._schema);\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        if (!schema || !(0, $d47c8e7f9c21dc9d$export$fcd775bba374c9dc)(schema, this._schema)) {\n            if (schema == null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n        return this;\n    }\n    write(payload) {\n        let schema = null;\n        if (!this._sink) throw new Error(`RecordBatchWriter is closed`);\n        else if (payload == null) return this.finish() && undefined;\n        else if (payload instanceof (0, $8aa47498f8e624f2$export$54ec01a60f47d33d) && !(schema = payload.schema)) return this.finish() && undefined;\n        else if (payload instanceof (0, $7f44af34908592fc$export$cd370d004a302752) && !(schema = payload.schema)) return this.finish() && undefined;\n        if (schema && !(0, $d47c8e7f9c21dc9d$export$fcd775bba374c9dc)(schema, this._schema)) {\n            if (this._started && this._autoDestroy) return this.close();\n            this.reset(this._sink, schema);\n        }\n        if (payload instanceof (0, $7f44af34908592fc$export$cd370d004a302752)) {\n            if (!(payload instanceof (0, $7f44af34908592fc$export$9dbf71c289537a87))) this._writeRecordBatch(payload);\n        } else if (payload instanceof (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)) this.writeAll(payload.batches);\n        else if ((0, $f61ec9f35ec4c8b9$export$9652023d9040757)(payload)) this.writeAll(payload);\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = flatbufferSize + prefixSize + a & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n        if (message.headerType === (0, $f79edd7127f4719f$export$84577d7b7db4f876).RecordBatch) this._recordBatchBlocks.push(new (0, $407d155e284267e1$export$f0973857ccdc167a)(alignedSize, message.bodyLength, this._position));\n        else if (message.headerType === (0, $f79edd7127f4719f$export$84577d7b7db4f876).DictionaryBatch) this._dictionaryBlocks.push(new (0, $407d155e284267e1$export$f0973857ccdc167a)(alignedSize, message.bodyLength, this._position));\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) this._write(Int32Array.of(-1));\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) this._write(buffer);\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(chunk) {\n        if (this._started) {\n            const buffer = (0, $6a2dadc936df2dd3$export$73470fd2221e6aef)(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this._writeMessage((0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).from(schema));\n    }\n    // @ts-ignore\n    _writeFooter(schema) {\n        // eos bytes\n        return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n    }\n    _writeMagic() {\n        return this._write((0, $67bd99104835ca40$export$b5f3c04026ef1f8));\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n    _writeRecordBatch(batch) {\n        const { byteLength: byteLength, nodes: nodes, bufferRegions: bufferRegions, buffers: buffers } = (0, $32528265779863d2$export$d099cf3bf6e2bc7b).assemble(batch);\n        const recordBatch = new $15c6a7e2cd1ff7b0$export$cd370d004a302752(batch.numRows, nodes, bufferRegions);\n        const message = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).from(recordBatch, byteLength);\n        return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength: byteLength, nodes: nodes, bufferRegions: bufferRegions, buffers: buffers } = (0, $32528265779863d2$export$d099cf3bf6e2bc7b).assemble(new (0, $32ea7584b42ab85d$export$9b781de7bf37bf48)([\n            dictionary\n        ]));\n        const recordBatch = new $15c6a7e2cd1ff7b0$export$cd370d004a302752(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new $15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77(recordBatch, id, isDelta);\n        const message = (0, $15c6a7e2cd1ff7b0$export$f69c19e57285b83a).from(dictionaryBatch, byteLength);\n        return this._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for(let i = -1, n = buffers.length; ++i < n;)if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n            this._write(buffer);\n            if ((padding = (size + 7 & -8) - size) > 0) this._writePadding(padding);\n        }\n        return this;\n    }\n    _writeDictionaries(batch) {\n        for (let [id, dictionary] of batch.dictionaries){\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset)).length > 0) for (const data of dictionary.data){\n                this._writeDictionaryBatch(data, id, offset > 0);\n                offset += data.length;\n            }\n        }\n        return this;\n    }\n}\nclass $3ac5500f0db84a2c$export$a5292f96f1526f22 extends $3ac5500f0db84a2c$export$f2a6581ee02d5205 {\n    /** @nocollapse */ static writeAll(input, options) {\n        const writer = new $3ac5500f0db84a2c$export$a5292f96f1526f22(options);\n        if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(input)) return input.then((x)=>writer.writeAll(x));\n        else if ((0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(input)) return $3ac5500f0db84a2c$var$writeAllAsync(writer, input);\n        return $3ac5500f0db84a2c$var$writeAll(writer, input);\n    }\n}\nclass $3ac5500f0db84a2c$export$5677695a2f9e2dcf extends $3ac5500f0db84a2c$export$f2a6581ee02d5205 {\n    /** @nocollapse */ static writeAll(input) {\n        const writer = new $3ac5500f0db84a2c$export$5677695a2f9e2dcf();\n        if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(input)) return input.then((x)=>writer.writeAll(x));\n        else if ((0, $f61ec9f35ec4c8b9$export$edb10ab8dd75a915)(input)) return $3ac5500f0db84a2c$var$writeAllAsync(writer, input);\n        return $3ac5500f0db84a2c$var$writeAll(writer, input);\n    }\n    constructor(){\n        super();\n        this._autoDestroy = true;\n    }\n    // @ts-ignore\n    _writeSchema(schema) {\n        return this._writeMagic()._writePadding(2);\n    }\n    _writeFooter(schema) {\n        const buffer = (0, $407d155e284267e1$export$a06f1c675e846f6f).encode(new (0, $407d155e284267e1$export$a06f1c675e846f6f)(schema, (0, $f79edd7127f4719f$export$12ea6169eb5318ff).V4, this._recordBatchBlocks, this._dictionaryBlocks));\n        return super._writeFooter(schema) // EOS bytes for sequential readers\n        ._write(buffer) // Write the flatbuffer\n        ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n        ._writeMagic(); // then the magic suffix\n    }\n}\nclass $3ac5500f0db84a2c$export$75f02b57ad76b6d1 extends $3ac5500f0db84a2c$export$f2a6581ee02d5205 {\n    constructor(){\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n    /** @nocollapse */ static writeAll(input) {\n        return new $3ac5500f0db84a2c$export$75f02b57ad76b6d1().writeAll(input);\n    }\n    _writeMessage() {\n        return this;\n    }\n    // @ts-ignore\n    _writeFooter(schema) {\n        return this;\n    }\n    _writeSchema(schema) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({\n            fields: schema.fields.map((field)=>$3ac5500f0db84a2c$var$fieldToJSON(field))\n        }, null, 2)}`);\n    }\n    _writeDictionaries(batch) {\n        if (batch.dictionaries.size > 0) this._dictionaries.push(batch);\n        return this;\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${$3ac5500f0db84a2c$var$dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new (0, $407d155e284267e1$export$f0973857ccdc167a)(0, 0, 0));\n        return this;\n    }\n    _writeRecordBatch(batch) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    close() {\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries)super._writeDictionaries(batch);\n            this._write(`\\n  ]`);\n        }\n        if (this._recordBatches.length > 0) {\n            for(let i = -1, n = this._recordBatches.length; ++i < n;){\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${$3ac5500f0db84a2c$var$recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new (0, $407d155e284267e1$export$f0973857ccdc167a)(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) this._write(`\\n}`);\n        this._dictionaries = [];\n        this._recordBatches = [];\n        return super.close();\n    }\n}\n/** @ignore */ function $3ac5500f0db84a2c$var$writeAll(writer, input) {\n    let chunks = input;\n    if (input instanceof (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)) {\n        chunks = input.batches;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks)writer.write(batch);\n    return writer.finish();\n}\n/** @ignore */ function $3ac5500f0db84a2c$var$writeAllAsync(writer, batches) {\n    var batches_1, batches_1_1;\n    var e_1, _a;\n    return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n        try {\n            for(batches_1 = (0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(batches); batches_1_1 = yield batches_1.next(), !batches_1_1.done;){\n                const batch = batches_1_1.value;\n                writer.write(batch);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        return writer.finish();\n    });\n}\n/** @ignore */ function $3ac5500f0db84a2c$var$fieldToJSON({ name: name, type: type, nullable: nullable }) {\n    const assembler = new (0, $367429a607910d6b$export$68005748b3bbba5c)();\n    return {\n        \"name\": name,\n        \"nullable\": nullable,\n        \"type\": assembler.visit(type),\n        \"children\": (type.children || []).map((field)=>$3ac5500f0db84a2c$var$fieldToJSON(field)),\n        \"dictionary\": !(0, $7101ea1b1020e1ec$export$45c69700ee30a78c).isDictionary(type) ? undefined : {\n            \"id\": type.id,\n            \"isOrdered\": type.isOrdered,\n            \"indexType\": assembler.visit(type.indices)\n        }\n    };\n}\n/** @ignore */ function $3ac5500f0db84a2c$var$dictionaryBatchToJSON(dictionary, id, isDelta = false) {\n    const [columns] = (0, $127290ff6bdb91e8$export$66865573d008b044).assemble(new (0, $7f44af34908592fc$export$cd370d004a302752)({\n        [id]: dictionary\n    }));\n    return JSON.stringify({\n        \"id\": id,\n        \"isDelta\": isDelta,\n        \"data\": {\n            \"count\": dictionary.length,\n            \"columns\": columns\n        }\n    }, null, 2);\n}\n/** @ignore */ function $3ac5500f0db84a2c$var$recordBatchToJSON(records) {\n    const [columns] = (0, $127290ff6bdb91e8$export$66865573d008b044).assemble(records);\n    return JSON.stringify({\n        \"count\": records.numRows,\n        \"columns\": columns\n    }, null, 2);\n}\n\n\nfunction $5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24(input) {\n    const reader = (0, $5fa854a93d8dc494$export$5a0dee6589a95d88).from(input);\n    if ((0, $f61ec9f35ec4c8b9$export$4369c812aac99591)(reader)) return reader.then((reader)=>$5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24(reader));\n    if (reader.isAsync()) return reader.readAll().then((xs)=>new (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)(xs));\n    return new (0, $8aa47498f8e624f2$export$54ec01a60f47d33d)(reader.readAll());\n}\nfunction $5fc0b9883ecba97e$export$ddfc347390f432fc(table, type = \"stream\") {\n    return (type === \"stream\" ? (0, $3ac5500f0db84a2c$export$a5292f96f1526f22) : (0, $3ac5500f0db84a2c$export$5677695a2f9e2dcf)).writeAll(table).toUint8Array(true);\n}\n\n\nvar $e98ce2190743c8e4$export$c6fd6ce53f6943cf = /** @class */ function() {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function(rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\n                    \"blank\"\n                ];\n                if (columnIndex > 0) classNames.push(\"level\" + rowIndex);\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            } else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            } else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\".concat(_this.uuid, \"level\").concat(columnIndex, \"_row\").concat(dataRowIndex),\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            } else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex) : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\".concat(_this.uuid, \"row\").concat(dataRowIndex, \"_col\").concat(dataColumnIndex),\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function(table, rowIndex, columnIndex) {\n            var column = table.getChildAt(columnIndex);\n            if (column === null) return \"\";\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch(columnTypeId){\n                case (0, $f79edd7127f4719f$export$92738401e1603719).Timestamp:\n                    return _this.nanosToDate(column.get(rowIndex));\n                default:\n                    return column.get(rowIndex);\n            }\n        };\n        this.dataTable = (0, $5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24)(dataBuffer);\n        this.indexTable = (0, $5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24)(indexBuffer);\n        this.columnsTable = (0, $5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24)(columnsBuffer);\n        this.styler = styler ? {\n            caption: styler.caption,\n            displayValuesTable: (0, $5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24)(styler.displayValues),\n            styles: styler.styles,\n            uuid: styler.uuid\n        } : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function() {\n            return this.indexTable.numRows + this.columnsTable.numCols;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function() {\n            return this.indexTable.numCols + this.columnsTable.numRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function() {\n            return this.rows - this.dataRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function() {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function() {\n            return this.dataTable.numRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function() {\n            return this.dataTable.numCols;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function() {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function() {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function() {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function() {\n            return this.dataTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function() {\n            return this.indexTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function() {\n            return this.columnsTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */ ArrowTable.prototype.serialize = function() {\n        return {\n            data: (0, $5fc0b9883ecba97e$export$ddfc347390f432fc)(this.dataTable),\n            index: (0, $5fc0b9883ecba97e$export$ddfc347390f432fc)(this.indexTable),\n            columns: (0, $5fc0b9883ecba97e$export$ddfc347390f432fc)(this.columnsTable)\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */ ArrowTable.prototype.getColumnTypeId = function(table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function(nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}();\n\n\nvar $002ff0c12d1f9dff$var$__assign = undefined && undefined.__assign || function() {\n    $002ff0c12d1f9dff$var$__assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $002ff0c12d1f9dff$var$__assign.apply(this, arguments);\n};\n/** Messages from Component -> Streamlit */ var $002ff0c12d1f9dff$var$ComponentMessageType;\n(function(ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})($002ff0c12d1f9dff$var$ComponentMessageType || ($002ff0c12d1f9dff$var$ComponentMessageType = {}));\nvar $002ff0c12d1f9dff$export$e733d124b3a21d3f = /** @class */ function() {\n    function Streamlit() {}\n    /**\n     * The Streamlit component API version we're targeting.\n     * There's currently only 1!\n     */ Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */ Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */ Streamlit.setComponentReady = function() {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg($002ff0c12d1f9dff$var$ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */ Streamlit.setFrameHeight = function(height) {\n        if (height === undefined) // `height` is optional. If undefined, it defaults to scrollHeight,\n        // which is the entire height of the element minus its border,\n        // scrollbar, and margin.\n        height = document.body.scrollHeight;\n        if (height === Streamlit.lastFrameHeight) // Don't bother updating if our height hasn't changed.\n        return;\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg($002ff0c12d1f9dff$var$ComponentMessageType.SET_FRAME_HEIGHT, {\n            height: height\n        });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */ Streamlit.setComponentValue = function(value) {\n        var dataType;\n        if (value instanceof (0, $e98ce2190743c8e4$export$c6fd6ce53f6943cf)) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        } else if ($002ff0c12d1f9dff$var$isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        } else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        } else dataType = \"json\";\n        Streamlit.sendBackMsg($002ff0c12d1f9dff$var$ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */ Streamlit.onMessageEvent = function(event) {\n        var type = event.data[\"type\"];\n        switch(type){\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */ Streamlit.onRenderMessage = function(data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0 ? Streamlit.argsDataframeToObject(data[\"dfs\"]) : {};\n        args = $002ff0c12d1f9dff$var$__assign($002ff0c12d1f9dff$var$__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) $002ff0c12d1f9dff$var$_injectTheme(theme);\n        // Dispatch a render event!\n        var eventData = {\n            disabled: disabled,\n            args: args,\n            theme: theme\n        };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function(argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function(_a) {\n            var key = _a.key, value = _a.value;\n            return [\n                key,\n                Streamlit.toArrowTable(value)\n            ];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function(df) {\n        var _a;\n        var data = (_a = df.data, _a.data), index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new (0, $e98ce2190743c8e4$export$c6fd6ce53f6943cf)(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */ Streamlit.sendBackMsg = function(type, data) {\n        window.parent.postMessage($002ff0c12d1f9dff$var$__assign({\n            isStreamlitMessage: true,\n            type: type\n        }, data), \"*\");\n    };\n    return Streamlit;\n}();\nvar $002ff0c12d1f9dff$var$_injectTheme = function(theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \".concat(theme.primaryColor, \";\\n      --background-color: \").concat(theme.backgroundColor, \";\\n      --secondary-background-color: \").concat(theme.secondaryBackgroundColor, \";\\n      --text-color: \").concat(theme.textColor, \";\\n      --font: \").concat(theme.font, \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \");\n};\n/** True if the value is a TypedArray. */ function $002ff0c12d1f9dff$var$isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray = value instanceof BigInt64Array || value instanceof BigUint64Array;\n    } catch (e) {\n    // Ignore cause Safari does not support this\n    // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return value instanceof Int8Array || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int16Array || value instanceof Uint16Array || value instanceof Int32Array || value instanceof Uint32Array || value instanceof Float32Array || value instanceof Float64Array || isBigIntArray;\n}\n\n\nvar $93d96f1083eaf3c5$var$__extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */ var $93d96f1083eaf3c5$export$ad469daafd267aed = /** @class */ function(_super) {\n    $93d96f1083eaf3c5$var$__extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function() {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function() {\n        // After we're updated, tell Streamlit that our height may have changed.\n        (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}((0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).PureComponent);\nfunction $93d96f1083eaf3c5$export$d642c9cf7fa2c9dc(WrappedComponent) {\n    var ComponentWrapper = /** @class */ function(_super) {\n        $93d96f1083eaf3c5$var$__extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function() {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).events.addEventListener((0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).RENDER_EVENT, _this.onRenderEvent);\n                (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setComponentReady();\n            };\n            _this.componentDidUpdate = function() {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setFrameHeight();\n            };\n            _this.componentWillUnmount = function() {\n                (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).events.removeEventListener((0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */ _this.onRenderEvent = function(event) {\n                // Update our state with the newest render data\n                _this.setState({\n                    renderData: event.detail\n                });\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        ComponentWrapper.prototype.render = function() {\n            // If our wrapped component threw an error, display it.\n            if (this.state.componentError != null) return (0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).createElement(\"div\", null, (0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).createElement(\"h1\", null, \"Component Error\"), (0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).createElement(\"span\", null, this.state.componentError.message));\n            // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n            if (this.state.renderData == null) return null;\n            return (0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).createElement(WrappedComponent, {\n                width: window.innerWidth,\n                disabled: this.state.renderData.disabled,\n                args: this.state.renderData.args,\n                theme: this.state.renderData.theme\n            });\n        };\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */ ComponentWrapper.getDerivedStateFromError = function(error) {\n            return {\n                componentError: error\n            };\n        };\n        return ComponentWrapper;\n    }((0, (/*@__PURE__*/$parcel$interopDefault($76d3ec0b6e8cfdfc$exports))).PureComponent);\n    return (0, (/*@__PURE__*/$parcel$interopDefault($72623ab6bcb0a33b$exports)))(ComponentWrapper, WrappedComponent);\n}\n\n\n\n\n\n\nclass $35da740d59af89ba$var$MyButton extends (0, $fe586ba0757c37f7$export$3f2f9f5909897157) {\n    static BUTTON_HEIGHT = 50;\n    static styles = (0, $3233927aa82734f9$export$dbf350e5966cf602)`\n    :host {\n      display: block;\n      width: 150px;\n      height: ${$35da740d59af89ba$var$MyButton.BUTTON_HEIGHT}px;\n    }\n    button {\n      background-color: blue;\n      color: white;\n      padding: 0px 0px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n      width: 100%;\n      height: 100%;\n    }\n  `;\n    render() {\n        return (0, $e5ed8027d647799b$export$c0bb0b647f701bb5)` <button @click=${this.handleClick}>Click Me</button> `;\n    }\n    firstUpdated() {\n        // Adjust the iframe height to 100%\n        const iframe = window.frameElement;\n        if (iframe) {\n            iframe.style.height = `${$35da740d59af89ba$var$MyButton.BUTTON_HEIGHT}px`;\n            iframe.style.width = \"100%\";\n            iframe.setAttribute(\"height\", `${$35da740d59af89ba$var$MyButton.BUTTON_HEIGHT}px`);\n            iframe.setAttribute(\"width\", \"100%\");\n        }\n        // Notify Streamlit that the component is ready\n        (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setComponentReady();\n        // Set the height dynamically to ensure the iframe adjusts to content\n        (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setFrameHeight(window.document.body.scrollHeight);\n    }\n    // firstUpdated() {\n    //   // Ensure this code runs after rendering\n    //   const button = document.querySelector(\"my-button\");\n    //   console.log(button);\n    //   console.log(button.clientHeight);\n    //   console.log(button.offsetHeight);\n    //   console.log(button.scrollHeight);\n    //   if (button) {\n    //     const buttonHeight = this.BUTTON_HEIGHT + 16;\n    //     // debugger;\n    //     // const buttonHeight = 50;\n    //     // Adjust the iframe height to match the button's height\n    //     const iframe = window.frameElement;\n    //     if (iframe) {\n    //       iframe.style.height = `${buttonHeight}px`;\n    //       iframe.style.width = \"100%\";\n    //       iframe.setAttribute(\"height\", `${buttonHeight}`);\n    //       iframe.setAttribute(\"width\", \"100%\");\n    //     }\n    //   }\n    //   // Notify Streamlit that the component is ready\n    //   Streamlit.setComponentReady();\n    //   // Set the frame height dynamically based on content\n    //   Streamlit.setFrameHeight(buttonHeight);\n    // }\n    handleClick() {\n        console.log(\"Button clicked!\");\n        // Notify Streamlit about the click event\n        (0, $002ff0c12d1f9dff$export$e733d124b3a21d3f).setComponentValue(\"Button clicked!\");\n    }\n}\ncustomElements.define(\"my-button\", $35da740d59af89ba$var$MyButton); // Ensure Streamlit is ready before using it\n // Streamlit.setComponentReady();\n // Streamlit.setFrameHeight(60);\n\n\n//# sourceMappingURL=index.e8556962.js.map\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","import { LitElement, html, css } from \"lit\";\nimport { Streamlit } from \"streamlit-component-lib\";\n\nclass MyButton extends LitElement {\n  static BUTTON_HEIGHT = 50;\n\n  static styles = css`\n    :host {\n      display: block;\n      width: 150px;\n      height: ${MyButton.BUTTON_HEIGHT}px;\n    }\n    button {\n      background-color: blue;\n      color: white;\n      padding: 0px 0px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n      width: 100%;\n      height: 100%;\n    }\n  `;\n\n  render() {\n    return html` <button @click=${this.handleClick}>Click Me</button> `;\n  }\n\n  firstUpdated() {\n    // Adjust the iframe height to 100%\n    const iframe = window.frameElement;\n    if (iframe) {\n      iframe.style.height = `${MyButton.BUTTON_HEIGHT}px`;\n      iframe.style.width = \"100%\";\n      iframe.setAttribute(\"height\", `${MyButton.BUTTON_HEIGHT}px`);\n      iframe.setAttribute(\"width\", \"100%\");\n    }\n\n    // Notify Streamlit that the component is ready\n    Streamlit.setComponentReady();\n\n    // Set the height dynamically to ensure the iframe adjusts to content\n    Streamlit.setFrameHeight(window.document.body.scrollHeight);\n  }\n\n  // firstUpdated() {\n  //   // Ensure this code runs after rendering\n  //   const button = document.querySelector(\"my-button\");\n  //   console.log(button);\n  //   console.log(button.clientHeight);\n  //   console.log(button.offsetHeight);\n  //   console.log(button.scrollHeight);\n  //   if (button) {\n  //     const buttonHeight = this.BUTTON_HEIGHT + 16;\n  //     // debugger;\n  //     // const buttonHeight = 50;\n\n  //     // Adjust the iframe height to match the button's height\n  //     const iframe = window.frameElement;\n  //     if (iframe) {\n  //       iframe.style.height = `${buttonHeight}px`;\n  //       iframe.style.width = \"100%\";\n  //       iframe.setAttribute(\"height\", `${buttonHeight}`);\n  //       iframe.setAttribute(\"width\", \"100%\");\n  //     }\n  //   }\n\n  //   // Notify Streamlit that the component is ready\n  //   Streamlit.setComponentReady();\n  //   // Set the frame height dynamically based on content\n  //   Streamlit.setFrameHeight(buttonHeight);\n  // }\n\n  handleClick() {\n    console.log(\"Button clicked!\");\n    // Notify Streamlit about the click event\n    Streamlit.setComponentValue(\"Button clicked!\");\n  }\n}\n\ncustomElements.define(\"my-button\", MyButton);\n\n// Ensure Streamlit is ready before using it\n// Streamlit.setComponentReady();\n// Streamlit.setFrameHeight(60);\n","import{getCompatibleStyle as t,adoptStyles as s}from\"./css-tag.js\";export{CSSResult,adoptStyles,css,getCompatibleStyle,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:i,defineProperty:e,getOwnPropertyDescriptor:r,getOwnPropertyNames:h,getOwnPropertySymbols:o,getPrototypeOf:n}=Object,a=globalThis,c=a.trustedTypes,l=c?c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!i(t,s),y={attribute:!0,type:String,converter:u,reflect:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class b extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=y){if(s.state&&(s.attribute=!1),this._$Ei(),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),r=this.getPropertyDescriptor(t,i,s);void 0!==r&&e(this.prototype,t,r)}}static getPropertyDescriptor(t,s,i){const{get:e,set:h}=r(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get(){return e?.call(this)},set(s){const r=e?.call(this);h.call(this,s),this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??y}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...h(t),...o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(t(s))}else void 0!==s&&i.push(t(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return s(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$EC(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const r=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==r?this.removeAttribute(e):this.setAttribute(e,r),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),r=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e,this[e]=r.fromAttribute(s,t.type),this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){if(i??=this.constructor.getPropertyOptions(t),!(i.hasChanged??f)(this[t],s))return;this.P(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(t,s,i){this._$AL.has(t)||this._$AL.set(t,s),!0===i.reflect&&this._$Em!==t&&(this._$Ej??=new Set).add(t)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t)!0!==i.wrapped||this._$AL.has(s)||void 0===this[s]||this.P(s,this[s],i)}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EU()}catch(s){throw t=!1,this._$EU(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Ej&&=this._$Ej.forEach((t=>this._$EC(t,this[t]))),this._$EU()}updated(t){}firstUpdated(t){}}b.elementStyles=[],b.shadowRootOptions={mode:\"open\"},b[d(\"elementProperties\")]=new Map,b[d(\"finalized\")]=new Map,p?.({ReactiveElement:b}),(a.reactiveElementVersions??=[]).push(\"2.0.4\");export{b as ReactiveElement,u as defaultConverter,f as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{n as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst n=globalThis,c=n.trustedTypes,h=c?c.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,f=\"$lit$\",v=`lit$${Math.random().toFixed(9).slice(2)}$`,m=\"?\"+v,_=`<${m}>`,w=document,lt=()=>w.createComment(\"\"),st=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,g=Array.isArray,$=t=>g(t)||\"function\"==typeof t?.[Symbol.iterator],x=\"[ \\t\\n\\f\\r]\",T=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,E=/-->/g,k=/>/g,O=RegExp(`>|${x}(?:([^\\\\s\"'>=/]+)(${x}*=${x}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),S=/'/g,j=/\"/g,M=/^(?:script|style|textarea|title)$/i,P=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),ke=P(1),Oe=P(2),Se=P(3),R=Symbol.for(\"lit-noChange\"),D=Symbol.for(\"lit-nothing\"),V=new WeakMap,I=w.createTreeWalker(w,129);function N(t,i){if(!g(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==h?h.createHTML(i):i}const U=(t,i)=>{const s=t.length-1,e=[];let h,o=2===i?\"<svg>\":3===i?\"<math>\":\"\",n=T;for(let i=0;i<s;i++){const s=t[i];let r,l,c=-1,a=0;for(;a<s.length&&(n.lastIndex=a,l=n.exec(s),null!==l);)a=n.lastIndex,n===T?\"!--\"===l[1]?n=E:void 0!==l[1]?n=k:void 0!==l[2]?(M.test(l[2])&&(h=RegExp(\"</\"+l[2],\"g\")),n=O):void 0!==l[3]&&(n=O):n===O?\">\"===l[0]?(n=h??T,c=-1):void 0===l[1]?c=-2:(c=n.lastIndex-l[2].length,r=l[1],n=void 0===l[3]?O:'\"'===l[3]?j:S):n===j||n===S?n=O:n===E||n===k?n=T:(n=O,h=void 0);const u=n===O&&t[i+1].startsWith(\"/>\")?\" \":\"\";o+=n===T?s+_:c>=0?(e.push(r),s.slice(0,c)+f+s.slice(c)+v+u):s+v+(-2===c?i:u)}return[N(t,o+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),e]};class B{constructor({strings:t,_$litType$:i},s){let e;this.parts=[];let h=0,o=0;const n=t.length-1,r=this.parts,[l,a]=U(t,i);if(this.el=B.createElement(l,s),I.currentNode=this.el.content,2===i||3===i){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(e=I.nextNode())&&r.length<n;){if(1===e.nodeType){if(e.hasAttributes())for(const t of e.getAttributeNames())if(t.endsWith(f)){const i=a[o++],s=e.getAttribute(t).split(v),n=/([.?@])?(.*)/.exec(i);r.push({type:1,index:h,name:n[2],strings:s,ctor:\".\"===n[1]?Y:\"?\"===n[1]?Z:\"@\"===n[1]?q:G}),e.removeAttribute(t)}else t.startsWith(v)&&(r.push({type:6,index:h}),e.removeAttribute(t));if(M.test(e.tagName)){const t=e.textContent.split(v),i=t.length-1;if(i>0){e.textContent=c?c.emptyScript:\"\";for(let s=0;s<i;s++)e.append(t[s],lt()),I.nextNode(),r.push({type:2,index:++h});e.append(t[i],lt())}}}else if(8===e.nodeType)if(e.data===m)r.push({type:2,index:h});else{let t=-1;for(;-1!==(t=e.data.indexOf(v,t+1));)r.push({type:7,index:h}),t+=v.length-1}h++}}static createElement(t,i){const s=w.createElement(\"template\");return s.innerHTML=t,s}}function z(t,i,s=t,e){if(i===R)return i;let h=void 0!==e?s.o?.[e]:s.l;const o=st(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s.o??=[])[e]=h:s.l=h),void 0!==h&&(i=z(t,h._$AS(t,i.values),h,e)),i}class F{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??w).importNode(i,!0);I.currentNode=e;let h=I.nextNode(),o=0,n=0,r=s[0];for(;void 0!==r;){if(o===r.index){let i;2===r.type?i=new et(h,h.nextSibling,this,t):1===r.type?i=new r.ctor(h,r.name,r.strings,this,t):6===r.type&&(i=new K(h,this,t)),this._$AV.push(i),r=s[++n]}o!==r?.index&&(h=I.nextNode(),o++)}return I.currentNode=w,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class et{get _$AU(){return this._$AM?._$AU??this.v}constructor(t,i,s,e){this.type=2,this._$AH=D,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this.v=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=z(this,t,i),st(t)?t===D||null==t||\"\"===t?(this._$AH!==D&&this._$AR(),this._$AH=D):t!==this._$AH&&t!==R&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):$(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==D&&st(this._$AH)?this._$AA.nextSibling.data=t:this.T(w.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=B.createElement(N(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new F(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=V.get(t.strings);return void 0===i&&V.set(t.strings,i=new B(t)),i}k(t){g(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new et(this.O(lt()),this.O(lt()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this.v=t,this._$AP?.(t))}}class G{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=D,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=D}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=z(this,t,i,0),o=!st(t)||t!==this._$AH&&t!==R,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=z(this,e[s+n],i,n),r===R&&(r=this._$AH[n]),o||=!st(r)||r!==this._$AH[n],r===D?t=D:t!==D&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===D?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class Y extends G{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===D?void 0:t}}class Z extends G{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==D)}}class q extends G{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=z(this,t,i,0)??D)===R)return;const s=this._$AH,e=t===D&&s!==D||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==D&&(s===D||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class K{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){z(this,t)}}const si={M:f,P:v,A:m,C:1,L:U,R:F,D:$,V:z,I:et,H:G,N:Z,U:q,B:Y,F:K},Re=n.litHtmlPolyfillSupport;Re?.(B,et),(n.litHtmlVersions??=[]).push(\"3.2.0\");const Q=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new et(i.insertBefore(lt(),t),t,void 0,s??{})}return h._$AI(t),h};export{si as _$LH,ke as html,Se as mathml,R as noChange,D as nothing,Q as render,Oe as svg};\n//# sourceMappingURL=lit-html.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        }),\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`,\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute',\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute',\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`,\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g',\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.',\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`,\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string,\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType,\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions',\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B',\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions,\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`',\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number,\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex,\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options,\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options,\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number,\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined,\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`,\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`,\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`,\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode,\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult,\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options,\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options,\n          )),\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex,\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number,\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().',\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean,\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute',\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string,\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property',\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing,\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.',\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this,\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions,\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions,\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.2.0');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`,\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions,\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {},\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n","import{ReactiveElement as e}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as n,noChange as l}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class h extends e{constructor(){super(...arguments),this.renderOptions={host:this},this.o=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this.o=n(e,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this.o?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this.o?.setConnected(!1)}render(){return l}}h._$litElement$=!0,h[\"finalized\"]=!0,globalThis.litElementHydrateSupport?.({LitElement:h});const f=globalThis.litElementPolyfillSupport;f?.({LitElement:h});const x={_$AK:(t,e,s)=>{t._$AK(e,s)},_$AL:t=>t._$AL};(globalThis.litElementVersions??=[]).push(\"4.1.0\");export{h as LitElement,x as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.0');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst co=!1;export{co as isServer};\n//# sourceMappingURL=is-server.js.map\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * @fileoverview\n *\n * This file exports a boolean const whose value will depend on what environment\n * the module is being imported from.\n */\n\nconst NODE_MODE = false;\n\n/**\n * A boolean that will be `true` in server environments like Node, and `false`\n * in browser environments. Note that your server environment or toolchain must\n * support the `\"node\"` export condition for this to be `true`.\n *\n * This can be used when authoring components to change behavior based on\n * whether or not the component is executing in an SSR context.\n */\nexport const isServer = NODE_MODE;\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { StreamlitComponentBase, withStreamlitConnection } from \"./StreamlitReact\";\nexport { ArrowTable } from \"./ArrowTable\";\nexport { Streamlit } from \"./streamlit\";\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                _this.setState({ renderData: event.detail });\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        ComponentWrapper.prototype.render = function () {\n            // If our wrapped component threw an error, display it.\n            if (this.state.componentError != null) {\n                return (React.createElement(\"div\", null,\n                    React.createElement(\"h1\", null, \"Component Error\"),\n                    React.createElement(\"span\", null, this.state.componentError.message)));\n            }\n            // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n            if (this.state.renderData == null) {\n                return null;\n            }\n            return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: this.state.renderData.disabled, args: this.state.renderData.args, theme: this.state.renderData.theme }));\n        };\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport var Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targeting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a;\n        var data = (_a = df.data, _a.data), index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \".concat(theme.primaryColor, \";\\n      --background-color: \").concat(theme.backgroundColor, \";\\n      --secondary-background-color: \").concat(theme.secondaryBackgroundColor, \";\\n      --text-color: \").concat(theme.textColor, \";\\n      --font: \").concat(theme.font, \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \");\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { tableToIPC, tableFromIPC, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\".concat(_this.uuid, \"level\").concat(columnIndex, \"_row\").concat(dataRowIndex),\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\".concat(_this.uuid, \"row\").concat(dataRowIndex, \"_col\").concat(dataColumnIndex),\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getChildAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = tableFromIPC(dataBuffer);\n        this.indexTable = tableFromIPC(indexBuffer);\n        this.columnsTable = tableFromIPC(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: tableFromIPC(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.numRows + this.columnsTable.numCols;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.numRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.numRows;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: tableToIPC(this.dataTable),\n            index: tableToIPC(this.indexTable),\n            columns: tableToIPC(this.columnsTable)\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n////\n//\n// A few enums copied from `fb/Schema.ts` and `fb/Message.ts` because Webpack\n// v4 doesn't seem to be able to tree-shake the rest of those exports.\n//\n// We will have to keep these enums in sync when we re-generate the flatbuffers\n// code from the shchemas. See js/DEVELOP.md for info on how to run flatbuffers\n// code generation.\n//\n////\n/**\n * Logical types, vector layouts, and schemas\n *\n * @enum {number}\n */\nexport var MetadataVersion;\n(function (MetadataVersion) {\n    /**\n     * 0.1.0 (October 2016).\n     */\n    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */\n    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */\n    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */\n    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */\n    MetadataVersion[MetadataVersion[\"V5\"] = 4] = \"V5\";\n})(MetadataVersion || (MetadataVersion = {}));\n/**\n * @enum {number}\n */\nexport var UnionMode;\n(function (UnionMode) {\n    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n})(UnionMode || (UnionMode = {}));\n/**\n * @enum {number}\n */\nexport var Precision;\n(function (Precision) {\n    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n})(Precision || (Precision = {}));\n/**\n * @enum {number}\n */\nexport var DateUnit;\n(function (DateUnit) {\n    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n})(DateUnit || (DateUnit = {}));\n/**\n * @enum {number}\n */\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n})(TimeUnit || (TimeUnit = {}));\n/**\n * @enum {number}\n */\nexport var IntervalUnit;\n(function (IntervalUnit) {\n    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n    IntervalUnit[IntervalUnit[\"MONTH_DAY_NANO\"] = 2] = \"MONTH_DAY_NANO\";\n})(IntervalUnit || (IntervalUnit = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport var MessageHeader;\n(function (MessageHeader) {\n    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n    MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n})(MessageHeader || (MessageHeader = {}));\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(Type || (Type = {}));\nexport var BufferType;\n(function (BufferType) {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    BufferType[BufferType[\"OFFSET\"] = 0] = \"OFFSET\";\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    BufferType[BufferType[\"DATA\"] = 1] = \"DATA\";\n    /**\n     * Bit vector indicating if each value is null\n     */\n    BufferType[BufferType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n    /**\n     * Type vector used in Union type\n     */\n    BufferType[BufferType[\"TYPE\"] = 3] = \"TYPE\";\n})(BufferType || (BufferType = {}));\n\n//# sourceMappingURL=enum.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n////\n//\n// A few enums copied from `fb/Schema.ts` and `fb/Message.ts` because Webpack\n// v4 doesn't seem to be able to tree-shake the rest of those exports.\n//\n// We will have to keep these enums in sync when we re-generate the flatbuffers\n// code from the shchemas. See js/DEVELOP.md for info on how to run flatbuffers\n// code generation.\n//\n////\n\n/**\n * Logical types, vector layouts, and schemas\n *\n * @enum {number}\n */\nexport enum MetadataVersion {\n    /**\n     * 0.1.0 (October 2016).\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */\n    V4 = 3,\n\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */\n    V5 = 4\n}\n\n/**\n * @enum {number}\n */\nexport enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n}\n\n/**\n * @enum {number}\n */\nexport enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n}\n\n/**\n * @enum {number}\n */\nexport enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n}\n\n/**\n * @enum {number}\n */\nexport enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n}\n\n/**\n * @enum {number}\n */\nexport enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1,\n    MONTH_DAY_NANO = 2\n}\n\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4,\n    SparseTensor = 5\n}\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    NONE = 0, /** The default placeholder type */\n    Null = 1, /** A NULL type having no physical storage */\n    Int = 2, /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Float = 3, /** 2, 4, or 8-byte floating point value */\n    Binary = 4, /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Utf8 = 5, /** UTF8 variable-length string as List<Char> */\n    Bool = 6, /** Boolean as 1 bit, LSB bit-packed ordering */\n    Decimal = 7, /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Date = 8, /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Time = 9, /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Timestamp = 10, /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Interval = 11, /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    List = 12, /** A list of some logical data type */\n    Struct = 13, /** Struct of logical types */\n    Union = 14, /** Union of logical types */\n    FixedSizeBinary = 15, /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeList = 16, /** Fixed-size list. Each value occupies the same number of bytes */\n    Map = 17, /** Map of named logical types */\n\n    Dictionary = -1, /** Dictionary aka Category type */\n    Int8 = -2,\n    Int16 = -3,\n    Int32 = -4,\n    Int64 = -5,\n    Uint8 = -6,\n    Uint16 = -7,\n    Uint32 = -8,\n    Uint64 = -9,\n    Float16 = -10,\n    Float32 = -11,\n    Float64 = -12,\n    DateDay = -13,\n    DateMillisecond = -14,\n    TimestampSecond = -15,\n    TimestampMillisecond = -16,\n    TimestampMicrosecond = -17,\n    TimestampNanosecond = -18,\n    TimeSecond = -19,\n    TimeMillisecond = -20,\n    TimeMicrosecond = -21,\n    TimeNanosecond = -22,\n    DenseUnion = -23,\n    SparseUnion = -24,\n    IntervalDayTime = -25,\n    IntervalYearMonth = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table.mjs';\nimport { isPromise } from '../util/compat.mjs';\nimport { RecordBatchReader } from './reader.mjs';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './writer.mjs';\nexport function tableFromIPC(input) {\n    const reader = RecordBatchReader.from(input);\n    if (isPromise(reader)) {\n        return reader.then((reader) => tableFromIPC(reader));\n    }\n    if (reader.isAsync()) {\n        return reader.readAll().then((xs) => new Table(xs));\n    }\n    return new Table(reader.readAll());\n}\n/**\n * Serialize a {@link Table} to the IPC format. This function is a convenience\n * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.\n * Opposite of {@link tableFromIPC}.\n *\n * @param table The Table to serialize.\n * @param type Whether to serialize the Table as a file or a stream.\n */\nexport function tableToIPC(table, type = 'stream') {\n    return (type === 'stream' ? RecordBatchStreamWriter : RecordBatchFileWriter)\n        .writeAll(table)\n        .toUint8Array(true);\n}\n\n//# sourceMappingURL=serialization.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table.js';\nimport { TypeMap } from '../type.js';\nimport { isPromise } from '../util/compat.js';\nimport {\n    FromArg0, FromArg1, FromArg2, FromArg3, FromArg4, FromArg5,\n    RecordBatchReader,\n    RecordBatchFileReader, RecordBatchStreamReader,\n    AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader\n} from './reader.js';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './writer.js';\n\ntype RecordBatchReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\ntype AsyncRecordBatchReaders<T extends TypeMap = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n\n/**\n * Deserialize the IPC format into a {@link Table}. This function is a\n * convenience wrapper for {@link RecordBatchReader}. Opposite of {@link tableToIPC}.\n */\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg0 | FromArg2): Table<T>;\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg1): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg3 | FromArg4 | FromArg5): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: RecordBatchReaders<T>): Table<T>;\nexport function tableFromIPC<T extends TypeMap = any>(source: AsyncRecordBatchReaders<T>): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: RecordBatchReader<T>): Table<T> | Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(input: any): Table<T> | Promise<Table<T>> {\n    const reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n    if (isPromise<RecordBatchReader<T>>(reader)) {\n        return reader.then((reader) => tableFromIPC(reader)) as Promise<Table<T>>;\n    }\n    if (reader.isAsync()) {\n        return (reader as AsyncRecordBatchReaders<T>).readAll().then((xs) => new Table(xs));\n    }\n    return new Table((reader as RecordBatchReaders<T>).readAll());\n}\n\n/**\n * Serialize a {@link Table} to the IPC format. This function is a convenience\n * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.\n * Opposite of {@link tableFromIPC}.\n *\n * @param table The Table to serialize.\n * @param type Whether to serialize the Table as a file or a stream.\n */\nexport function tableToIPC<T extends TypeMap = any>(table: Table, type: 'file' | 'stream' = 'stream'): Uint8Array {\n    return (type === 'stream' ? RecordBatchStreamWriter : RecordBatchFileWriter)\n        .writeAll<T>(table)\n        .toUint8Array(true);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Type } from './enum.mjs';\nimport { Data, makeData } from './data.mjs';\nimport { vectorFromArray } from './factories.mjs';\nimport { makeVector, Vector } from './vector.mjs';\nimport { Field, Schema } from './schema.mjs';\nimport { Null, Struct } from './type.mjs';\nimport { compareSchemas } from './visitor/typecomparator.mjs';\nimport { distributeVectorsIntoRecordBatches } from './util/recordbatch.mjs';\nimport { isChunkedValid, computeChunkOffsets, computeChunkNullCounts, wrapChunkedCall1, wrapChunkedCall2, wrapChunkedIndexOf, sliceChunks, } from './util/chunk.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.mjs';\nimport { clampRange } from './util/vector.mjs';\nimport { RecordBatch } from './recordbatch.mjs';\n/**\n * Tables are collections of {@link Vector}s and have a {@link Schema}. Use the convenience methods {@link makeTable}\n * or {@link tableFromArrays} to create a table in JavaScript. To create a table from the IPC format, use\n * {@link tableFromIPC}.\n */\nexport class Table {\n    constructor(...args) {\n        var _b, _c;\n        if (args.length === 0) {\n            this.batches = [];\n            this.schema = new Schema([]);\n            this._offsets = [0];\n            return this;\n        }\n        let schema;\n        let offsets;\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n        if (args[args.length - 1] instanceof Uint32Array) {\n            offsets = args.pop();\n        }\n        const unwrap = (x) => {\n            if (x) {\n                if (x instanceof RecordBatch) {\n                    return [x];\n                }\n                else if (x instanceof Table) {\n                    return x.batches;\n                }\n                else if (x instanceof Data) {\n                    if (x.type instanceof Struct) {\n                        return [new RecordBatch(new Schema(x.type.children), x)];\n                    }\n                }\n                else if (Array.isArray(x)) {\n                    return x.flatMap(v => unwrap(v));\n                }\n                else if (typeof x[Symbol.iterator] === 'function') {\n                    return [...x].flatMap(v => unwrap(v));\n                }\n                else if (typeof x === 'object') {\n                    const keys = Object.keys(x);\n                    const vecs = keys.map((k) => new Vector([x[k]]));\n                    const schema = new Schema(keys.map((k, i) => new Field(String(k), vecs[i].type)));\n                    const [, batches] = distributeVectorsIntoRecordBatches(schema, vecs);\n                    return batches.length === 0 ? [new RecordBatch(x)] : batches;\n                }\n            }\n            return [];\n        };\n        const batches = args.flatMap(v => unwrap(v));\n        schema = (_c = schema !== null && schema !== void 0 ? schema : (_b = batches[0]) === null || _b === void 0 ? void 0 : _b.schema) !== null && _c !== void 0 ? _c : new Schema([]);\n        if (!(schema instanceof Schema)) {\n            throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n        }\n        for (const batch of batches) {\n            if (!(batch instanceof RecordBatch)) {\n                throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n            }\n            if (!compareSchemas(schema, batch.schema)) {\n                throw new TypeError('Table and inner RecordBatch schemas must be equivalent.');\n            }\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this._offsets = offsets !== null && offsets !== void 0 ? offsets : computeChunkOffsets(this.data);\n    }\n    /**\n     * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n     */\n    get data() { return this.batches.map(({ data }) => data); }\n    /**\n     * The number of columns in this Table.\n     */\n    get numCols() { return this.schema.fields.length; }\n    /**\n     * The number of rows in this Table.\n     */\n    get numRows() {\n        return this.data.reduce((numRows, data) => numRows + data.length, 0);\n    }\n    /**\n     * The number of null rows in this Table.\n     */\n    get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n    /**\n     * Check whether an element is null.\n     *\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    isValid(index) { return false; }\n    /**\n     * Get an element value by position.\n     *\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    get(index) { return null; }\n    /**\n     * Set an element value by position.\n     *\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    set(index, value) { return; }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     *\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    indexOf(element, offset) { return -1; }\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    getByteLength(index) { return 0; }\n    /**\n     * Iterator for rows in this Table.\n     */\n    [Symbol.iterator]() {\n        if (this.batches.length > 0) {\n            return iteratorVisitor.visit(new Vector(this.data));\n        }\n        return (new Array(0))[Symbol.iterator]();\n    }\n    /**\n     * Return a JavaScript Array of the Table rows.\n     *\n     * @returns An Array of Table rows.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * Returns a string representation of the Table rows.\n     *\n     * @returns A string representation of the Table rows.\n     */\n    toString() {\n        return `[\\n  ${this.toArray().join(',\\n  ')}\\n]`;\n    }\n    /**\n     * Combines two or more Tables of the same schema.\n     *\n     * @param others Additional Tables to add to the end of this Tables.\n     */\n    concat(...others) {\n        const schema = this.schema;\n        const data = this.data.concat(others.flatMap(({ data }) => data));\n        return new Table(schema, data.map((data) => new RecordBatch(schema, data)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Table.\n     *\n     * @param begin The beginning of the specified portion of the Table.\n     * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.\n     */\n    slice(begin, end) {\n        const schema = this.schema;\n        [begin, end] = clampRange({ length: this.numRows }, begin, end);\n        const data = sliceChunks(this.data, this._offsets, begin, end);\n        return new Table(schema, data.map((chunk) => new RecordBatch(schema, chunk)));\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     *\n     * @param name The name of the child to retrieve.\n     */\n    getChild(name) {\n        return this.getChildAt(this.schema.fields.findIndex((f) => f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     *\n     * @param index The index of the child to retrieve.\n     */\n    getChildAt(index) {\n        if (index > -1 && index < this.schema.fields.length) {\n            const data = this.data.map((data) => data.children[index]);\n            if (data.length === 0) {\n                const { type } = this.schema.fields[index];\n                const empty = makeData({ type, length: 0, nullCount: 0 });\n                data.push(empty._changeLengthAndBackfillNullBitmap(this.numRows));\n            }\n            return new Vector(data);\n        }\n        return null;\n    }\n    /**\n     * Sets a child Vector by name.\n     *\n     * @param name The name of the child to overwrite.\n     * @returns A new Table with the supplied child for the specified name.\n     */\n    setChild(name, child) {\n        var _b;\n        return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name), child);\n    }\n    setChildAt(index, child) {\n        let schema = this.schema;\n        let batches = [...this.batches];\n        if (index > -1 && index < this.numCols) {\n            if (!child) {\n                child = new Vector([makeData({ type: new Null, length: this.numRows })]);\n            }\n            const fields = schema.fields.slice();\n            const field = fields[index].clone({ type: child.type });\n            const children = this.schema.fields.map((_, i) => this.getChildAt(i));\n            [fields[index], children[index]] = [field, child];\n            [schema, batches] = distributeVectorsIntoRecordBatches(schema, children);\n        }\n        return new Table(schema, batches);\n    }\n    /**\n     * Construct a new Table containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new Table of columns matching the specified names.\n     */\n    select(columnNames) {\n        const nameToIndex = this.schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n        return this.selectAt(columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x) => x > -1));\n    }\n    /**\n     * Construct a new Table containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new Table of columns at the specified indices.\n     */\n    selectAt(columnIndices) {\n        const schema = this.schema.selectAt(columnIndices);\n        const data = this.batches.map((batch) => batch.selectAt(columnIndices));\n        return new Table(schema, data);\n    }\n    assign(other) {\n        const fields = this.schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []]);\n        const schema = this.schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_, i) => [i, oldToNew[i]]).map(([i, j]) => (j === undefined ? this.getChildAt(i) : other.getChildAt(j))),\n            ...indices.map((i) => other.getChildAt(i))\n        ].filter(Boolean);\n        return new Table(...distributeVectorsIntoRecordBatches(schema, columns));\n    }\n}\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nTable[_a] = ((proto) => {\n    proto.schema = null;\n    proto.batches = [];\n    proto._offsets = new Uint32Array([0]);\n    proto._nullCount = -1;\n    proto[Symbol.isConcatSpreadable] = true;\n    proto['isValid'] = wrapChunkedCall1(isChunkedValid);\n    proto['get'] = wrapChunkedCall1(getVisitor.getVisitFn(Type.Struct));\n    proto['set'] = wrapChunkedCall2(setVisitor.getVisitFn(Type.Struct));\n    proto['indexOf'] = wrapChunkedIndexOf(indexOfVisitor.getVisitFn(Type.Struct));\n    proto['getByteLength'] = wrapChunkedCall1(byteLengthVisitor.getVisitFn(Type.Struct));\n    return 'Table';\n})(Table.prototype);\n/**\n * Creates a new Table from an object of typed arrays.\n *\n*  @example\n * ```ts\n * const table = makeTable({\n *   a: new Int8Array([1, 2, 3]),\n * })\n * ```\n *\n * @param input Input an object of typed arrays.\n * @returns A new Table.\n */\nexport function makeTable(input) {\n    const vecs = {};\n    const inputs = Object.entries(input);\n    for (const [key, col] of inputs) {\n        vecs[key] = makeVector(col);\n    }\n    return new Table(vecs);\n}\n/**\n * Creates a new Table from an object of typed arrays or JavaScript arrays.\n *\n *  @example\n * ```ts\n * const table = tableFromArrays({\n *   a: [1, 2, 3],\n *   b: new Int8Array([1, 2, 3]),\n * })\n * ```\n *\n * @param input Input an object of typed arrays or JavaScript arrays.\n * @returns A new Table.\n */\nexport function tableFromArrays(input) {\n    const vecs = {};\n    const inputs = Object.entries(input);\n    for (const [key, col] of inputs) {\n        vecs[key] = vectorFromArray(col);\n    }\n    return new Table(vecs);\n}\n\n//# sourceMappingURL=table.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type } from './enum.js';\nimport { Data, makeData } from './data.js';\nimport { vectorFromArray } from './factories.js';\nimport { makeVector, Vector } from './vector.js';\nimport { Field, Schema } from './schema.js';\nimport { DataType, Null, Struct, TypeMap } from './type.js';\nimport { compareSchemas } from './visitor/typecomparator.js';\nimport { distributeVectorsIntoRecordBatches } from './util/recordbatch.js';\n\nimport {\n    isChunkedValid,\n    computeChunkOffsets,\n    computeChunkNullCounts,\n    wrapChunkedCall1,\n    wrapChunkedCall2,\n    wrapChunkedIndexOf,\n    sliceChunks,\n} from './util/chunk.js';\n\nimport { instance as getVisitor } from './visitor/get.js';\nimport { instance as setVisitor } from './visitor/set.js';\nimport { instance as indexOfVisitor } from './visitor/indexof.js';\nimport { instance as iteratorVisitor } from './visitor/iterator.js';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.js';\n\nimport { DataProps } from './data.js';\nimport { clampRange } from './util/vector.js';\nimport { ArrayDataType, BigIntArray, TypedArray, TypedArrayDataType } from './interfaces.js';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch.js';\n\n/** @ignore */\nexport interface Table<T extends TypeMap = any> {\n    ///\n    // Virtual properties for the TypeScript compiler.\n    // These do not exist at runtime.\n    ///\n    readonly TType: Struct<T>;\n    readonly TArray: Struct<T>['TArray'];\n    readonly TValue: Struct<T>['TValue'];\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n     */\n    [Symbol.isConcatSpreadable]: true;\n}\n\n/**\n * Tables are collections of {@link Vector}s and have a {@link Schema}. Use the convenience methods {@link makeTable}\n * or {@link tableFromArrays} to create a table in JavaScript. To create a table from the IPC format, use\n * {@link tableFromIPC}.\n */\nexport class Table<T extends TypeMap = any> {\n\n    constructor();\n    constructor(batches: Iterable<RecordBatch<T>>);\n    constructor(...batches: readonly RecordBatch<T>[]);\n    constructor(...columns: { [P in keyof T]: Vector<T[P]> }[]);\n    constructor(...columns: { [P in keyof T]: Data<T[P]> | DataProps<T[P]> }[]);\n    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[]);\n    constructor(schema: Schema<T>, data?: RecordBatch<T> | RecordBatch<T>[], offsets?: Uint32Array);\n    constructor(...args: any[]) {\n\n        if (args.length === 0) {\n            this.batches = [];\n            this.schema = new Schema([]);\n            this._offsets = [0];\n            return this;\n        }\n\n        let schema: Schema<T> | undefined;\n        let offsets: Uint32Array | number[] | undefined;\n\n        if (args[0] instanceof Schema) {\n            schema = args.shift() as Schema<T>;\n        }\n\n        if (args[args.length - 1] instanceof Uint32Array) {\n            offsets = args.pop();\n        }\n\n        const unwrap = (x: any): RecordBatch<T>[] => {\n            if (x) {\n                if (x instanceof RecordBatch) {\n                    return [x];\n                } else if (x instanceof Table) {\n                    return x.batches;\n                } else if (x instanceof Data) {\n                    if (x.type instanceof Struct) {\n                        return [new RecordBatch(new Schema(x.type.children), x)];\n                    }\n                } else if (Array.isArray(x)) {\n                    return x.flatMap(v => unwrap(v));\n                } else if (typeof x[Symbol.iterator] === 'function') {\n                    return [...x].flatMap(v => unwrap(v));\n                } else if (typeof x === 'object') {\n                    const keys = Object.keys(x) as (keyof T)[];\n                    const vecs = keys.map((k) => new Vector([x[k]]));\n                    const schema = new Schema(keys.map((k, i) => new Field(String(k), vecs[i].type)));\n                    const [, batches] = distributeVectorsIntoRecordBatches(schema, vecs);\n                    return batches.length === 0 ? [new RecordBatch(x)] : batches;\n                }\n            }\n            return [];\n        };\n\n        const batches = args.flatMap(v => unwrap(v));\n\n        schema = schema ?? batches[0]?.schema ?? new Schema([]);\n\n        if (!(schema instanceof Schema)) {\n            throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n        }\n\n        for (const batch of batches) {\n            if (!(batch instanceof RecordBatch)) {\n                throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');\n            }\n            if (!compareSchemas(schema, batch.schema)) {\n                throw new TypeError('Table and inner RecordBatch schemas must be equivalent.');\n            }\n        }\n\n        this.schema = schema;\n        this.batches = batches;\n        this._offsets = offsets ?? computeChunkOffsets(this.data);\n    }\n\n    declare protected _offsets: Uint32Array | number[];\n    declare protected _nullCount: number;\n\n    declare public readonly schema: Schema<T>;\n\n    /**\n     * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n     */\n    declare public readonly batches: RecordBatch<T>[];\n\n    /**\n     * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.\n     */\n    public get data() { return this.batches.map(({ data }) => data); }\n\n    /**\n     * The number of columns in this Table.\n     */\n    public get numCols() { return this.schema.fields.length; }\n\n    /**\n     * The number of rows in this Table.\n     */\n    public get numRows() {\n        return this.data.reduce((numRows, data) => numRows + data.length, 0);\n    }\n\n    /**\n     * The number of null rows in this Table.\n     */\n    public get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n\n    /**\n     * Check whether an element is null.\n     *\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    public isValid(index: number): boolean { return false; }\n\n    /**\n     * Get an element value by position.\n     *\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    public get(index: number): Struct<T>['TValue'] | null { return null; }\n\n    /**\n     * Set an element value by position.\n     *\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    public set(index: number, value: Struct<T>['TValue'] | null): void { return; }\n\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     *\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    public indexOf(element: Struct<T>['TValue'], offset?: number): number { return -1; }\n\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    public getByteLength(index: number): number { return 0; }\n\n    /**\n     * Iterator for rows in this Table.\n     */\n    public [Symbol.iterator]() {\n        if (this.batches.length > 0) {\n            return iteratorVisitor.visit(new Vector(this.data)) as IterableIterator<Struct<T>['TValue']>;\n        }\n        return (new Array(0))[Symbol.iterator]();\n    }\n\n    /**\n     * Return a JavaScript Array of the Table rows.\n     *\n     * @returns An Array of Table rows.\n     */\n    public toArray() {\n        return [...this];\n    }\n\n    /**\n     * Returns a string representation of the Table rows.\n     *\n     * @returns A string representation of the Table rows.\n     */\n    public toString() {\n        return `[\\n  ${this.toArray().join(',\\n  ')}\\n]`;\n    }\n\n    /**\n     * Combines two or more Tables of the same schema.\n     *\n     * @param others Additional Tables to add to the end of this Tables.\n     */\n    public concat(...others: Table<T>[]) {\n        const schema = this.schema;\n        const data = this.data.concat(others.flatMap(({ data }) => data));\n        return new Table(schema, data.map((data) => new RecordBatch(schema, data)));\n    }\n\n    /**\n     * Return a zero-copy sub-section of this Table.\n     *\n     * @param begin The beginning of the specified portion of the Table.\n     * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.\n     */\n    public slice(begin?: number, end?: number): Table<T> {\n        const schema = this.schema;\n        [begin, end] = clampRange({ length: this.numRows }, begin, end);\n        const data = sliceChunks(this.data, this._offsets, begin, end);\n        return new Table(schema, data.map((chunk) => new RecordBatch(schema, chunk)));\n    }\n\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     *\n     * @param name The name of the child to retrieve.\n     */\n    public getChild<P extends keyof T>(name: P) {\n        return this.getChildAt<T[P]>(this.schema.fields.findIndex((f) => f.name === name));\n    }\n\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     *\n     * @param index The index of the child to retrieve.\n     */\n    public getChildAt<R extends T[keyof T] = any>(index: number): Vector<R> | null {\n        if (index > -1 && index < this.schema.fields.length) {\n            const data = this.data.map((data) => data.children[index] as Data<R>);\n            if (data.length === 0) {\n                const { type } = this.schema.fields[index] as Field<R>;\n                const empty = makeData<R>({ type, length: 0, nullCount: 0 });\n                data.push(empty._changeLengthAndBackfillNullBitmap(this.numRows));\n            }\n            return new Vector(data);\n        }\n        return null;\n    }\n\n    /**\n     * Sets a child Vector by name.\n     *\n     * @param name The name of the child to overwrite.\n     * @returns A new Table with the supplied child for the specified name.\n     */\n    public setChild<P extends keyof T, R extends DataType>(name: P, child: Vector<R>) {\n        return this.setChildAt(this.schema.fields?.findIndex((f) => f.name === name), child) as Table<T & { [K in P]: R }>;\n    }\n\n    /**\n     * Sets a child Vector by index.\n     *\n     * @param index The index of the child to overwrite.\n     * @returns A new Table with the supplied child at the specified index.\n     */\n    public setChildAt(index: number, child?: null): Table;\n    public setChildAt<R extends DataType = any>(index: number, child: Vector<R>): Table;\n    public setChildAt(index: number, child: any) {\n        let schema: Schema = this.schema;\n        let batches: RecordBatch[] = [...this.batches];\n        if (index > -1 && index < this.numCols) {\n            if (!child) {\n                child = new Vector([makeData({ type: new Null, length: this.numRows })]);\n            }\n            const fields = schema.fields.slice() as Field<any>[];\n            const field = fields[index].clone({ type: child.type });\n            const children = this.schema.fields.map((_, i) => this.getChildAt(i)!);\n            [fields[index], children[index]] = [field, child];\n            [schema, batches] = distributeVectorsIntoRecordBatches(schema, children);\n        }\n        return new Table(schema, batches);\n    }\n\n    /**\n     * Construct a new Table containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new Table of columns matching the specified names.\n     */\n    public select<K extends keyof T = any>(columnNames: K[]) {\n        const nameToIndex = this.schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n\n    /**\n     * Construct a new Table containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new Table of columns at the specified indices.\n     */\n    public selectAt<K extends T[keyof T] = any>(columnIndices: number[]) {\n        const schema = this.schema.selectAt(columnIndices);\n        const data = this.batches.map((batch) => batch.selectAt(columnIndices));\n        return new Table<{ [key: string]: K }>(schema, data);\n    }\n\n    public assign<R extends TypeMap = any>(other: Table<R>) {\n\n        const fields = this.schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this.schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_, i) => [i, oldToNew[i]]).map(([i, j]) =>\n                (j === undefined ? this.getChildAt(i) : other.getChildAt(j))!),\n            ...indices.map((i) => other.getChildAt(i)!)\n        ].filter(Boolean) as Vector<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n\n    // Initialize this static property via an IIFE so bundlers don't tree-shake\n    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n    protected static [Symbol.toStringTag] = ((proto: Table) => {\n        (proto as any).schema = null;\n        (proto as any).batches = [];\n        (proto as any)._offsets = new Uint32Array([0]);\n        (proto as any)._nullCount = -1;\n        (proto as any)[Symbol.isConcatSpreadable] = true;\n        (proto as any)['isValid'] = wrapChunkedCall1(isChunkedValid);\n        (proto as any)['get'] = wrapChunkedCall1(getVisitor.getVisitFn(Type.Struct));\n        (proto as any)['set'] = wrapChunkedCall2(setVisitor.getVisitFn(Type.Struct));\n        (proto as any)['indexOf'] = wrapChunkedIndexOf(indexOfVisitor.getVisitFn(Type.Struct));\n        (proto as any)['getByteLength'] = wrapChunkedCall1(byteLengthVisitor.getVisitFn(Type.Struct));\n        return 'Table';\n    })(Table.prototype);\n}\n\n\ntype VectorsMap<T extends TypeMap> = { [P in keyof T]: Vector<T[P]> };\n\n/**\n * Creates a new Table from an object of typed arrays.\n *\n*  @example\n * ```ts\n * const table = makeTable({\n *   a: new Int8Array([1, 2, 3]),\n * })\n * ```\n *\n * @param input Input an object of typed arrays.\n * @returns A new Table.\n */\nexport function makeTable<I extends Record<string | number | symbol, TypedArray>>(input: I): Table<{ [P in keyof I]: TypedArrayDataType<I[P]> }> {\n    type T = { [P in keyof I]: TypedArrayDataType<I[P]> };\n    const vecs = {} as VectorsMap<T>;\n    const inputs = Object.entries(input) as [keyof I, I[keyof I]][];\n    for (const [key, col] of inputs) {\n        vecs[key] = makeVector(col);\n    }\n    return new Table<T>(vecs);\n}\n\n/**\n * Creates a new Table from an object of typed arrays or JavaScript arrays.\n *\n *  @example\n * ```ts\n * const table = tableFromArrays({\n *   a: [1, 2, 3],\n *   b: new Int8Array([1, 2, 3]),\n * })\n * ```\n *\n * @param input Input an object of typed arrays or JavaScript arrays.\n * @returns A new Table.\n */\nexport function tableFromArrays<I extends Record<string | number | symbol, TypedArray | BigIntArray | readonly unknown[]>>(input: I): Table<{ [P in keyof I]: ArrayDataType<I[P]> }> {\n    type T = { [P in keyof I]: ArrayDataType<I[P]> };\n    const vecs = {} as VectorsMap<T>;\n    const inputs = Object.entries(input) as [keyof I, I[keyof I]][];\n    for (const [key, col] of inputs) {\n        vecs[key] = vectorFromArray(col);\n    }\n    return new Table<T>(vecs);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { BufferType, Type } from './enum.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { popcnt_bit_range, truncateBitmap } from './util/bit.mjs';\n/** @ignore */ export const kUnknownNullCount = -1;\n/**\n * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.\n */\nexport class Data {\n    constructor(type, offset, length, nullCount, buffers, children = [], dictionary) {\n        this.type = type;\n        this.children = children;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        let buffer;\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        }\n        else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = buffers[0]) && (this.valueOffsets = buffer);\n                (buffer = buffers[1]) && (this.values = buffer);\n                (buffer = buffers[2]) && (this.nullBitmap = buffer);\n                (buffer = buffers[3]) && (this.typeIds = buffer);\n            }\n        }\n        this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;\n    }\n    get typeId() { return this.type.typeId; }\n    get ArrayType() { return this.type.ArrayType; }\n    get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n    }\n    get byteLength() {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    getValid(index) {\n        if (this.nullable && this.nullCount > 0) {\n            const pos = this.offset + index;\n            const val = this.nullBitmap[pos >> 3];\n            return (val & (1 << (pos % 8))) !== 0;\n        }\n        return true;\n    }\n    setValid(index, value) {\n        // Don't interact w/ nullBitmap if not nullable\n        if (!this.nullable) {\n            return value;\n        }\n        // If no null bitmap, initialize one on the fly\n        if (!this.nullBitmap || this.nullBitmap.byteLength <= (index >> 3)) {\n            const { nullBitmap } = this._changeLengthAndBackfillNullBitmap(this.length);\n            Object.assign(this, { nullBitmap, _nullCount: 0 });\n        }\n        const { nullBitmap, offset } = this;\n        const pos = (offset + index) >> 3;\n        const bit = (offset + index) % 8;\n        const val = (nullBitmap[pos] >> bit) & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.\n        value ? val === 0 && ((nullBitmap[pos] |= (1 << bit)), (this._nullCount = this.nullCount + 1))\n            : val === 1 && ((nullBitmap[pos] &= ~(1 << bit)), (this._nullCount = this.nullCount - 1));\n        return value;\n    }\n    clone(type = this.type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, children = this.children) {\n        return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);\n    }\n    slice(offset, length) {\n        const { stride, typeId, children } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, \n        // Don't slice children if we have value offsets (the variable-width types)\n        (children.length === 0 || this.valueOffsets) ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n    }\n    _changeLengthAndBackfillNullBitmap(newLength) {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n    _sliceBuffers(offset, length, stride, typeId) {\n        let arr;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n    _sliceChildren(children, offset, length) {\n        return children.map((child) => child.slice(offset, length));\n    }\n}\nData.prototype.children = Object.freeze([]);\nimport { Visitor } from './visitor.mjs';\nimport { toArrayBufferView, toInt32Array, toUint8Array } from './util/buffer.mjs';\nclass MakeDataVisitor extends Visitor {\n    visit(props) {\n        return this.getVisitFn(props['type']).call(this, props);\n    }\n    visitNull(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['length']: length = 0, } = props;\n        return new Data(type, offset, length, 0);\n    }\n    visitBool(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length >> 3, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitInt(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitFloat(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitUtf8(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitBinary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitFixedSizeBinary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitDate(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitTimestamp(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitTime(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitDecimal(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitList(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n    visitStruct(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { length = children.reduce((len, { length }) => Math.max(len, length), 0), nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);\n    }\n    visitUnion(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);\n        const { ['length']: length = typeIds.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        if (DataType.isSparseUnion(type)) {\n            return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap, typeIds], children);\n        }\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap, typeIds], children);\n    }\n    visitDictionary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.indices.ArrayType, props['data']);\n        const { ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({ type: type.dictionary })]) } = props;\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);\n    }\n    visitInterval(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitFixedSizeList(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.valueType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { ['length']: length = child.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);\n    }\n    visitMap(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.childType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n}\nexport function makeData(props) {\n    return new MakeDataVisitor().visit(props);\n}\n\n//# sourceMappingURL=data.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector.js';\nimport { BufferType, Type } from './enum.js';\nimport { DataType, strideForType } from './type.js';\nimport { popcnt_bit_range, truncateBitmap } from './util/bit.js';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n    [BufferType.OFFSET]: Int32Array;\n    [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n    [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/**\n * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.\n */\nexport class Data<T extends DataType = DataType> {\n\n    declare public readonly type: T;\n    declare public readonly length: number;\n    declare public readonly offset: number;\n    declare public readonly stride: number;\n    declare public readonly nullable: boolean;\n    declare public readonly children: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    declare public dictionary?: Vector;\n\n    declare public readonly values: Buffers<T>[BufferType.DATA];\n    declare public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    declare public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    declare public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, children: Data[] = [], dictionary?: Vector) {\n        this.type = type;\n        this.children = children;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n        this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;\n    }\n\n    public getValid(index: number) {\n        if (this.nullable && this.nullCount > 0) {\n            const pos = this.offset + index;\n            const val = this.nullBitmap[pos >> 3];\n            return (val & (1 << (pos % 8))) !== 0;\n        }\n        return true;\n    }\n\n    public setValid(index: number, value: boolean) {\n        // Don't interact w/ nullBitmap if not nullable\n        if (!this.nullable) { return value; }\n        // If no null bitmap, initialize one on the fly\n        if (!this.nullBitmap || this.nullBitmap.byteLength <= (index >> 3)) {\n            const { nullBitmap } = this._changeLengthAndBackfillNullBitmap(this.length);\n            Object.assign(this, { nullBitmap, _nullCount: 0 });\n        }\n        const { nullBitmap, offset } = this;\n        const pos = (offset + index) >> 3;\n        const bit = (offset + index) % 8;\n        const val = (nullBitmap[pos] >> bit) & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.\n        value ? val === 0 && ((nullBitmap[pos] |= (1 << bit)), (this._nullCount = this.nullCount + 1))\n            : val === 1 && ((nullBitmap[pos] &= ~(1 << bit)), (this._nullCount = this.nullCount - 1));\n        return value;\n    }\n\n    public clone<R extends DataType = T>(type: R = this.type as any, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any>this, children: Data[] = this.children) {\n        return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, children } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (children.length === 0 || this.valueOffsets) ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(children: Data[], offset: number, length: number): Data[] {\n        return children.map((child) => child.slice(offset, length));\n    }\n}\n\n(Data.prototype as any).children = Object.freeze([]);\n\nimport {\n    Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float,\n    Int,\n    Date_,\n    Interval,\n    Time,\n    Timestamp,\n    Union, DenseUnion, SparseUnion,\n} from './type.js';\n\nimport { Visitor } from './visitor.js';\nimport { toArrayBufferView, toInt32Array, toUint8Array } from './util/buffer.js';\n\nclass MakeDataVisitor extends Visitor {\n    public visit<T extends DataType>(props: any): Data<T> {\n        return this.getVisitFn(props['type']).call(this, props);\n    }\n    public visitNull<T extends Null>(props: NullDataProps<T>) {\n        const {\n            ['type']: type,\n            ['offset']: offset = 0,\n            ['length']: length = 0,\n        } = props;\n        return new Data(type, offset, length, 0);\n    }\n    public visitBool<T extends Bool>(props: BoolDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length >> 3, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitInt<T extends Int>(props: IntDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitFloat<T extends Float>(props: FloatDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitUtf8<T extends Utf8>(props: Utf8DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    public visitBinary<T extends Binary>(props: BinaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(props: FixedSizeBinaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitDate<T extends Date_>(props: Date_DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitTimestamp<T extends Timestamp>(props: TimestampDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitTime<T extends Time>(props: TimeDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitDecimal<T extends Decimal>(props: DecimalDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitList<T extends List>(props: ListDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n    public visitStruct<T extends Struct>(props: StructDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const {\n            length = children.reduce((len, { length }) => Math.max(len, length), 0),\n            nullCount = props['nullBitmap'] ? -1 : 0\n        } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);\n    }\n    public visitUnion<T extends Union>(props: UnionDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);\n        const { ['length']: length = typeIds.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        if (DataType.isSparseUnion(type)) {\n            return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap, typeIds], children);\n        }\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap, typeIds], children);\n    }\n    public visitDictionary<T extends Dictionary>(props: DictionaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.indices.ArrayType, props['data']);\n        const { ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({ type: type.dictionary })]) } = props;\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);\n    }\n    public visitInterval<T extends Interval>(props: IntervalDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(props: FixedSizeListDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.valueType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { ['length']: length = child.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);\n    }\n    public visitMap<T extends Map_>(props: Map_DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.childType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n}\n\n/** @ignore */\ninterface DataProps_<T extends DataType> {\n    type: T;\n    offset?: number;\n    length?: number;\n    nullCount?: number;\n    nullBitmap?: NullBuffer;\n}\n\ninterface NullDataProps<T extends Null> { type: T; offset?: number; length?: number }\ninterface IntDataProps<T extends Int> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface DictionaryDataProps<T extends Dictionary> extends DataProps_<T> { data?: DataBuffer<T>; dictionary?: Vector<T['dictionary']> }\ninterface FloatDataProps<T extends Float> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface BoolDataProps<T extends Bool> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface DecimalDataProps<T extends Decimal> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface Date_DataProps<T extends Date_> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface TimeDataProps<T extends Time> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface TimestampDataProps<T extends Timestamp> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface IntervalDataProps<T extends Interval> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface FixedSizeBinaryDataProps<T extends FixedSizeBinary> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface BinaryDataProps<T extends Binary> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; data?: DataBuffer<T> }\ninterface Utf8DataProps<T extends Utf8> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; data?: DataBuffer<T> }\ninterface ListDataProps<T extends List> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; child: Data<T['valueType']> }\ninterface FixedSizeListDataProps<T extends FixedSizeList> extends DataProps_<T> { child: Data<T['valueType']> }\ninterface StructDataProps<T extends Struct> extends DataProps_<T> { children: Data[] }\ninterface Map_DataProps<T extends Map_> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; child: Data }\ninterface SparseUnionDataProps<T extends SparseUnion> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[] }\ninterface DenseUnionDataProps<T extends DenseUnion> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[]; valueOffsets: ValueOffsetsBuffer }\ninterface UnionDataProps<T extends Union> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[]; valueOffsets?: ValueOffsetsBuffer }\n\nexport type DataProps<T extends DataType> = (\n    T extends Null /*            */ ? NullDataProps<T> :\n    T extends Int /*             */ ? IntDataProps<T> :\n    T extends Dictionary /*      */ ? DictionaryDataProps<T> :\n    T extends Float /*           */ ? FloatDataProps<T> :\n    T extends Bool /*            */ ? BoolDataProps<T> :\n    T extends Decimal /*         */ ? DecimalDataProps<T> :\n    T extends Date_ /*           */ ? Date_DataProps<T> :\n    T extends Time /*            */ ? TimeDataProps<T> :\n    T extends Timestamp /*       */ ? TimestampDataProps<T> :\n    T extends Interval /*        */ ? IntervalDataProps<T> :\n    T extends FixedSizeBinary /* */ ? FixedSizeBinaryDataProps<T> :\n    T extends Binary /*          */ ? BinaryDataProps<T> :\n    T extends Utf8 /*            */ ? Utf8DataProps<T> :\n    T extends List /*            */ ? ListDataProps<T> :\n    T extends FixedSizeList /*   */ ? FixedSizeListDataProps<T> :\n    T extends Struct /*          */ ? StructDataProps<T> :\n    T extends Map_ /*            */ ? Map_DataProps<T> :\n    T extends SparseUnion /*     */ ? SparseUnionDataProps<T> :\n    T extends DenseUnion /*      */ ? DenseUnionDataProps<T> :\n    T extends Union /*           */ ? UnionDataProps<T> :\n /*                                */ DataProps_<T>\n);\n\nexport function makeData<T extends Null>(props: NullDataProps<T>): Data<T>;\nexport function makeData<T extends Int>(props: IntDataProps<T>): Data<T>;\nexport function makeData<T extends Dictionary>(props: DictionaryDataProps<T>): Data<T>;\nexport function makeData<T extends Float>(props: FloatDataProps<T>): Data<T>;\nexport function makeData<T extends Bool>(props: BoolDataProps<T>): Data<T>;\nexport function makeData<T extends Decimal>(props: DecimalDataProps<T>): Data<T>;\nexport function makeData<T extends Date_>(props: Date_DataProps<T>): Data<T>;\nexport function makeData<T extends Time>(props: TimeDataProps<T>): Data<T>;\nexport function makeData<T extends Timestamp>(props: TimestampDataProps<T>): Data<T>;\nexport function makeData<T extends Interval>(props: IntervalDataProps<T>): Data<T>;\nexport function makeData<T extends FixedSizeBinary>(props: FixedSizeBinaryDataProps<T>): Data<T>;\nexport function makeData<T extends Binary>(props: BinaryDataProps<T>): Data<T>;\nexport function makeData<T extends Utf8>(props: Utf8DataProps<T>): Data<T>;\nexport function makeData<T extends List>(props: ListDataProps<T>): Data<T>;\nexport function makeData<T extends FixedSizeList>(props: FixedSizeListDataProps<T>): Data<T>;\nexport function makeData<T extends Struct>(props: StructDataProps<T>): Data<T>;\nexport function makeData<T extends Map_>(props: Map_DataProps<T>): Data<T>;\nexport function makeData<T extends SparseUnion>(props: SparseUnionDataProps<T>): Data<T>;\nexport function makeData<T extends DenseUnion>(props: DenseUnionDataProps<T>): Data<T>;\nexport function makeData<T extends Union>(props: UnionDataProps<T>): Data<T>;\nexport function makeData<T extends DataType>(props: DataProps_<T>): Data<T>;\nexport function makeData(props: any) {\n    return new MakeDataVisitor().visit(props);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Type } from './enum.mjs';\nimport { clampRange } from './util/vector.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { Data, makeData } from './data.mjs';\nimport { isChunkedValid, computeChunkOffsets, computeChunkNullCounts, sliceChunks, wrapChunkedCall1, wrapChunkedCall2, wrapChunkedIndexOf, } from './util/chunk.mjs';\nimport { BigInt64Array, BigUint64Array } from './util/compat.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.mjs';\nconst visitorsByTypeId = {};\nconst vectorPrototypesByTypeId = {};\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector {\n    constructor(input) {\n        var _b, _c, _d;\n        const data = input[0] instanceof Vector\n            ? input.flatMap(x => x.data)\n            : input;\n        if (data.length === 0 || data.some((x) => !(x instanceof Data))) {\n            throw new TypeError('Vector constructor expects an Array of Data instances.');\n        }\n        const type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;\n        switch (data.length) {\n            case 0:\n                this._offsets = [0];\n                break;\n            case 1: {\n                // special case for unchunked vectors\n                const { get, set, indexOf, byteLength } = visitorsByTypeId[type.typeId];\n                const unchunkedData = data[0];\n                this.isValid = (index) => isChunkedValid(unchunkedData, index);\n                this.get = (index) => get(unchunkedData, index);\n                this.set = (index, value) => set(unchunkedData, index, value);\n                this.indexOf = (index) => indexOf(unchunkedData, index);\n                this.getByteLength = (index) => byteLength(unchunkedData, index);\n                this._offsets = [0, unchunkedData.length];\n                break;\n            }\n            default:\n                Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = computeChunkOffsets(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = strideForType(type);\n        this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n        this.length = this._offsets[this._offsets.length - 1];\n    }\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */\n    get byteLength() {\n        if (this._byteLength === -1) {\n            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n        }\n        return this._byteLength;\n    }\n    /**\n     * The number of null elements in this Vector.\n     */\n    get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n    get ArrayType() { return this.type.ArrayType; }\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n    get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n    /**\n     * The name of this Vector.\n     */\n    get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    isValid(index) { return false; }\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    get(index) { return null; }\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    set(index, value) { return; }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    indexOf(element, offset) { return -1; }\n    includes(element, offset) { return this.indexOf(element, offset) > 0; }\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    getByteLength(index) { return 0; }\n    /**\n     * Iterator for the Vector's elements.\n     */\n    [Symbol.iterator]() {\n        return iteratorVisitor.visit(this);\n    }\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n    concat(...others) {\n        return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n    slice(begin, end) {\n        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) => sliceChunks(data, _offsets, begin, end)));\n    }\n    toJSON() { return [...this]; }\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n    toArray() {\n        const { type, data, length, stride, ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch (type.typeId) {\n            case Type.Int:\n            case Type.Float:\n            case Type.Decimal:\n            case Type.Time:\n            case Type.Timestamp:\n                switch (data.length) {\n                    case 0: return new ArrayType();\n                    case 1: return data[0].values.subarray(0, length * stride);\n                    default: return data.reduce((memo, { values, length: chunk_length }) => {\n                        memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                        memo.offset += chunk_length * stride;\n                        return memo;\n                    }, { array: new ArrayType(length * stride), offset: 0 }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [...this];\n    }\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n    toString() {\n        return `[${[...this].join(',')}]`;\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    getChild(name) {\n        var _b;\n        return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    getChildAt(index) {\n        if (index > -1 && index < this.numChildren) {\n            return new Vector(this.data.map(({ children }) => children[index]));\n        }\n        return null;\n    }\n    get isMemoized() {\n        if (DataType.isDictionary(this.type)) {\n            return this.data[0].dictionary.isMemoized;\n        }\n        return false;\n    }\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n    memoize() {\n        if (DataType.isDictionary(this.type)) {\n            const dictionary = new MemoizedVector(this.data[0].dictionary);\n            const newData = this.data.map((data) => {\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new Vector(newData);\n        }\n        return new MemoizedVector(this);\n    }\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */\n    unmemoize() {\n        if (DataType.isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary.unmemoize();\n            const newData = this.data.map((data) => {\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new Vector(newData);\n        }\n        return this;\n    }\n}\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nVector[_a] = ((proto) => {\n    proto.type = DataType.prototype;\n    proto.data = [];\n    proto.length = 0;\n    proto.stride = 1;\n    proto.numChildren = 0;\n    proto._nullCount = -1;\n    proto._byteLength = -1;\n    proto._offsets = new Uint32Array([0]);\n    proto[Symbol.isConcatSpreadable] = true;\n    const typeIds = Object.keys(Type)\n        .map((T) => Type[T])\n        .filter((T) => typeof T === 'number' && T !== Type.NONE);\n    for (const typeId of typeIds) {\n        const get = getVisitor.getVisitFnByTypeId(typeId);\n        const set = setVisitor.getVisitFnByTypeId(typeId);\n        const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n        const byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n        visitorsByTypeId[typeId] = { get, set, indexOf, byteLength };\n        vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n            ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n            ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n            ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n            ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n            ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n        });\n    }\n    return 'Vector';\n})(Vector.prototype);\nclass MemoizedVector extends Vector {\n    constructor(vector) {\n        super(vector.data);\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n        const cache = new Array(this.length);\n        Object.defineProperty(this, 'get', {\n            value(index) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) {\n                    return cachedValue;\n                }\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n        Object.defineProperty(this, 'set', {\n            value(index, value) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n        Object.defineProperty(this, 'slice', {\n            value: (begin, end) => new MemoizedVector(slice.call(this, begin, end))\n        });\n        Object.defineProperty(this, 'isMemoized', { value: true });\n        Object.defineProperty(this, 'unmemoize', {\n            value: () => new Vector(this.data)\n        });\n        Object.defineProperty(this, 'memoize', {\n            value: () => this\n        });\n    }\n}\nimport * as dtypes from './type.mjs';\nexport function makeVector(init) {\n    if (init) {\n        if (init instanceof Data) {\n            return new Vector([init]);\n        }\n        if (init instanceof Vector) {\n            return new Vector(init.data);\n        }\n        if (init.type instanceof DataType) {\n            return new Vector([makeData(init)]);\n        }\n        if (Array.isArray(init)) {\n            return new Vector(init.flatMap(v => unwrapInputs(v)));\n        }\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) {\n                init = new Uint8Array(init.buffer);\n            }\n            const props = { offset: 0, length: init.length, nullCount: 0, data: init };\n            if (init instanceof Int8Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int8 }))]);\n            }\n            if (init instanceof Int16Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int16 }))]);\n            }\n            if (init instanceof Int32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int32 }))]);\n            }\n            if (init instanceof BigInt64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int64 }))]);\n            }\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint8 }))]);\n            }\n            if (init instanceof Uint16Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint16 }))]);\n            }\n            if (init instanceof Uint32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint32 }))]);\n            }\n            if (init instanceof BigUint64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint64 }))]);\n            }\n            if (init instanceof Float32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Float32 }))]);\n            }\n            if (init instanceof Float64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Float64 }))]);\n            }\n            throw new Error('Unrecognized input');\n        }\n    }\n    throw new Error('Unrecognized input');\n}\nfunction unwrapInputs(x) {\n    return x instanceof Data ? [x] : (x instanceof Vector ? x.data : makeVector(x).data);\n}\n\n//# sourceMappingURL=vector.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type } from './enum.js';\nimport { clampRange } from './util/vector.js';\nimport { DataType, strideForType } from './type.js';\nimport { Data, makeData, DataProps } from './data.js';\nimport { BigIntArray, TypedArray, TypedArrayDataType } from './interfaces.js';\n\nimport {\n    isChunkedValid,\n    computeChunkOffsets,\n    computeChunkNullCounts,\n    sliceChunks,\n    wrapChunkedCall1,\n    wrapChunkedCall2,\n    wrapChunkedIndexOf,\n} from './util/chunk.js';\nimport { BigInt64Array, BigUint64Array } from './util/compat.js';\n\nimport { instance as getVisitor } from './visitor/get.js';\nimport { instance as setVisitor } from './visitor/set.js';\nimport { instance as indexOfVisitor } from './visitor/indexof.js';\nimport { instance as iteratorVisitor } from './visitor/iterator.js';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.js';\n\n// @ts-ignore\nimport type { vectorFromArray } from './factories.js';\n\nexport interface Vector<T extends DataType = any> {\n    ///\n    // Virtual properties for the TypeScript compiler.\n    // These do not exist at runtime.\n    ///\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n     */\n    [Symbol.isConcatSpreadable]: true;\n}\n\nconst visitorsByTypeId = {} as { [typeId: number]: { get: any; set: any; indexOf: any; byteLength: any } };\nconst vectorPrototypesByTypeId = {} as { [typeId: number]: any };\n\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector<T extends DataType = any> {\n\n    constructor(input: readonly (Data<T> | Vector<T>)[]) {\n        const data: Data<T>[] = input[0] instanceof Vector\n            ? (input as Vector<T>[]).flatMap(x => x.data)\n            : input as Data<T>[];\n        if (data.length === 0 || data.some((x) => !(x instanceof Data))) {\n            throw new TypeError('Vector constructor expects an Array of Data instances.');\n        }\n        const type = data[0]?.type;\n        switch (data.length) {\n            case 0: this._offsets = [0]; break;\n            case 1: {\n                // special case for unchunked vectors\n                const { get, set, indexOf, byteLength } = visitorsByTypeId[type.typeId];\n                const unchunkedData = data[0];\n\n                this.isValid = (index: number) => isChunkedValid(unchunkedData, index);\n                this.get = (index: number) => get(unchunkedData, index);\n                this.set = (index: number, value: T) => set(unchunkedData, index, value);\n                this.indexOf = (index: number) => indexOf(unchunkedData, index);\n                this.getByteLength = (index: number) => byteLength(unchunkedData, index);\n                this._offsets = [0, unchunkedData.length];\n                break;\n            }\n            default:\n                Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = computeChunkOffsets(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = strideForType(type);\n        this.numChildren = type.children?.length ?? 0;\n        this.length = this._offsets[this._offsets.length - 1];\n    }\n\n    declare protected _offsets: number[] | Uint32Array;\n    declare protected _nullCount: number;\n    declare protected _byteLength: number;\n\n    /**\n     * The {@link DataType `DataType`} of this Vector.\n     */\n    public declare readonly type: T;\n\n    /**\n     * The primitive {@link Data `Data`} instances for this Vector's elements.\n     */\n    public declare readonly data: ReadonlyArray<Data<T>>;\n\n    /**\n     * The number of elements in this Vector.\n     */\n    public declare readonly length: number;\n\n    /**\n     * The number of primitive values per Vector element.\n     */\n    public declare readonly stride: number;\n\n    /**\n     * The number of child Vectors if this Vector is a nested dtype.\n     */\n    public declare readonly numChildren: number;\n\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */\n    public get byteLength() {\n        if (this._byteLength === -1) {\n            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n        }\n        return this._byteLength;\n    }\n\n    /**\n     * The number of null elements in this Vector.\n     */\n    public get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n    public get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n\n    /**\n     * The name of this Vector.\n     */\n    public get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    public isValid(index: number): boolean { return false; }\n\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    public get(index: number): T['TValue'] | null { return null; }\n\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    public set(index: number, value: T['TValue'] | null): void { return; }\n\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n\n    public includes(element: T['TValue'], offset?: number): boolean { return this.indexOf(element, offset) > 0; }\n\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    public getByteLength(index: number): number { return 0; }\n\n    /**\n     * Iterator for the Vector's elements.\n     */\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iteratorVisitor.visit(this);\n    }\n\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n    public slice(begin?: number, end?: number): Vector<T> {\n        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) =>\n            sliceChunks(data, _offsets, begin, end)\n        ));\n    }\n\n    public toJSON() { return [...this]; }\n\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n    public toArray(): T['TArray'] {\n        const { type, data, length, stride, ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch (type.typeId) {\n            case Type.Int:\n            case Type.Float:\n            case Type.Decimal:\n            case Type.Time:\n            case Type.Timestamp:\n                switch (data.length) {\n                    case 0: return new ArrayType();\n                    case 1: return data[0].values.subarray(0, length * stride);\n                    default: return data.reduce((memo, { values, length: chunk_length }) => {\n                        memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                        memo.offset += chunk_length * stride;\n                        return memo;\n                    }, { array: new ArrayType(length * stride), offset: 0 }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [...this] as T['TArray'];\n    }\n\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n    public toString() {\n        return `[${[...this].join(',')}]`;\n    }\n\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    public getChild<R extends keyof T['TChildren']>(name: R) {\n        return this.getChildAt(this.type.children?.findIndex((f) => f.name === name));\n    }\n\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        if (index > -1 && index < this.numChildren) {\n            return new Vector(this.data.map(({ children }) => children[index] as Data<R>));\n        }\n        return null;\n    }\n\n    public get isMemoized(): boolean {\n        if (DataType.isDictionary(this.type)) {\n            return this.data[0].dictionary!.isMemoized;\n        }\n        return false;\n    }\n\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n    public memoize(): MemoizedVector<T> {\n        if (DataType.isDictionary(this.type)) {\n            const dictionary = new MemoizedVector(this.data[0].dictionary!);\n            const newData = this.data.map((data) => {\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new Vector(newData);\n        }\n        return new MemoizedVector(this);\n    }\n\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */\n    public unmemoize(): Vector<T> {\n        if (DataType.isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary!.unmemoize();\n            const newData = this.data.map((data) => {\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new Vector(newData);\n        }\n        return this;\n    }\n\n    // Initialize this static property via an IIFE so bundlers don't tree-shake\n    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n    protected static [Symbol.toStringTag] = ((proto: Vector) => {\n        (proto as any).type = DataType.prototype;\n        (proto as any).data = [];\n        (proto as any).length = 0;\n        (proto as any).stride = 1;\n        (proto as any).numChildren = 0;\n        (proto as any)._nullCount = -1;\n        (proto as any)._byteLength = -1;\n        (proto as any)._offsets = new Uint32Array([0]);\n        (proto as any)[Symbol.isConcatSpreadable] = true;\n\n        const typeIds: Type[] = Object.keys(Type)\n            .map((T: any) => Type[T] as any)\n            .filter((T: any) => typeof T === 'number' && T !== Type.NONE);\n\n        for (const typeId of typeIds) {\n            const get = getVisitor.getVisitFnByTypeId(typeId);\n            const set = setVisitor.getVisitFnByTypeId(typeId);\n            const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n            const byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n\n            visitorsByTypeId[typeId] = { get, set, indexOf, byteLength };\n            vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n                ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n                ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n                ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n                ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n                ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n            });\n        }\n\n        return 'Vector';\n    })(Vector.prototype);\n}\n\nclass MemoizedVector<T extends DataType = any> extends Vector<T> {\n\n    public constructor(vector: Vector<T>) {\n        super(vector.data);\n\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n\n        const cache = new Array<T['TValue'] | null>(this.length);\n\n        Object.defineProperty(this, 'get', {\n            value(index: number) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) {\n                    return cachedValue;\n                }\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n\n        Object.defineProperty(this, 'set', {\n            value(index: number, value: T['TValue'] | null) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n\n        Object.defineProperty(this, 'slice', {\n            value: (begin?: number, end?: number) => new MemoizedVector(slice.call(this, begin, end))\n        });\n\n        Object.defineProperty(this, 'isMemoized', { value: true });\n\n        Object.defineProperty(this, 'unmemoize', {\n            value: () => new Vector(this.data)\n        });\n\n        Object.defineProperty(this, 'memoize', {\n            value: () => this\n        });\n    }\n}\n\nimport * as dtypes from './type.js';\n\n/**\n * Creates a Vector without data copies.\n *\n * @example\n * ```ts\n * const vector = makeVector(new Int32Array([1, 2, 3]));\n * ```\n */\nexport function makeVector<T extends TypedArray | BigIntArray>(data: T | readonly T[]): Vector<TypedArrayDataType<T>>;\nexport function makeVector<T extends DataView>(data: T | readonly T[]): Vector<dtypes.Int8>;\nexport function makeVector<T extends DataType>(data: Data<T> | readonly Data<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: Vector<T> | readonly Vector<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: DataProps<T> | readonly DataProps<T>[]): Vector<T>;\n\nexport function makeVector(init: any) {\n    if (init) {\n        if (init instanceof Data) { return new Vector([init]); }\n        if (init instanceof Vector) { return new Vector(init.data); }\n        if (init.type instanceof DataType) { return new Vector([makeData(init)]); }\n        if (Array.isArray(init)) {\n            return new Vector(init.flatMap(v => unwrapInputs(v)));\n        }\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) {\n                init = new Uint8Array(init.buffer);\n            }\n            const props = { offset: 0, length: init.length, nullCount: 0, data: init };\n            if (init instanceof Int8Array) { return new Vector([makeData({ ...props, type: new dtypes.Int8 })]); }\n            if (init instanceof Int16Array) { return new Vector([makeData({ ...props, type: new dtypes.Int16 })]); }\n            if (init instanceof Int32Array) { return new Vector([makeData({ ...props, type: new dtypes.Int32 })]); }\n            if (init instanceof BigInt64Array) { return new Vector([makeData({ ...props, type: new dtypes.Int64 })]); }\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) { return new Vector([makeData({ ...props, type: new dtypes.Uint8 })]); }\n            if (init instanceof Uint16Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint16 })]); }\n            if (init instanceof Uint32Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint32 })]); }\n            if (init instanceof BigUint64Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint64 })]); }\n            if (init instanceof Float32Array) { return new Vector([makeData({ ...props, type: new dtypes.Float32 })]); }\n            if (init instanceof Float64Array) { return new Vector([makeData({ ...props, type: new dtypes.Float64 })]); }\n            throw new Error('Unrecognized input');\n        }\n    }\n    throw new Error('Unrecognized input');\n}\n\nfunction unwrapInputs(x: any) {\n    return x instanceof Data ? [x] : (x instanceof Vector ? x.data : makeVector(x).data);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { MapRow } from '../row/map.mjs';\nimport { StructRow } from '../row/struct.mjs';\nimport { compareArrayLike } from '../util/buffer.mjs';\n/** @ignore */\nexport function clampIndex(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n/** @ignore */\nlet tmp;\n/** @ignore */\nexport function clampRange(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    const { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\nconst isNaNFast = (value) => value !== value;\n/** @ignore */\nexport function createElementComparator(search) {\n    const typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return (value) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) {\n        return createMapComparator(search);\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        return createArrayLikeComparator(search);\n    }\n    // Compare Vectors\n    if (search instanceof Vector) {\n        return createVectorComparator(search);\n    }\n    return createObjectComparator(search, true);\n    // Compare non-empty Objects\n    // return createObjectComparator(search, search instanceof Proxy);\n}\n/** @ignore */\nfunction createArrayLikeComparator(lhs) {\n    const comparators = [];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n/** @ignore */\nfunction createMapComparator(lhs) {\n    let i = -1;\n    const comparators = [];\n    for (const v of lhs.values())\n        comparators[++i] = createElementComparator(v);\n    return createSubElementsComparator(comparators);\n}\n/** @ignore */\nfunction createVectorComparator(lhs) {\n    const comparators = [];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n/** @ignore */\nfunction createObjectComparator(lhs, allowEmpty = false) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (!allowEmpty && keys.length === 0) {\n        return () => false;\n    }\n    const comparators = [];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\nfunction createSubElementsComparator(comparators, keys) {\n    return (rhs) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n                return compareObject(comparators, rhs, rhs.keys());\n            case MapRow:\n            case StructRow:\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\nfunction compareArray(comparators, arr) {\n    const n = comparators.length;\n    if (arr.length !== n) {\n        return false;\n    }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareVector(comparators, vec) {\n    const n = comparators.length;\n    if (vec.length !== n) {\n        return false;\n    }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObject(comparators, obj, keys) {\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n    let i = 0;\n    const n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n\n//# sourceMappingURL=vector.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector.js';\nimport { MapRow } from '../row/map.js';\nimport { StructRow } from '../row/struct.js';\nimport { compareArrayLike } from '../util/buffer.js';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    const { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    const typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return (value: any) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return createMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    return createObjectComparator(search, true);\n    // Compare non-empty Objects\n    // return createObjectComparator(search, search instanceof Proxy);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    for (const v of lhs.values()) comparators[++i] = createElementComparator(v);\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any, allowEmpty = false) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (!allowEmpty && keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n                return compareObject(comparators, rhs, rhs.keys());\n            case MapRow:\n            case StructRow:\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    const n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n        ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { valueToString } from '../util/pretty.mjs';\nimport { instance as getVisitor } from '../visitor/get.mjs';\nimport { instance as setVisitor } from '../visitor/set.mjs';\n/** @ignore */ export const kKeys = Symbol.for('keys');\n/** @ignore */ export const kVals = Symbol.for('vals');\nexport class MapRow {\n    constructor(slice) {\n        this[kKeys] = new Vector([slice.children[0]]).memoize();\n        this[kVals] = slice.children[1];\n        return new Proxy(this, new MapRowProxyHandler());\n    }\n    [Symbol.iterator]() {\n        return new MapRowIterator(this[kKeys], this[kVals]);\n    }\n    get size() { return this[kKeys].length; }\n    toArray() { return Object.values(this.toJSON()); }\n    toJSON() {\n        const keys = this[kKeys];\n        const vals = this[kVals];\n        const json = {};\n        for (let i = -1, n = keys.length; ++i < n;) {\n            json[keys.get(i)] = getVisitor.visit(vals, i);\n        }\n        return json;\n    }\n    toString() {\n        return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(', ')}}`;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n}\nclass MapRowIterator {\n    constructor(keys, vals) {\n        this.keys = keys;\n        this.vals = vals;\n        this.keyIndex = 0;\n        this.numKeys = keys.length;\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        const i = this.keyIndex;\n        if (i === this.numKeys) {\n            return { done: true, value: null };\n        }\n        this.keyIndex++;\n        return {\n            done: false,\n            value: [\n                this.keys.get(i),\n                getVisitor.visit(this.vals, i),\n            ]\n        };\n    }\n}\n/** @ignore */\nclass MapRowProxyHandler {\n    isExtensible() { return false; }\n    deleteProperty() { return false; }\n    preventExtensions() { return true; }\n    ownKeys(row) {\n        return row[kKeys].toArray().map(String);\n    }\n    has(row, key) {\n        return row[kKeys].includes(key);\n    }\n    getOwnPropertyDescriptor(row, key) {\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            return { writable: true, enumerable: true, configurable: true };\n        }\n        return;\n    }\n    get(row, key) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) {\n            return row[key];\n        }\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            const val = getVisitor.visit(Reflect.get(row, kVals), idx);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row, key, val) {\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            setVisitor.visit(Reflect.get(row, kVals), idx, val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        }\n        else if (Reflect.has(row, key)) {\n            return Reflect.set(row, key, val);\n        }\n        return false;\n    }\n}\nObject.defineProperties(MapRow.prototype, {\n    [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },\n    [kKeys]: { writable: true, enumerable: false, configurable: false, value: null },\n    [kVals]: { writable: true, enumerable: false, configurable: false, value: null },\n});\n\n//# sourceMappingURL=map.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { DataType, Struct } from '../type.js';\nimport { valueToString } from '../util/pretty.js';\nimport { instance as getVisitor } from '../visitor/get.js';\nimport { instance as setVisitor } from '../visitor/set.js';\n\n/** @ignore */ export const kKeys = Symbol.for('keys');\n/** @ignore */ export const kVals = Symbol.for('vals');\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> {\n\n    [key: string]: V['TValue'];\n\n    declare private [kKeys]: Vector<K>;\n    declare private [kVals]: Data<V>;\n\n    constructor(slice: Data<Struct<{ key: K; value: V }>>) {\n        this[kKeys] = new Vector([slice.children[0]]).memoize() as Vector<K>;\n        this[kVals] = slice.children[1] as Data<V>;\n        return new Proxy(this, new MapRowProxyHandler<K, V>());\n    }\n\n    [Symbol.iterator]() {\n        return new MapRowIterator(this[kKeys], this[kVals]);\n    }\n\n    public get size() { return this[kKeys].length; }\n\n    public toArray() { return Object.values(this.toJSON()); }\n\n    public toJSON() {\n        const keys = this[kKeys];\n        const vals = this[kVals];\n        const json = {} as { [P in K['TValue']]: V['TValue'] };\n        for (let i = -1, n = keys.length; ++i < n;) {\n            json[keys.get(i)] = getVisitor.visit(vals, i);\n        }\n        return json;\n    }\n\n    public toString() {\n        return `{${[...this].map(([key, val]) =>\n            `${valueToString(key)}: ${valueToString(val)}`\n        ).join(', ')\n            }}`;\n    }\n\n    public [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n}\n\nclass MapRowIterator<K extends DataType = any, V extends DataType = any>\n    implements IterableIterator<[K['TValue'], V['TValue'] | null]> {\n\n    private keys: Vector<K>;\n    private vals: Data<V>;\n    private numKeys: number;\n    private keyIndex: number;\n\n    constructor(keys: Vector<K>, vals: Data<V>) {\n        this.keys = keys;\n        this.vals = vals;\n        this.keyIndex = 0;\n        this.numKeys = keys.length;\n    }\n\n    [Symbol.iterator]() { return this; }\n\n    next() {\n        const i = this.keyIndex;\n        if (i === this.numKeys) {\n            return { done: true, value: null } as IteratorReturnResult<null>;\n        }\n        this.keyIndex++;\n        return {\n            done: false,\n            value: [\n                this.keys.get(i),\n                getVisitor.visit(this.vals, i),\n            ] as [K['TValue'], V['TValue'] | null]\n        };\n    }\n}\n\n/** @ignore */\nclass MapRowProxyHandler<K extends DataType = any, V extends DataType = any> implements ProxyHandler<MapRow<K, V>> {\n    isExtensible() { return false; }\n    deleteProperty() { return false; }\n    preventExtensions() { return true; }\n    ownKeys(row: MapRow<K, V>) {\n        return row[kKeys].toArray().map(String);\n    }\n    has(row: MapRow<K, V>, key: string | symbol) {\n        return row[kKeys].includes(key);\n    }\n    getOwnPropertyDescriptor(row: MapRow<K, V>, key: string | symbol) {\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            return { writable: true, enumerable: true, configurable: true };\n        }\n        return;\n    }\n    get(row: MapRow<K, V>, key: string | symbol) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) {\n            return (row as any)[key];\n        }\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            const val = getVisitor.visit(Reflect.get(row, kVals), idx);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row: MapRow<K, V>, key: string | symbol, val: V) {\n        const idx = row[kKeys].indexOf(key);\n        if (idx !== -1) {\n            setVisitor.visit(Reflect.get(row, kVals), idx, val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        } else if (Reflect.has(row, key)) {\n            return Reflect.set(row, key, val);\n        }\n        return false;\n    }\n}\n\nObject.defineProperties(MapRow.prototype, {\n    [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },\n    [kKeys]: { writable: true, enumerable: false, configurable: false, value: null },\n    [kVals]: { writable: true, enumerable: false, configurable: false, value: null },\n});\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */ const undf = void (0);\n/** @ignore */\nexport function valueToString(x) {\n    if (x === null) {\n        return 'null';\n    }\n    if (x === undf) {\n        return 'undefined';\n    }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    if (ArrayBuffer.isView(x)) {\n        if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n            return `[${[...x].map(x => valueToString(x))}]`;\n        }\n        return `[${x}]`;\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);\n}\n\n//# sourceMappingURL=pretty.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BigInt64Array, BigUint64Array } from './compat.js';\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any): string {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    if (ArrayBuffer.isView(x)) {\n        if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n            return `[${[...x].map(x => valueToString(x))}]`;\n        }\n        return `[${x}]`;\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [BigIntUnavailable, false];\n})();\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];\n})();\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];\n})();\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n/** @ignore */ const isNumber = (x) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x) => typeof x === 'function';\n/** @ignore */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isObject = (x) => x != null && Object(x) === x;\n/** @ignore */\nexport const isPromise = (x) => {\n    return isObject(x) && isFunction(x.then);\n};\n/** @ignore */\nexport const isObservable = (x) => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n/** @ignore */\nexport const isIterable = (x) => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n/** @ignore */\nexport const isAsyncIterable = (x) => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n/** @ignore */\nexport const isArrowJSON = (x) => {\n    return isObject(x) && isObject(x['schema']);\n};\n/** @ignore */\nexport const isArrayLike = (x) => {\n    return isObject(x) && isNumber(x['length']);\n};\n/** @ignore */\nexport const isIteratorResult = (x) => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n/** @ignore */\nexport const isUnderlyingSink = (x) => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n/** @ignore */\nexport const isFileHandle = (x) => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n/** @ignore */\nexport const isFSReadStream = (x) => {\n    return isReadableNodeStream(x) && isNumber(x['bytesRead']);\n};\n/** @ignore */\nexport const isFetchResponse = (x) => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\nconst isReadableInterop = (x) => ('_getDOMStream' in x && '_getNodeStream' in x);\n/** @ignore */\nexport const isWritableDOMStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !isReadableInterop(x);\n};\n/** @ignore */\nexport const isReadableDOMStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !isReadableInterop(x);\n};\n/** @ignore */\nexport const isWritableNodeStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !isReadableInterop(x);\n};\n/** @ignore */\nexport const isReadableNodeStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !isReadableInterop(x);\n};\n/** @ignore */\nexport const isFlatbuffersByteBuffer = (x) => {\n    return isObject(x) &&\n        isFunction(x['clear']) &&\n        isFunction(x['bytes']) &&\n        isFunction(x['position']) &&\n        isFunction(x['setPosition']) &&\n        isFunction(x['capacity']) &&\n        isFunction(x['getBufferIdentifier']) &&\n        isFunction(x['createLong']);\n};\n\n//# sourceMappingURL=compat.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces.js';\n\n/* eslint-disable unicorn/throw-new-error */\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any>BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any>BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any>BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any>x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\nconst isReadableInterop = <T = any>(x: any): x is ReadableInterop<T> => ('_getDOMStream' in x && '_getNodeStream' in x);\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !isReadableInterop(x);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !isReadableInterop(x);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !isReadableInterop(x);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !isReadableInterop(x);\n};\n\n/** @ignore */\nexport const isFlatbuffersByteBuffer = (x: any): x is import('flatbuffers').ByteBuffer => {\n    return isObject(x) &&\n        isFunction(x['clear']) &&\n        isFunction(x['bytes']) &&\n        isFunction(x['position']) &&\n        isFunction(x['setPosition']) &&\n        isFunction(x['capacity']) &&\n        isFunction(x['getBufferIdentifier']) &&\n        isFunction(x['createLong']);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { MapRow } from '../row/map.mjs';\nimport { StructRow } from '../row/struct.mjs';\nimport { decodeUtf8 } from '../util/utf8.mjs';\nimport { uint16ToFloat64 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class GetVisitor extends Visitor {\n}\n/** @ignore */\nfunction wrapGet(fn) {\n    return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;\n}\n/** @ignore */ const epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */ const epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */ const epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */ const epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n/** @ignore */ const epochMillisecondsToDate = (epochMs) => new Date(epochMs);\n/** @ignore */ const epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */ const epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_data, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n    if (index + 1 >= valueOffsets.length) {\n        return null;\n    }\n    const x = valueOffsets[index];\n    const y = valueOffsets[index + 1];\n    return values.subarray(x, y);\n};\n/** @ignore */\nconst getBool = ({ offset, values }, index) => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n/** @ignore */\nconst getDateDay = ({ values }, index) => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = ({ stride, values }, index) => values[stride * index];\n/** @ignore */\nconst getFloat16 = ({ stride, values }, index) => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts = ({ values }, index) => values[index];\n/** @ignore */\nconst getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = ({ values, valueOffsets }, index) => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = ({ values }, index) => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = ({ type, values }, index) => (type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index]));\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (data, index) => (data.type.unit === DateUnit.DAY\n    ? getDateDay(data, index)\n    : getDateMillisecond(data, index));\n/** @ignore */\nconst getTimestampSecond = ({ values }, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (data, index) => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(data, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(data, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(data, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(data, index);\n    }\n};\n/** @ignore */\nconst getTimeSecond = ({ values }, index) => values[index];\n/** @ignore */\nconst getTimeMillisecond = ({ values }, index) => values[index];\n/** @ignore */\nconst getTimeMicrosecond = ({ values }, index) => values[index];\n/** @ignore */\nconst getTimeNanosecond = ({ values }, index) => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (data, index) => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(data, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(data, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(data, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(data, index);\n    }\n};\n/** @ignore */\nconst getDecimal = ({ values, stride }, index) => BN.decimal(values.subarray(stride * index, stride * (index + 1)));\n/** @ignore */\nconst getList = (data, index) => {\n    const { valueOffsets, stride, children } = data;\n    const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;\n    const child = children[0];\n    const slice = child.slice(begin, end - begin);\n    return new Vector([slice]);\n};\n/** @ignore */\nconst getMap = (data, index) => {\n    const { valueOffsets, children } = data;\n    const { [index]: begin, [index + 1]: end } = valueOffsets;\n    const child = children[0];\n    return new MapRow(child.slice(begin, end - begin));\n};\n/** @ignore */\nconst getStruct = (data, index) => {\n    return new StructRow(data, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (data, index) => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnion(data, index) :\n        getSparseUnion(data, index);\n};\n/** @ignore */\nconst getDenseUnion = (data, index) => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, data.valueOffsets[index]);\n};\n/** @ignore */\nconst getSparseUnion = (data, index) => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, index);\n};\n/** @ignore */\nconst getDictionary = (data, index) => {\n    var _a;\n    return (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.get(data.values[index]);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (data, index) => (data.type.unit === IntervalUnit.DAY_TIME)\n    ? getIntervalDayTime(data, index)\n    : getIntervalYearMonth(data, index);\n/** @ignore */\nconst getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getIntervalYearMonth = ({ values }, index) => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = Math.trunc(interval / 12); /* years */\n    int32s[1] = Math.trunc(interval % 12); /* months */\n    return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (data, index) => {\n    const { stride, children } = data;\n    const child = children[0];\n    const slice = child.slice(index * stride, stride);\n    return new Vector([slice]);\n};\nGetVisitor.prototype.visitNull = wrapGet(getNull);\nGetVisitor.prototype.visitBool = wrapGet(getBool);\nGetVisitor.prototype.visitInt = wrapGet(getInt);\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\nGetVisitor.prototype.visitDate = wrapGet(getDate);\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\nGetVisitor.prototype.visitTime = wrapGet(getTime);\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\nGetVisitor.prototype.visitList = wrapGet(getList);\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\nGetVisitor.prototype.visitMap = wrapGet(getMap);\n/** @ignore */\nexport const instance = new GetVisitor();\n\n//# sourceMappingURL=get.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { BN } from '../util/bn.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { MapRow } from '../row/map.js';\nimport { StructRow, StructRowProxy } from '../row/struct.js';\nimport { decodeUtf8 } from '../util/utf8.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { uint16ToFloat64 } from '../util/math.js';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number): T['TValue'] | null;\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[]): (T['TValue'] | null)[];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (data: Data<T>, index: number) => T['TValue'] | null;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number) => TypeToDataType<T>['TValue'];\n    visitNull<T extends Null>(data: Data<T>, index: number): T['TValue'] | null;\n    visitBool<T extends Bool>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt<T extends Int>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt8<T extends Int8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt16<T extends Int16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt32<T extends Int32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt64<T extends Int64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint8<T extends Uint8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint16<T extends Uint16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint32<T extends Uint32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint64<T extends Uint64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat<T extends Float>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat16<T extends Float16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat32<T extends Float32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat64<T extends Float64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitBinary<T extends Binary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDate<T extends Date_>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTime<T extends Time>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number): T['TValue'] | null;\n    visitList<T extends List>(data: Data<T>, index: number): T['TValue'] | null;\n    visitStruct<T extends Struct>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUnion<T extends Union>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] | null;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInterval<T extends Interval>(data: Data<T>, index: number): T['TValue'] | null;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number): T['TValue'] | null;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] | null;\n    visitMap<T extends Map_>(data: Data<T>, index: number): T['TValue'] | null;\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor { }\n\n/** @ignore */\nfunction wrapGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\n    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\n}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_data: Data<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    if (index + 1 >= valueOffsets.length) {\n        return null as any;\n    }\n    const x = valueOffsets[index];\n    const y = valueOffsets[index + 1];\n    return values.subarray(x, y);\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Data<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay = <T extends DateDay>({ values }: Data<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = <T extends Numeric1X>({ stride, values }: Data<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16 = <T extends Float16>({ stride, values }: Data<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts = <T extends Numeric2X>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float>({ type, values }: Data<T>, index: number): T['TValue'] => (\n    type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index])\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_>(data: Data<T>, index: number): T['TValue'] => (\n    data.type.unit === DateUnit.DAY\n        ? getDateDay(data as Data<DateDay>, index)\n        : getDateMillisecond(data as Data<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = <T extends Timestamp>(data: Data<T>, index: number): T['TValue'] => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(data as Data<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(data as Data<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(data as Data<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(data as Data<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = <T extends Time>(data: Data<T>, index: number): T['TValue'] => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(data as Data<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(data as Data<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(data as Data<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(data as Data<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number): T['TValue'] => BN.decimal(values.subarray(stride * index, stride * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(data: Data<T>, index: number): T['TValue'] => {\n    const { valueOffsets, stride, children } = data;\n    const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(begin, end - begin);\n    return new Vector([slice]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(data: Data<T>, index: number): T['TValue'] => {\n    const { valueOffsets, children } = data;\n    const { [index]: begin, [index + 1]: end } = valueOffsets;\n    const child = children[0] as Data<T['childType']>;\n    return new MapRow(child.slice(begin, end - begin));\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(data: Data<T>, index: number): T['TValue'] => {\n    return new StructRow(data, index) as StructRowProxy<T['TValue']>;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    D extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: D, index: number): D['TValue'] => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnion(data as Data<DenseUnion>, index) :\n        getSparseUnion(data as Data<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, data.valueOffsets[index]);\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, index);\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(data: Data<T>, index: number): T['TValue'] => {\n    return data.dictionary?.get(data.values[index]);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(data: Data<T>, index: number): T['TValue'] =>\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(data as Data<IntervalDayTime>, index)\n        : getIntervalYearMonth(data as Data<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = Math.trunc(interval / 12); /* years */\n    int32s[1] = Math.trunc(interval % 12); /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] => {\n    const { stride, children } = data;\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(index * stride, stride);\n    return new Vector([slice]);\n};\n\nGetVisitor.prototype.visitNull = wrapGet(getNull);\nGetVisitor.prototype.visitBool = wrapGet(getBool);\nGetVisitor.prototype.visitInt = wrapGet(getInt);\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\nGetVisitor.prototype.visitDate = wrapGet(getDate);\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\nGetVisitor.prototype.visitTime = wrapGet(getTime);\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\nGetVisitor.prototype.visitList = wrapGet(getList);\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\nGetVisitor.prototype.visitMap = wrapGet(getMap);\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toArrayBufferView } from './buffer.mjs';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n/** @ignore */\nfunction BigNum(x, ...xs) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function () { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function () { return bignumToNumber(this); };\nBigNum.prototype.toString = function () { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function (hint = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    // @ts-ignore\n    return bignumToString(this);\n};\n/** @ignore */\nfunction SignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(...args) { return BigNum.apply(this, args); }\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': BigInt64Array });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n/** @ignore */\nfunction bignumToNumber(bn) {\n    const { buffer, byteOffset, length, 'signed': signed } = bn;\n    const words = new BigUint64Array(buffer, byteOffset, length);\n    const negative = signed && words[words.length - 1] & (BigInt(1) << BigInt(63));\n    let number = negative ? BigInt(1) : BigInt(0);\n    let i = BigInt(0);\n    if (!negative) {\n        for (const word of words) {\n            number += word * (BigInt(1) << (BigInt(32) * i++));\n        }\n    }\n    else {\n        for (const word of words) {\n            number += ~word * (BigInt(1) << (BigInt(32) * i++));\n        }\n        number *= BigInt(-1);\n    }\n    return number;\n}\n/** @ignore */\nexport let bignumToString;\n/** @ignore */\nexport let bignumToBigInt;\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = bignumToString;\n}\nelse {\n    bignumToBigInt = ((a) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a));\n    bignumToString = ((a) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n/** @ignore */\nfunction decimalToString(a) {\n    let digits = '';\n    const base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1;\n    const n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits !== null && digits !== void 0 ? digits : `0`;\n}\n/** @ignore */\nexport class BN {\n    /** @nocollapse */\n    static new(num, isSigned) {\n        switch (isSigned) {\n            case true: return new SignedBigNum(num);\n            case false: return new UnsignedBigNum(num);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new SignedBigNum(num);\n        }\n        if (num.byteLength === 16) {\n            return new DecimalBigNum(num);\n        }\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static signed(num) {\n        return new SignedBigNum(num);\n    }\n    /** @nocollapse */\n    static unsigned(num) {\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static decimal(num) {\n        return new DecimalBigNum(num);\n    }\n    constructor(num, isSigned) {\n        return BN.new(num, isSigned);\n    }\n}\n\n//# sourceMappingURL=bn.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer.js';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces.js';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces.js';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat.js';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function <T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function <T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function <T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function <T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    // @ts-ignore\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void];\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': BigInt64Array });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    const { buffer, byteOffset, length, 'signed': signed } = bn;\n    const words = new BigUint64Array(buffer, byteOffset, length);\n    const negative = signed && words[words.length - 1] & (BigInt(1) << BigInt(63));\n    let number = negative ? BigInt(1) : BigInt(0);\n    let i = BigInt(0);\n    if (!negative) {\n        for (const word of words) {\n            number += word * (BigInt(1) << (BigInt(32) * i++));\n        }\n    } else {\n        for (const word of words) {\n            number += ~word * (BigInt(1) << (BigInt(32) * i++));\n        }\n        number *= BigInt(-1);\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any>bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    const base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1;\n    const n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ?? `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any>SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any>UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any>SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any>DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any>UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any>SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any>UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any>DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new <T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n    'Int8Array' |\n    'Int16Array' |\n    'Int32Array' |\n    'Uint8Array' |\n    'Uint16Array' |\n    'Uint32Array' |\n    'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isFlatbuffersByteBuffer, BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n    const result = chunks[0] ? [chunks[0]] : [];\n    let xOffset, yOffset, xLen, yLen;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n/** @ignore */\nexport function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n/** @ignore */\nexport function joinUint8Arrays(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    const result = collapseContiguousByteRanges(chunks);\n    const byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source, sliced, buffer;\n    let offset = 0, index = -1;\n    const length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);\n    for (const n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            }\n            else if (sliced.length === source.length) {\n                index++;\n            }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n/** @ignore */\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n    let value = isIteratorResult(input) ? input.value : input;\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) {\n        return new ArrayBufferViewCtor(0);\n    }\n    if (typeof value === 'string') {\n        value = encodeUtf8(value);\n    }\n    if (value instanceof ArrayBuffer) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof SharedArrayBuf) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (isFlatbuffersByteBuffer(value)) {\n        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n    }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : (value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT));\n}\n/** @ignore */ export const toInt8Array = (input) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input) => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n    const wrap = function* (x) { yield x; };\n    const buffers = (typeof source === 'string') ? wrap(source)\n        : (ArrayBuffer.isView(source)) ? wrap(source)\n            : (source instanceof ArrayBuffer) ? wrap(source)\n                : (source instanceof SharedArrayBuf) ? wrap(source)\n                    : !isIterable(source) ? wrap(source) : source;\n    yield* pump((function* (it) {\n        let r = null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\n/** @ignore */ export const toInt8ArrayIterator = (input) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n    return __asyncGenerator(this, arguments, function* toArrayBufferViewAsyncIterator_1() {\n        // if a Promise, unwrap the Promise and iterate the resolved value\n        if (isPromise(source)) {\n            return yield __await(yield __await(yield* __asyncDelegator(__asyncValues(toArrayBufferViewAsyncIterator(ArrayCtor, yield __await(source))))));\n        }\n        const wrap = function (x) { return __asyncGenerator(this, arguments, function* () { yield yield __await(yield __await(x)); }); };\n        const emit = function (source) {\n            return __asyncGenerator(this, arguments, function* () {\n                yield __await(yield* __asyncDelegator(__asyncValues(pump((function* (it) {\n                    let r = null;\n                    do {\n                        r = it.next(yield r === null || r === void 0 ? void 0 : r.value);\n                    } while (!r.done);\n                })(source[Symbol.iterator]())))));\n            });\n        };\n        const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                    : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                        : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                            : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                : source; // otherwise if AsyncIterable, use it\n        yield __await(// otherwise if AsyncIterable, use it\n        yield* __asyncDelegator(__asyncValues(pump((function (it) {\n            return __asyncGenerator(this, arguments, function* () {\n                let r = null;\n                do {\n                    r = yield __await(it.next(yield yield __await(toArrayBufferView(ArrayCtor, r))));\n                } while (!r.done);\n            });\n        })(buffers[Symbol.asyncIterator]())))));\n        return yield __await(new ArrayCtor());\n    });\n}\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n/** @ignore */\nexport function compareArrayLike(a, b) {\n    let i = 0;\n    const n = a.length;\n    if (n !== b.length) {\n        return false;\n    }\n    if (n > 0) {\n        do {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        } while (++i < n);\n    }\n    return true;\n}\n\n//# sourceMappingURL=buffer.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { TypedArray, TypedArrayConstructor, BigIntArrayConstructor } from '../interfaces.js';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isFlatbuffersByteBuffer, BigInt64Array, BigUint64Array } from './compat.js';\nimport { ByteBuffer } from 'flatbuffers';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    const result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    const result = collapseContiguousByteRanges(chunks);\n    const byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1;\n    const length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);\n    for (const n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined |\n    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n    ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined>;\n\n/** @ignore */\nexport function toArrayBufferView<\n    T extends TypedArrayConstructor<any> | BigIntArrayConstructor<any>\n>(ArrayBufferViewCtor: any, input: ArrayBufferViewInput): InstanceType<T> {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (isFlatbuffersByteBuffer(value)) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : (value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT));\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n        (typeof source === 'string') ? wrap(source)\n            : (ArrayBuffer.isView(source)) ? wrap(source)\n                : (source instanceof ArrayBuffer) ? wrap(source)\n                    : (source instanceof SharedArrayBuf) ? wrap(source)\n                        : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it: Iterator<ArrayBufferViewInput, any, number | undefined>): Generator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any>null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncGenerator<T, T, number | undefined> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function* (it: Iterator<any>) {\n            let r: IteratorResult<any> = <any>null;\n            do {\n                r = it.next(yield r?.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                    : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                        : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                            : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it: AsyncIterator<ArrayBufferViewInput, any, number | undefined>): AsyncGenerator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any>null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0;\n    const n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst decoder = new TextDecoder('utf-8');\n/** @ignore */\nexport const decodeUtf8 = (buffer) => decoder.decode(buffer);\nconst encoder = new TextEncoder();\n/** @ignore */\nexport const encodeUtf8 = (value) => encoder.encode(value);\n\n//# sourceMappingURL=utf8.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst decoder = new TextDecoder('utf-8');\n/** @ignore */\nexport const decodeUtf8 = (buffer?: BufferSource) => decoder.decode(buffer);\n\nconst encoder = new TextEncoder();\n/** @ignore */\nexport const encodeUtf8 = (value?: string) => encoder.encode(value);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum.mjs';\nimport { DataType, } from './type.mjs';\nexport class Visitor {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    visit(...args) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    getVisitFnByTypeId(typeId, throwIfNotFound = true) {\n        return getVisitFnByTypeId(this, typeId, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) { return null; }\n    visitBool(_node, ..._args) { return null; }\n    visitInt(_node, ..._args) { return null; }\n    visitFloat(_node, ..._args) { return null; }\n    visitUtf8(_node, ..._args) { return null; }\n    visitBinary(_node, ..._args) { return null; }\n    visitFixedSizeBinary(_node, ..._args) { return null; }\n    visitDate(_node, ..._args) { return null; }\n    visitTimestamp(_node, ..._args) { return null; }\n    visitTime(_node, ..._args) { return null; }\n    visitDecimal(_node, ..._args) { return null; }\n    visitList(_node, ..._args) { return null; }\n    visitStruct(_node, ..._args) { return null; }\n    visitUnion(_node, ..._args) { return null; }\n    visitDictionary(_node, ..._args) { return null; }\n    visitInterval(_node, ..._args) { return null; }\n    visitFixedSizeList(_node, ..._args) { return null; }\n    visitMap(_node, ..._args) { return null; }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n    if (typeof node === 'number') {\n        return getVisitFnByTypeId(visitor, node, throwIfNotFound);\n    }\n    if (typeof node === 'string' && (node in Type)) {\n        return getVisitFnByTypeId(visitor, Type[node], throwIfNotFound);\n    }\n    if (node && (node instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node), throwIfNotFound);\n    }\n    if ((node === null || node === void 0 ? void 0 : node.type) && (node.type instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node.type), throwIfNotFound);\n    }\n    return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);\n}\n/** @ignore */\nfunction getVisitFnByTypeId(visitor, dtype, throwIfNotFound = true) {\n    let fn = null;\n    switch (dtype) {\n        case Type.Null:\n            fn = visitor.visitNull;\n            break;\n        case Type.Bool:\n            fn = visitor.visitBool;\n            break;\n        case Type.Int:\n            fn = visitor.visitInt;\n            break;\n        case Type.Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case Type.Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case Type.Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case Type.Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case Type.Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case Type.Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case Type.Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case Type.Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case Type.Float:\n            fn = visitor.visitFloat;\n            break;\n        case Type.Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case Type.Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case Type.Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case Type.Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case Type.Binary:\n            fn = visitor.visitBinary;\n            break;\n        case Type.FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case Type.Date:\n            fn = visitor.visitDate;\n            break;\n        case Type.DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case Type.DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case Type.Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case Type.TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case Type.Time:\n            fn = visitor.visitTime;\n            break;\n        case Type.TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case Type.TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case Type.TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case Type.TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case Type.Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case Type.List:\n            fn = visitor.visitList;\n            break;\n        case Type.Struct:\n            fn = visitor.visitStruct;\n            break;\n        case Type.Union:\n            fn = visitor.visitUnion;\n            break;\n        case Type.DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case Type.SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case Type.Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case Type.Interval:\n            fn = visitor.visitInterval;\n            break;\n        case Type.IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case Type.IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case Type.FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case Type.Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === 'function')\n        return fn;\n    if (!throwIfNotFound)\n        return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int: {\n            const { bitWidth, isSigned } = type;\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            // @ts-ignore\n            return Type.Int;\n        }\n        case Type.Float:\n            switch (type.precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            // @ts-ignore\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            // @ts-ignore\n            return Type.Time;\n        case Type.Timestamp:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            // @ts-ignore\n            return Type.Timestamp;\n        case Type.Date:\n            switch (type.unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            // @ts-ignore\n            return Type.Date;\n        case Type.Interval:\n            switch (type.unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            // @ts-ignore\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch (type.mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            // @ts-ignore\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;\n\n//# sourceMappingURL=visitor.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum.js';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type.js';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public getVisitFnByTypeId(typeId: Type, throwIfNotFound = true) {\n        return getVisitFnByTypeId(this, typeId, throwIfNotFound);\n    }\n    public visitNull(_node: any, ..._args: any[]): any { return null; }\n    public visitBool(_node: any, ..._args: any[]): any { return null; }\n    public visitInt(_node: any, ..._args: any[]): any { return null; }\n    public visitFloat(_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8(_node: any, ..._args: any[]): any { return null; }\n    public visitBinary(_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary(_node: any, ..._args: any[]): any { return null; }\n    public visitDate(_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp(_node: any, ..._args: any[]): any { return null; }\n    public visitTime(_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal(_node: any, ..._args: any[]): any { return null; }\n    public visitList(_node: any, ..._args: any[]): any { return null; }\n    public visitStruct(_node: any, ..._args: any[]): any { return null; }\n    public visitUnion(_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary(_node: any, ..._args: any[]): any { return null; }\n    public visitInterval(_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList(_node: any, ..._args: any[]): any { return null; }\n    public visitMap(_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    if (typeof node === 'number') {\n        return getVisitFnByTypeId(visitor, node, throwIfNotFound);\n    }\n    if (typeof node === 'string' && (node in Type)) {\n        return getVisitFnByTypeId(visitor, Type[node as keyof typeof Type], throwIfNotFound);\n    }\n    if (node && (node instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node as T), throwIfNotFound);\n    }\n    if (node?.type && (node.type instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node.type as T), throwIfNotFound);\n    }\n    return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);\n}\n\n/** @ignore */\nfunction getVisitFnByTypeId(visitor: Visitor, dtype: Type, throwIfNotFound = true) {\n    let fn: any = null;\n    switch (dtype) {\n        case Type.Null: fn = visitor.visitNull; break;\n        case Type.Bool: fn = visitor.visitBool; break;\n        case Type.Int: fn = visitor.visitInt; break;\n        case Type.Int8: fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16: fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32: fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64: fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8: fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16: fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32: fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64: fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float: fn = visitor.visitFloat; break;\n        case Type.Float16: fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32: fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64: fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8: fn = visitor.visitUtf8; break;\n        case Type.Binary: fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary: fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date: fn = visitor.visitDate; break;\n        case Type.DateDay: fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond: fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp: fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond: fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond: fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time: fn = visitor.visitTime; break;\n        case Type.TimeSecond: fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond: fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond: fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond: fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal: fn = visitor.visitDecimal; break;\n        case Type.List: fn = visitor.visitList; break;\n        case Type.Struct: fn = visitor.visitStruct; break;\n        case Type.Union: fn = visitor.visitUnion; break;\n        case Type.DenseUnion: fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion: fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary: fn = visitor.visitDictionary; break;\n        case Type.Interval: fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime: fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth: fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList: fn = visitor.visitFixedSizeList; break;\n        case Type.Map: fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int: {\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            // @ts-ignore\n            return Type.Int;\n        }\n        case Type.Float:\n            switch ((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            // @ts-ignore\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            // @ts-ignore\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            // @ts-ignore\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            // @ts-ignore\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            // @ts-ignore\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            // @ts-ignore\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull(node: any, ...args: any[]): any;\n    visitBool(node: any, ...args: any[]): any;\n    visitInt(node: any, ...args: any[]): any;\n    visitInt8?(node: any, ...args: any[]): any;\n    visitInt16?(node: any, ...args: any[]): any;\n    visitInt32?(node: any, ...args: any[]): any;\n    visitInt64?(node: any, ...args: any[]): any;\n    visitUint8?(node: any, ...args: any[]): any;\n    visitUint16?(node: any, ...args: any[]): any;\n    visitUint32?(node: any, ...args: any[]): any;\n    visitUint64?(node: any, ...args: any[]): any;\n    visitFloat(node: any, ...args: any[]): any;\n    visitFloat16?(node: any, ...args: any[]): any;\n    visitFloat32?(node: any, ...args: any[]): any;\n    visitFloat64?(node: any, ...args: any[]): any;\n    visitUtf8(node: any, ...args: any[]): any;\n    visitBinary(node: any, ...args: any[]): any;\n    visitFixedSizeBinary(node: any, ...args: any[]): any;\n    visitDate(node: any, ...args: any[]): any;\n    visitDateDay?(node: any, ...args: any[]): any;\n    visitDateMillisecond?(node: any, ...args: any[]): any;\n    visitTimestamp(node: any, ...args: any[]): any;\n    visitTimestampSecond?(node: any, ...args: any[]): any;\n    visitTimestampMillisecond?(node: any, ...args: any[]): any;\n    visitTimestampMicrosecond?(node: any, ...args: any[]): any;\n    visitTimestampNanosecond?(node: any, ...args: any[]): any;\n    visitTime(node: any, ...args: any[]): any;\n    visitTimeSecond?(node: any, ...args: any[]): any;\n    visitTimeMillisecond?(node: any, ...args: any[]): any;\n    visitTimeMicrosecond?(node: any, ...args: any[]): any;\n    visitTimeNanosecond?(node: any, ...args: any[]): any;\n    visitDecimal(node: any, ...args: any[]): any;\n    visitList(node: any, ...args: any[]): any;\n    visitStruct(node: any, ...args: any[]): any;\n    visitUnion(node: any, ...args: any[]): any;\n    visitDenseUnion?(node: any, ...args: any[]): any;\n    visitSparseUnion?(node: any, ...args: any[]): any;\n    visitDictionary(node: any, ...args: any[]): any;\n    visitInterval(node: any, ...args: any[]): any;\n    visitIntervalDayTime?(node: any, ...args: any[]): any;\n    visitIntervalYearMonth?(node: any, ...args: any[]): any;\n    visitFixedSizeList(node: any, ...args: any[]): any;\n    visitMap(node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;\nimport { BigInt64Array, BigUint64Array } from './util/compat.mjs';\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum.mjs';\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport class DataType {\n    /** @nocollapse */ static isNull(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Null; }\n    /** @nocollapse */ static isInt(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Int; }\n    /** @nocollapse */ static isFloat(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Float; }\n    /** @nocollapse */ static isBinary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Utf8; }\n    /** @nocollapse */ static isBool(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Decimal; }\n    /** @nocollapse */ static isDate(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Date; }\n    /** @nocollapse */ static isTime(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Interval; }\n    /** @nocollapse */ static isList(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.List; }\n    /** @nocollapse */ static isStruct(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Struct; }\n    /** @nocollapse */ static isUnion(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Map; }\n    /** @nocollapse */ static isDictionary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Dictionary; }\n    /** @nocollapse */ static isDenseUnion(x) { return DataType.isUnion(x) && x.mode === UnionMode.Dense; }\n    /** @nocollapse */ static isSparseUnion(x) { return DataType.isUnion(x) && x.mode === UnionMode.Sparse; }\n    get typeId() { return Type.NONE; }\n}\n_a = Symbol.toStringTag;\nDataType[_a] = ((proto) => {\n    proto.children = null;\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\n/** @ignore */\nexport class Null extends DataType {\n    toString() { return `Null`; }\n    get typeId() { return Type.Null; }\n}\n_b = Symbol.toStringTag;\nNull[_b] = ((proto) => proto[Symbol.toStringTag] = 'Null')(Null.prototype);\n/** @ignore */\nclass Int_ extends DataType {\n    constructor(isSigned, bitWidth) {\n        super();\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() { return Type.Int; }\n    get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return this.isSigned ? Int8Array : Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? BigInt64Array : BigUint64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n}\n_c = Symbol.toStringTag;\nInt_[_c] = ((proto) => {\n    proto.isSigned = null;\n    proto.bitWidth = null;\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\n/** @ignore */\nexport class Int8 extends Int_ {\n    constructor() { super(true, 8); }\n    get ArrayType() { return Int8Array; }\n}\n/** @ignore */\nexport class Int16 extends Int_ {\n    constructor() { super(true, 16); }\n    get ArrayType() { return Int16Array; }\n}\n/** @ignore */\nexport class Int32 extends Int_ {\n    constructor() { super(true, 32); }\n    get ArrayType() { return Int32Array; }\n}\n/** @ignore */\nexport class Int64 extends Int_ {\n    constructor() { super(true, 64); }\n    get ArrayType() { return BigInt64Array; }\n}\n/** @ignore */\nexport class Uint8 extends Int_ {\n    constructor() { super(false, 8); }\n    get ArrayType() { return Uint8Array; }\n}\n/** @ignore */\nexport class Uint16 extends Int_ {\n    constructor() { super(false, 16); }\n    get ArrayType() { return Uint16Array; }\n}\n/** @ignore */\nexport class Uint32 extends Int_ {\n    constructor() { super(false, 32); }\n    get ArrayType() { return Uint32Array; }\n}\n/** @ignore */\nexport class Uint64 extends Int_ {\n    constructor() { super(false, 64); }\n    get ArrayType() { return BigUint64Array; }\n}\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: BigInt64Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: BigUint64Array });\n/** @ignore */\nexport class Float extends DataType {\n    constructor(precision) {\n        super();\n        this.precision = precision;\n    }\n    get typeId() { return Type.Float; }\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\n_d = Symbol.toStringTag;\nFloat[_d] = ((proto) => {\n    proto.precision = null;\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\n/** @ignore */\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\n/** @ignore */\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\n/** @ignore */\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n/** @ignore */\nexport class Binary extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Binary; }\n    toString() { return `Binary`; }\n}\n_e = Symbol.toStringTag;\nBinary[_e] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\n/** @ignore */\nexport class Utf8 extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Utf8; }\n    toString() { return `Utf8`; }\n}\n_f = Symbol.toStringTag;\nUtf8[_f] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\n/** @ignore */\nexport class Bool extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Bool; }\n    toString() { return `Bool`; }\n}\n_g = Symbol.toStringTag;\nBool[_g] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\n/** @ignore */\nexport class Decimal extends DataType {\n    constructor(scale, precision, bitWidth = 128) {\n        super();\n        this.scale = scale;\n        this.precision = precision;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() { return Type.Decimal; }\n    toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n}\n_h = Symbol.toStringTag;\nDecimal[_h] = ((proto) => {\n    proto.scale = null;\n    proto.precision = null;\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\n/** @ignore */\nexport class Date_ extends DataType {\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() { return Type.Date; }\n    toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n}\n_j = Symbol.toStringTag;\nDate_[_j] = ((proto) => {\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\n/** @ignore */\nexport class DateDay extends Date_ {\n    constructor() { super(DateUnit.DAY); }\n}\n/** @ignore */\nexport class DateMillisecond extends Date_ {\n    constructor() { super(DateUnit.MILLISECOND); }\n}\n/** @ignore */\nclass Time_ extends DataType {\n    constructor(unit, bitWidth) {\n        super();\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() { return Type.Time; }\n    toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    get ArrayType() {\n        switch (this.bitWidth) {\n            case 32: return Int32Array;\n            case 64: return BigInt64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n}\n_k = Symbol.toStringTag;\nTime_[_k] = ((proto) => {\n    proto.unit = null;\n    proto.bitWidth = null;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\n/** @ignore */\nexport class TimeSecond extends Time_ {\n    constructor() { super(TimeUnit.SECOND, 32); }\n}\n/** @ignore */\nexport class TimeMillisecond extends Time_ {\n    constructor() { super(TimeUnit.MILLISECOND, 32); }\n}\n/** @ignore */\nexport class TimeMicrosecond extends Time_ {\n    constructor() { super(TimeUnit.MICROSECOND, 64); }\n}\n/** @ignore */\nexport class TimeNanosecond extends Time_ {\n    constructor() { super(TimeUnit.NANOSECOND, 64); }\n}\n/** @ignore */\nclass Timestamp_ extends DataType {\n    constructor(unit, timezone) {\n        super();\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    get typeId() { return Type.Timestamp; }\n    toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n}\n_l = Symbol.toStringTag;\nTimestamp_[_l] = ((proto) => {\n    proto.unit = null;\n    proto.timezone = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\n/** @ignore */\nexport class TimestampSecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.SECOND, timezone); }\n}\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MILLISECOND, timezone); }\n}\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MICROSECOND, timezone); }\n}\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.NANOSECOND, timezone); }\n}\n/** @ignore */\nclass Interval_ extends DataType {\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() { return Type.Interval; }\n    toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n}\n_m = Symbol.toStringTag;\nInterval_[_m] = ((proto) => {\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\n/** @ignore */\nexport class IntervalDayTime extends Interval_ {\n    constructor() { super(IntervalUnit.DAY_TIME); }\n}\n/** @ignore */\nexport class IntervalYearMonth extends Interval_ {\n    constructor() { super(IntervalUnit.YEAR_MONTH); }\n}\n/** @ignore */\nexport class List extends DataType {\n    constructor(child) {\n        super();\n        this.children = [child];\n    }\n    get typeId() { return Type.List; }\n    toString() { return `List<${this.valueType}>`; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n}\n_o = Symbol.toStringTag;\nList[_o] = ((proto) => {\n    proto.children = null;\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\n/** @ignore */\nexport class Struct extends DataType {\n    constructor(children) {\n        super();\n        this.children = children;\n    }\n    get typeId() { return Type.Struct; }\n    toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n}\n_p = Symbol.toStringTag;\nStruct[_p] = ((proto) => {\n    proto.children = null;\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\n/** @ignore */\nclass Union_ extends DataType {\n    constructor(mode, typeIds, children) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null));\n    }\n    get typeId() { return Type.Union; }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\n_q = Symbol.toStringTag;\nUnion_[_q] = ((proto) => {\n    proto.mode = null;\n    proto.typeIds = null;\n    proto.children = null;\n    proto.typeIdToChildIndex = null;\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\n/** @ignore */\nexport class DenseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n/** @ignore */\nexport class SparseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n/** @ignore */\nexport class FixedSizeBinary extends DataType {\n    constructor(byteWidth) {\n        super();\n        this.byteWidth = byteWidth;\n    }\n    get typeId() { return Type.FixedSizeBinary; }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\n_r = Symbol.toStringTag;\nFixedSizeBinary[_r] = ((proto) => {\n    proto.byteWidth = null;\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\n/** @ignore */\nexport class FixedSizeList extends DataType {\n    constructor(listSize, child) {\n        super();\n        this.listSize = listSize;\n        this.children = [child];\n    }\n    get typeId() { return Type.FixedSizeList; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n}\n_s = Symbol.toStringTag;\nFixedSizeList[_s] = ((proto) => {\n    proto.children = null;\n    proto.listSize = null;\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\n/** @ignore */\nexport class Map_ extends DataType {\n    constructor(child, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    get typeId() { return Type.Map; }\n    get keyType() { return this.children[0].type.children[0].type; }\n    get valueType() { return this.children[0].type.children[1].type; }\n    get childType() { return this.children[0].type; }\n    toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n}\n_t = Symbol.toStringTag;\nMap_[_t] = ((proto) => {\n    proto.children = null;\n    proto.keysSorted = null;\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n/** @ignore */\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : (typeof id === 'number' ? id : id.low);\n    }\n    get typeId() { return Type.Dictionary; }\n    get children() { return this.dictionary.children; }\n    get valueType() { return this.dictionary; }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\n_u = Symbol.toStringTag;\nDictionary[_u] = ((proto) => {\n    proto.id = null;\n    proto.indices = null;\n    proto.isOrdered = null;\n    proto.dictionary = null;\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n/** @ignore */\nexport function strideForType(type) {\n    const t = type;\n    switch (type.typeId) {\n        case Type.Decimal: return type.bitWidth / 32;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + t.unit;\n        case Type.Interval: return 1 + t.unit;\n        // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return t.listSize;\n        case Type.FixedSizeBinary: return t.byteWidth;\n        default: return 1;\n    }\n}\n\n//# sourceMappingURL=type.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema.js';\nimport { Vector } from './vector.js';\nimport { MapRow } from './row/map.js';\nimport { StructRow, StructRowProxy } from './row/struct.js';\nimport { Long } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces.js';\nimport { BigInt64Array, BigUint64Array } from './util/compat.js';\n\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum.js';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n\nexport interface DataType<TType extends Type = Type, TChildren extends TypeMap = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly TChildren: TChildren;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends TypeMap = any> {\n\n    declare public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static isNull(x: any): x is Null { return x?.typeId === Type.Null; }\n    /** @nocollapse */ static isInt(x: any): x is Int_ { return x?.typeId === Type.Int; }\n    /** @nocollapse */ static isFloat(x: any): x is Float { return x?.typeId === Type.Float; }\n    /** @nocollapse */ static isBinary(x: any): x is Binary { return x?.typeId === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x: any): x is Utf8 { return x?.typeId === Type.Utf8; }\n    /** @nocollapse */ static isBool(x: any): x is Bool { return x?.typeId === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x: any): x is Decimal { return x?.typeId === Type.Decimal; }\n    /** @nocollapse */ static isDate(x: any): x is Date_ { return x?.typeId === Type.Date; }\n    /** @nocollapse */ static isTime(x: any): x is Time_ { return x?.typeId === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x: any): x is Timestamp_ { return x?.typeId === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x: any): x is Interval_ { return x?.typeId === Type.Interval; }\n    /** @nocollapse */ static isList(x: any): x is List { return x?.typeId === Type.List; }\n    /** @nocollapse */ static isStruct(x: any): x is Struct { return x?.typeId === Type.Struct; }\n    /** @nocollapse */ static isUnion(x: any): x is Union_ { return x?.typeId === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x: any): x is FixedSizeBinary { return x?.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x: any): x is FixedSizeList { return x?.typeId === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x: any): x is Map_ { return x?.typeId === Type.Map; }\n    /** @nocollapse */ static isDictionary(x: any): x is Dictionary { return x?.typeId === Type.Dictionary; }\n\n    /** @nocollapse */ static isDenseUnion(x: any): x is DenseUnion { return DataType.isUnion(x) && x.mode === UnionMode.Dense; }\n    /** @nocollapse */ static isSparseUnion(x: any): x is SparseUnion { return DataType.isUnion(x) && x.mode === UnionMode.Sparse; }\n\n    public get typeId(): TType { return <any>Type.NONE; }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any>proto).children = null;\n        (<any>proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => proto[Symbol.toStringTag] = 'Null')(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray; TValue: number | bigint };\n    [Type.Int8]: { bitWidth: 8; isSigned: true; TArray: Int8Array; TValue: number };\n    [Type.Int16]: { bitWidth: 16; isSigned: true; TArray: Int16Array; TValue: number };\n    [Type.Int32]: { bitWidth: 32; isSigned: true; TArray: Int32Array; TValue: number };\n    [Type.Int64]: { bitWidth: 64; isSigned: true; TArray: BigInt64Array; TValue: bigint };\n    [Type.Uint8]: { bitWidth: 8; isSigned: false; TArray: Uint8Array; TValue: number };\n    [Type.Uint16]: { bitWidth: 16; isSigned: false; TArray: Uint16Array; TValue: number };\n    [Type.Uint32]: { bitWidth: 32; isSigned: false; TArray: Uint32Array; TValue: number };\n    [Type.Uint64]: { bitWidth: 64; isSigned: false; TArray: BigUint64Array; TValue: bigint };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue'] }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n        public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return this.isSigned ? Int8Array : Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? BigInt64Array : BigUint64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any>proto).isSigned = null;\n        (<any>proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> {\n    constructor() { super(true, 8); }\n    public get ArrayType() { return Int8Array; }\n}\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> {\n    constructor() { super(true, 16); }\n    public get ArrayType() { return Int16Array; }\n}\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> {\n    constructor() { super(true, 32); }\n    public get ArrayType() { return Int32Array; }\n}\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> {\n    constructor() { super(true, 64); }\n    public get ArrayType() { return BigInt64Array; }\n}\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> {\n    constructor() { super(false, 8); }\n    public get ArrayType() { return Uint8Array; }\n}\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> {\n    constructor() { super(false, 16); }\n    public get ArrayType() { return Uint16Array; }\n}\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> {\n    constructor() { super(false, 32); }\n    public get ArrayType() { return Uint32Array; }\n}\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> {\n    constructor() { super(false, 64); }\n    public get ArrayType() { return BigUint64Array; }\n}\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: BigInt64Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: BigUint64Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float]: { precision: Precision; TArray: FloatArray; TValue: number };\n    [Type.Float16]: { precision: Precision.HALF; TArray: Uint16Array; TValue: number };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array; TValue: number };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array; TValue: number };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any>proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array> }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n        public readonly precision: number,\n        public readonly bitWidth: number = 128) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any>proto).scale = null;\n        (<any>proto).precision = null;\n        (<any>proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any>proto).unit = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time]: { unit: TimeUnit; TValue: number | bigint; TArray: Int32Array | BigInt64Array };\n    [Type.TimeSecond]: { unit: TimeUnit.SECOND; TValue: number; TArray: Int32Array };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number; TArray: Int32Array };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: bigint; TArray: BigInt64Array };\n    [Type.TimeNanosecond]: { unit: TimeUnit.NANOSECOND; TValue: bigint; TArray: BigInt64Array };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> {\n    TArray: TimesType[T]['TArray'];\n    TValue: TimesType[T]['TValue'];\n}\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n        public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    public get ArrayType() {\n        switch (this.bitWidth) {\n            case 32: return Int32Array;\n            case 64: return BigInt64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any>proto).unit = null;\n        (<any>proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    TArray: Int32Array;\n    TValue: number;\n    ArrayType: TypedArrayConstructor<Int32Array>;\n}\n\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n        public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any>proto).unit = null;\n        (<any>proto).timezone = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    TArray: Int32Array;\n    TValue: Int32Array;\n    ArrayType: TypedArrayConstructor<Int32Array>;\n}\n\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any>proto).unit = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    TArray: Array<T>;\n    TValue: Vector<T>;\n}\n\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public declare readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any>proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends TypeMap = any> extends DataType<Type.Struct, T> {\n    TArray: Array<StructRowProxy<T>>;\n    TValue: StructRowProxy<T>;\n    dataTypes: T;\n}\n\n/** @ignore */\nexport class Struct<T extends TypeMap = any> extends DataType<Type.Struct, T> {\n    public declare _row: StructRow<T>;\n    public declare readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any>proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array> }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public declare readonly mode: UnionMode;\n    public declare readonly typeIds: Int32Array;\n    public declare readonly children: Field<any>[];\n    public declare readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n        typeIds: number[] | Int32Array,\n        children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)\n            }>`;\n    }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any>proto).mode = null;\n        (<any>proto).typeIds = null;\n        (<any>proto).children = null;\n        (<any>proto).typeIdToChildIndex = null;\n        (<any>proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    TArray: Uint8Array;\n    TValue: Uint8Array;\n    ArrayType: TypedArrayConstructor<Uint8Array>;\n}\n\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any>proto).byteWidth = null;\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    TArray: Array<T['TArray']>;\n    TValue: Vector<T>;\n}\n\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public declare readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any>proto).children = null;\n        (<any>proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map, { [0]: Struct<{ key: TKey; value: TValue }> }> {\n    TArray: Array<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey; value: TValue }>;\n    TValue: MapRow<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map, { [0]: Struct<{ key: TKey; value: TValue }> }> {\n    constructor(child: Field<Struct<{ key: TKey; value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public declare readonly keysSorted: boolean;\n    public declare readonly children: Field<Struct<{ key: TKey; value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public get childType() { return this.children[0].type as Struct<{ key: TKey; value: TValue }>; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any>proto).children = null;\n        (<any>proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    TArray: TKey['TArray'];\n    TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public declare readonly id: number;\n    public declare readonly indices: TKey;\n    public declare readonly dictionary: T;\n    public declare readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : (typeof id === 'number' ? id : id.low);\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any>proto).id = null;\n        (<any>proto).indices = null;\n        (<any>proto).isOrdered = null;\n        (<any>proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    const t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return (type as Decimal).bitWidth / 32;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n\n/** @ignore */\nexport type TypeMap = Record<string | number | symbol, DataType>;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty.mjs';\nimport { instance as getVisitor } from '../visitor/get.mjs';\nimport { instance as setVisitor } from '../visitor/set.mjs';\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\nexport class StructRow {\n    constructor(parent, rowIndex) {\n        this[kParent] = parent;\n        this[kRowIndex] = rowIndex;\n        return new Proxy(this, new StructRowProxyHandler());\n    }\n    toArray() { return Object.values(this.toJSON()); }\n    toJSON() {\n        const i = this[kRowIndex];\n        const parent = this[kParent];\n        const keys = parent.type.children;\n        const json = {};\n        for (let j = -1, n = keys.length; ++j < n;) {\n            json[keys[j].name] = getVisitor.visit(parent.children[j], i);\n        }\n        return json;\n    }\n    toString() {\n        return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(', ')}}`;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n    [Symbol.iterator]() {\n        return new StructRowIterator(this[kParent], this[kRowIndex]);\n    }\n}\nclass StructRowIterator {\n    constructor(data, rowIndex) {\n        this.childIndex = 0;\n        this.children = data.children;\n        this.rowIndex = rowIndex;\n        this.childFields = data.type.children;\n        this.numChildren = this.childFields.length;\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        const i = this.childIndex;\n        if (i < this.numChildren) {\n            this.childIndex = i + 1;\n            return {\n                done: false,\n                value: [\n                    this.childFields[i].name,\n                    getVisitor.visit(this.children[i], this.rowIndex)\n                ]\n            };\n        }\n        return { done: true, value: null };\n    }\n}\nObject.defineProperties(StructRow.prototype, {\n    [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },\n    [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n    [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n});\nclass StructRowProxyHandler {\n    isExtensible() { return false; }\n    deleteProperty() { return false; }\n    preventExtensions() { return true; }\n    ownKeys(row) {\n        return row[kParent].type.children.map((f) => f.name);\n    }\n    has(row, key) {\n        return row[kParent].type.children.findIndex((f) => f.name === key) !== -1;\n    }\n    getOwnPropertyDescriptor(row, key) {\n        if (row[kParent].type.children.findIndex((f) => f.name === key) !== -1) {\n            return { writable: true, enumerable: true, configurable: true };\n        }\n        return;\n    }\n    get(row, key) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) {\n            return row[key];\n        }\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            const val = getVisitor.visit(row[kParent].children[idx], row[kRowIndex]);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row, key, val) {\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            setVisitor.visit(row[kParent].children[idx], row[kRowIndex], val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        }\n        else if (Reflect.has(row, key) || typeof key === 'symbol') {\n            return Reflect.set(row, key, val);\n        }\n        return false;\n    }\n}\n\n//# sourceMappingURL=struct.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Struct, TypeMap } from '../type.js';\nimport { valueToString } from '../util/pretty.js';\nimport { instance as getVisitor } from '../visitor/get.js';\nimport { instance as setVisitor } from '../visitor/set.js';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n\nexport type StructRowProxy<T extends TypeMap = any> = StructRow<T> & {\n    [P in keyof T]: T[P]['TValue'];\n} & {\n    [key: symbol]: any;\n};\n\nexport class StructRow<T extends TypeMap = any> {\n\n    declare private [kRowIndex]: number;\n    declare private [kParent]: Data<Struct<T>>;\n\n    constructor(parent: Data<Struct<T>>, rowIndex: number) {\n        this[kParent] = parent;\n        this[kRowIndex] = rowIndex;\n        return new Proxy(this, new StructRowProxyHandler());\n    }\n\n    public toArray() { return Object.values(this.toJSON()); }\n\n    public toJSON() {\n        const i = this[kRowIndex];\n        const parent = this[kParent];\n        const keys = parent.type.children;\n        const json = {} as { [P in string & keyof T]: T[P]['TValue'] };\n        for (let j = -1, n = keys.length; ++j < n;) {\n            json[keys[j].name as string & keyof T] = getVisitor.visit(parent.children[j], i);\n        }\n        return json;\n    }\n\n    public toString() {\n        return `{${[...this].map(([key, val]) =>\n            `${valueToString(key)}: ${valueToString(val)}`\n        ).join(', ')\n            }}`;\n    }\n\n    public [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n\n    [Symbol.iterator](): IterableIterator<[\n        keyof T, { [P in keyof T]: T[P]['TValue'] | null }[keyof T]\n    ]> {\n        return new StructRowIterator(this[kParent], this[kRowIndex]);\n    }\n}\n\nclass StructRowIterator<T extends TypeMap = any>\n    implements IterableIterator<[\n        keyof T, { [P in keyof T]: T[P]['TValue'] | null }[keyof T]\n    ]> {\n\n    declare private rowIndex: number;\n    declare private childIndex: number;\n    declare private numChildren: number;\n    declare private children: Data<any>[];\n    declare private childFields: Field<T[keyof T]>[];\n\n    constructor(data: Data<Struct<T>>, rowIndex: number) {\n        this.childIndex = 0;\n        this.children = data.children;\n        this.rowIndex = rowIndex;\n        this.childFields = data.type.children;\n        this.numChildren = this.childFields.length;\n    }\n\n    [Symbol.iterator]() { return this; }\n\n    next() {\n        const i = this.childIndex;\n        if (i < this.numChildren) {\n            this.childIndex = i + 1;\n            return {\n                done: false,\n                value: [\n                    this.childFields[i].name,\n                    getVisitor.visit(this.children[i], this.rowIndex)\n                ]\n            } as IteratorYieldResult<[any, any]>;\n        }\n        return { done: true, value: null } as IteratorReturnResult<null>;\n    }\n}\n\nObject.defineProperties(StructRow.prototype, {\n    [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },\n    [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n    [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n});\n\nclass StructRowProxyHandler<T extends TypeMap = any> implements ProxyHandler<StructRow<T>> {\n    isExtensible() { return false; }\n    deleteProperty() { return false; }\n    preventExtensions() { return true; }\n    ownKeys(row: StructRow<T>) {\n        return row[kParent].type.children.map((f) => f.name);\n    }\n    has(row: StructRow<T>, key: string) {\n        return row[kParent].type.children.findIndex((f) => f.name === key) !== -1;\n    }\n    getOwnPropertyDescriptor(row: StructRow<T>, key: string) {\n        if (row[kParent].type.children.findIndex((f) => f.name === key) !== -1) {\n            return { writable: true, enumerable: true, configurable: true };\n        }\n        return;\n    }\n    get(row: StructRow<T>, key: string) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) {\n            return (row as any)[key];\n        }\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            const val = getVisitor.visit(row[kParent].children[idx], row[kRowIndex]);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row: StructRow<T>, key: string, val: any) {\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            setVisitor.visit(row[kParent].children[idx], row[kRowIndex], val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        } else if (Reflect.has(row, key) || typeof key === 'symbol') {\n            return Reflect.set(row, key, val);\n        }\n        return false;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { float64ToUint16 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class SetVisitor extends Visitor {\n}\n/** @ignore */\nfunction wrapSet(fn) {\n    return (data, _1, _2) => {\n        if (data.setValid(_1, _2 != null)) {\n            return fn(data, _1, _2);\n        }\n    };\n}\n/** @ignore */\nexport const setEpochMsToDays = (data, index, epochMs) => { data[index] = Math.trunc(epochMs / 86400000); };\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n    data[index] = Math.trunc(epochMs % 4294967296);\n    data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n    data[index] = Math.trunc((epochMs * 1000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000) / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n    data[index] = Math.trunc((epochMs * 1000000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000000) / 4294967296);\n};\n/** @ignore */\nexport const setVariableWidthBytes = (values, valueOffsets, index, value) => {\n    if (index + 1 < valueOffsets.length) {\n        const { [index]: x, [index + 1]: y } = valueOffsets;\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n/** @ignore */\nconst setBool = ({ offset, values }, index, val) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n};\n/** @ignore */\nexport const setInt = ({ values }, index, value) => { values[index] = value; };\n/** @ignore */\nexport const setFloat = ({ values }, index, value) => { values[index] = value; };\n/** @ignore */\nexport const setFloat16 = ({ values }, index, value) => { values[index] = float64ToUint16(value); };\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = (data, index, value) => {\n    switch (data.type.precision) {\n        case Precision.HALF:\n            return setFloat16(data, index, value);\n        case Precision.SINGLE:\n        case Precision.DOUBLE:\n            return setFloat(data, index, value);\n    }\n};\n/** @ignore */\nexport const setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nexport const setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nexport const setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = ({ values, valueOffsets }, index, value) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\nexport const setDate = (data, index, value) => {\n    data.type.unit === DateUnit.DAY\n        ? setDateDay(data, index, value)\n        : setDateMillisecond(data, index, value);\n};\n/** @ignore */\nexport const setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nexport const setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = (data, index, value) => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(data, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(data, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(data, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(data, index, value);\n    }\n};\n/** @ignore */\nexport const setTimeSecond = ({ values }, index, value) => { values[index] = value; };\n/** @ignore */\nexport const setTimeMillisecond = ({ values }, index, value) => { values[index] = value; };\n/** @ignore */\nexport const setTimeMicrosecond = ({ values }, index, value) => { values[index] = value; };\n/** @ignore */\nexport const setTimeNanosecond = ({ values }, index, value) => { values[index] = value; };\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = (data, index, value) => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(data, index, value);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(data, index, value);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(data, index, value);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(data, index, value);\n    }\n};\n/** @ignore */\nexport const setDecimal = ({ values, stride }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setList = (data, index, value) => {\n    const values = data.children[0];\n    const valueOffsets = data.valueOffsets;\n    const set = instance.getVisitFn(values);\n    if (Array.isArray(value)) {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value[++idx]);\n        }\n    }\n    else {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value.get(++idx));\n        }\n    }\n};\n/** @ignore */\nconst setMap = (data, index, value) => {\n    const values = data.children[0];\n    const { valueOffsets } = data;\n    const set = instance.getVisitFn(values);\n    let { [index]: idx, [index + 1]: end } = valueOffsets;\n    const entries = value instanceof Map ? value.entries() : Object.entries(value);\n    for (const val of entries) {\n        set(values, idx, val);\n        if (++idx >= end)\n            break;\n    }\n};\n/** @ignore */ const _setStructArrayValue = (o, v) => (set, c, _, i) => c && set(c, o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o, v) => (set, c, _, i) => c && set(c, o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o, v) => (set, c, f, _) => c && set(c, o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o, v) => (set, c, f, _) => c && set(c, o, v[f.name]);\n/** @ignore */\nconst setStruct = (data, index, value) => {\n    const childSetters = data.type.children.map((f) => instance.getVisitFn(f.type));\n    const set = value instanceof Map ? _setStructMapValue(index, value) :\n        value instanceof Vector ? _setStructVectorValue(index, value) :\n            Array.isArray(value) ? _setStructArrayValue(index, value) :\n                _setStructObjectValue(index, value);\n    // eslint-disable-next-line unicorn/no-array-for-each\n    data.type.children.forEach((f, i) => set(childSetters[i], data.children[i], f, i));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (data, index, value) => {\n    data.type.mode === UnionMode.Dense ?\n        setDenseUnion(data, index, value) :\n        setSparseUnion(data, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (data, index, value) => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, data.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (data, index, value) => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, index, value);\n};\n/** @ignore */\nconst setDictionary = (data, index, value) => {\n    var _a;\n    (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.set(data.values[index], value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = (data, index, value) => {\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(data, index, value)\n        : setIntervalYearMonth(data, index, value);\n};\n/** @ignore */\nexport const setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nexport const setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };\n/** @ignore */\nconst setFixedSizeList = (data, index, value) => {\n    const { stride } = data;\n    const child = data.children[0];\n    const set = instance.getVisitFn(child);\n    if (Array.isArray(value)) {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value[idx]);\n        }\n    }\n    else {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value.get(idx));\n        }\n    }\n};\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n/** @ignore */\nexport const instance = new SetVisitor();\n\n//# sourceMappingURL=set.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { float64ToUint16 } from '../util/math.js';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number, value: T['TValue']): void;\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, index: number, value: Data<T>['TValue']) => void;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number, value: TypeToDataType<T>['TValue']) => void;\n    visitNull<T extends Null>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBool<T extends Bool>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt<T extends Int>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt8<T extends Int8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt16<T extends Int16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt32<T extends Int32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt64<T extends Int64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint8<T extends Uint8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint16<T extends Uint16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint32<T extends Uint32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint64<T extends Uint64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat<T extends Float>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat16<T extends Float16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat32<T extends Float32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat64<T extends Float64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBinary<T extends Binary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDate<T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTime<T extends Time>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitList<T extends List>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitStruct<T extends Struct>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUnion<T extends Union>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInterval<T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitMap<T extends Map_>(data: Data<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor { }\n\n/** @ignore */\nfunction wrapSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n    return (data: Data<T>, _1: any, _2: any) => {\n        if (data.setValid(_1, _2 != null)) {\n            return fn(data, _1, _2);\n        }\n    };\n}\n\n/** @ignore */\nexport const setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = Math.trunc(epochMs / 86400000); };\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc(epochMs % 4294967296);\n    data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000) / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000000) / 4294967296);\n};\n\n/** @ignore */\nexport const setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    if (index + 1 < valueOffsets.length) {\n        const { [index]: x, [index + 1]: y } = valueOffsets;\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Data<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n/** @ignore */\nexport const setInt = <T extends Int>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat = <T extends Float32 | Float64>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat16 = <T extends Float16>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = float64ToUint16(value); };\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = <T extends Float>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.precision) {\n        case Precision.HALF:\n            return setFloat16(data as Data<Float16>, index, value);\n        case Precision.SINGLE:\n        case Precision.DOUBLE:\n            return setFloat(data as Data<Float32 | Float64>, index, value);\n    }\n};\n/** @ignore */\nexport const setDateDay = <T extends DateDay>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nexport const setDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nexport const setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\nexport const setDate = <T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.type.unit === DateUnit.DAY\n        ? setDateDay(data as Data<DateDay>, index, value)\n        : setDateMillisecond(data as Data<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nexport const setTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nexport const setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = <T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(data as Data<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(data as Data<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(data as Data<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(data as Data<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nexport const setTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = <T extends Time>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(data as Data<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(data as Data<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(data as Data<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(data as Data<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nexport const setDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setList = <T extends List>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const values = data.children[0];\n    const valueOffsets = data.valueOffsets;\n    const set = instance.getVisitFn(values);\n    if (Array.isArray(value)) {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value[++idx]);\n        }\n    } else {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value.get(++idx));\n        }\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(data: Data<T>, index: number, value: T['TValue']) => {\n    const values = data.children[0];\n    const { valueOffsets } = data;\n    const set = instance.getVisitFn(values);\n    let { [index]: idx, [index + 1]: end } = valueOffsets;\n    const entries = value instanceof Map ? value.entries() : Object.entries(value);\n    for (const val of entries) {\n        set(values, idx, val);\n        if (++idx >= end) break;\n    }\n};\n\n/** @ignore */ type SetFunc<T extends DataType> = (data: Data<T>, i: number, v: T['TValue']) => void;\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v[i]);\n\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v.get(i));\n\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v.get(f.name));\n\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v[f.name]);\n\n/** @ignore */\nconst setStruct = <T extends Struct>(data: Data<T>, index: number, value: T['TValue']) => {\n\n    const childSetters = data.type.children.map((f) => instance.getVisitFn(f.type));\n    const set = value instanceof Map ? _setStructMapValue(index, value) :\n        value instanceof Vector ? _setStructVectorValue(index, value) :\n            Array.isArray(value) ? _setStructArrayValue(index, value) :\n                _setStructObjectValue(index, value);\n\n    // eslint-disable-next-line unicorn/no-array-for-each\n    data.type.children.forEach((f: Field, i: number) => set(childSetters[i], data.children[i], f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: V, index: number, value: V['TValue']) => {\n    data.type.mode === UnionMode.Dense ?\n        setDenseUnion(data as Data<DenseUnion>, index, value) :\n        setSparseUnion(data as Data<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, data.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.dictionary?.set(data.values[index], value);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = <T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void => {\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(data as Data<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(data as Data<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nexport const setIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nexport const setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const { stride } = data;\n    const child = data.children[0];\n    const set = instance.getVisitFn(child);\n    if (Array.isArray(value)) {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value[idx]);\n        }\n    } else {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value.get(idx));\n        }\n    }\n};\n\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h) {\n    const expo = (h & 0x7C00) >> 10;\n    const sigf = (h & 0x03FF) / 1024;\n    const sign = Math.pow((-1), ((h & 0x8000) >> 15));\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? Number.NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (Math.pow(2, (expo - 15))) * (1 + sigf);\n}\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d) {\n    if (d !== d) {\n        return 0x7E00;\n    } // NaN\n    f64[0] = d;\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n    const sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7FF00000), sigf = 0x0000;\n    if (expo >= 0x40F00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        }\n        else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000FFFFF) >> 10;\n        }\n    }\n    else if (expo <= 0x3F000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000FFFFF);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    }\n    else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3F000000) >> 10;\n        sigf = ((u32[1] & 0x000FFFFF) + 0x200) >> 10;\n    }\n    return sign | expo | sigf & 0xFFFF;\n}\n\n//# sourceMappingURL=math.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    const expo = (h & 0x7C00) >> 10;\n    const sigf = (h & 0x03FF) / 1024;\n    const sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? Number.NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    const sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7FF00000), sigf = 0x0000;\n\n    if (expo >= 0x40F00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000FFFFF) >> 10;\n        }\n    } else if (expo <= 0x3F000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000FFFFF);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3F000000) >> 10;\n        sigf = ((u32[1] & 0x000FFFFF) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport class ChunkedIterator {\n    constructor(numChunks = 0, getChunkIterator) {\n        this.numChunks = numChunks;\n        this.getChunkIterator = getChunkIterator;\n        this.chunkIndex = 0;\n        this.chunkIterator = this.getChunkIterator(0);\n    }\n    next() {\n        while (this.chunkIndex < this.numChunks) {\n            const next = this.chunkIterator.next();\n            if (!next.done) {\n                return next;\n            }\n            if (++this.chunkIndex < this.numChunks) {\n                this.chunkIterator = this.getChunkIterator(this.chunkIndex);\n            }\n        }\n        return { done: true, value: null };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n/** @ignore */\nexport function computeChunkNullCounts(chunks) {\n    return chunks.reduce((nullCount, chunk) => nullCount + chunk.nullCount, 0);\n}\n/** @ignore */\nexport function computeChunkOffsets(chunks) {\n    return chunks.reduce((offsets, chunk, index) => {\n        offsets[index + 1] = offsets[index] + chunk.length;\n        return offsets;\n    }, new Uint32Array(chunks.length + 1));\n}\n/** @ignore */\nexport function sliceChunks(chunks, offsets, begin, end) {\n    const slices = [];\n    for (let i = -1, n = chunks.length; ++i < n;) {\n        const chunk = chunks[i];\n        const offset = offsets[i];\n        const { length } = chunk;\n        // Stop if the child is to the right of the slice boundary\n        if (offset >= end) {\n            break;\n        }\n        // Exclude children to the left of of the slice boundary\n        if (begin >= offset + length) {\n            continue;\n        }\n        // Include entire child if between both left and right boundaries\n        if (offset >= begin && (offset + length) <= end) {\n            slices.push(chunk);\n            continue;\n        }\n        // Include the child slice that overlaps one of the slice boundaries\n        const from = Math.max(0, begin - offset);\n        const to = Math.min(end - offset, length);\n        slices.push(chunk.slice(from, to - from));\n    }\n    if (slices.length === 0) {\n        slices.push(chunks[0].slice(0, 0));\n    }\n    return slices;\n}\n/** @ignore */\nexport function binarySearch(chunks, offsets, idx, fn) {\n    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n    do {\n        if (lhs >= rhs - 1) {\n            return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n        }\n        mid = lhs + (Math.trunc((rhs - lhs) * .5));\n        idx < offsets[mid] ? (rhs = mid) : (lhs = mid);\n    } while (lhs < rhs);\n}\n/** @ignore */\nexport function isChunkedValid(data, index) {\n    return data.getValid(index);\n}\n/** @ignore */\nexport function wrapChunkedCall1(fn) {\n    function chunkedFn(chunks, i, j) { return fn(chunks[i], j); }\n    return function (index) {\n        const data = this.data;\n        return binarySearch(data, this._offsets, index, chunkedFn);\n    };\n}\n/** @ignore */\nexport function wrapChunkedCall2(fn) {\n    let _2;\n    function chunkedFn(chunks, i, j) { return fn(chunks[i], j, _2); }\n    return function (index, value) {\n        const data = this.data;\n        _2 = value;\n        const result = binarySearch(data, this._offsets, index, chunkedFn);\n        _2 = undefined;\n        return result;\n    };\n}\n/** @ignore */\nexport function wrapChunkedIndexOf(indexOf) {\n    let _1;\n    function chunkedIndexOf(data, chunkIndex, fromIndex) {\n        let begin = fromIndex, index = 0, total = 0;\n        for (let i = chunkIndex - 1, n = data.length; ++i < n;) {\n            const chunk = data[i];\n            if (~(index = indexOf(chunk, _1, begin))) {\n                return total + index;\n            }\n            begin = 0;\n            total += chunk.length;\n        }\n        return -1;\n    }\n    return function (element, offset) {\n        _1 = element;\n        const data = this.data;\n        const result = typeof offset !== 'number'\n            ? chunkedIndexOf(data, 0, 0)\n            : binarySearch(data, this._offsets, offset, chunkedIndexOf);\n        _1 = undefined;\n        return result;\n    };\n}\n\n//# sourceMappingURL=chunk.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { DataType } from '../type.js';\n\n/** @ignore */\nexport class ChunkedIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n    private chunkIndex = 0;\n    private chunkIterator: IterableIterator<T['TValue'] | null>;\n\n    constructor(\n        private numChunks: number = 0,\n        private getChunkIterator: (chunkIndex: number) => IterableIterator<T['TValue'] | null>\n    ) {\n        this.chunkIterator = this.getChunkIterator(0);\n    }\n\n    next(): IteratorResult<T['TValue'] | null> {\n        while (this.chunkIndex < this.numChunks) {\n            const next = this.chunkIterator.next();\n\n            if (!next.done) {\n                return next;\n            }\n\n            if (++this.chunkIndex < this.numChunks) {\n                this.chunkIterator = this.getChunkIterator(this.chunkIndex);\n            }\n        }\n\n        return { done: true, value: null };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** @ignore */\nexport function computeChunkNullCounts<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n    return chunks.reduce((nullCount, chunk) => nullCount + chunk.nullCount, 0);\n}\n\n/** @ignore */\nexport function computeChunkOffsets<T extends DataType>(chunks: ReadonlyArray<Data<T>>) {\n    return chunks.reduce((offsets, chunk, index) => {\n        offsets[index + 1] = offsets[index] + chunk.length;\n        return offsets;\n    }, new Uint32Array(chunks.length + 1));\n}\n\n/** @ignore */\nexport function sliceChunks<T extends DataType>(chunks: ReadonlyArray<Data<T>>, offsets: Uint32Array | Array<number>, begin: number, end: number) {\n    const slices: Data<T>[] = [];\n    for (let i = -1, n = chunks.length; ++i < n;) {\n        const chunk = chunks[i];\n        const offset = offsets[i];\n        const { length } = chunk;\n        // Stop if the child is to the right of the slice boundary\n        if (offset >= end) { break; }\n        // Exclude children to the left of of the slice boundary\n        if (begin >= offset + length) { continue; }\n        // Include entire child if between both left and right boundaries\n        if (offset >= begin && (offset + length) <= end) {\n            slices.push(chunk);\n            continue;\n        }\n        // Include the child slice that overlaps one of the slice boundaries\n        const from = Math.max(0, begin - offset);\n        const to = Math.min(end - offset, length);\n        slices.push(chunk.slice(from, to - from));\n    }\n    if (slices.length === 0) {\n        slices.push(chunks[0].slice(0, 0));\n    }\n    return slices;\n}\n\n/** @ignore */\nexport function binarySearch<\n    T extends DataType,\n    F extends (chunks: ReadonlyArray<Data<T>>, _1: number, _2: number) => any\n>(chunks: ReadonlyArray<Data<T>>, offsets: Uint32Array | number[], idx: number, fn: F) {\n    let lhs = 0, mid = 0, rhs = offsets.length - 1;\n    do {\n        if (lhs >= rhs - 1) {\n            return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;\n        }\n        mid = lhs + (Math.trunc((rhs - lhs) * .5));\n        idx < offsets[mid] ? (rhs = mid) : (lhs = mid);\n    } while (lhs < rhs);\n}\n\n/** @ignore */\nexport function isChunkedValid<T extends DataType>(data: Data<T>, index: number): boolean {\n    return data.getValid(index);\n}\n\n/** @ignore */\nexport function wrapChunkedCall1<T extends DataType>(fn: (c: Data<T>, _1: number) => any) {\n    function chunkedFn(chunks: ReadonlyArray<Data<T>>, i: number, j: number) { return fn(chunks[i], j); }\n    return function (this: any, index: number) {\n        const data = this.data as ReadonlyArray<Data<T>>;\n        return binarySearch(data, this._offsets, index, chunkedFn);\n    };\n}\n\n/** @ignore */\nexport function wrapChunkedCall2<T extends DataType>(fn: (c: Data<T>, _1: number, _2: any) => any) {\n    let _2: any;\n    function chunkedFn(chunks: ReadonlyArray<Data<T>>, i: number, j: number) { return fn(chunks[i], j, _2); }\n    return function (this: any, index: number, value: any) {\n        const data = this.data as ReadonlyArray<Data<T>>;\n        _2 = value;\n        const result = binarySearch(data, this._offsets, index, chunkedFn);\n        _2 = undefined;\n        return result;\n    };\n}\n\n/** @ignore */\nexport function wrapChunkedIndexOf<T extends DataType>(indexOf: (c: Data<T>, e: T['TValue'], o?: number) => any) {\n    let _1: any;\n    function chunkedIndexOf(data: ReadonlyArray<Data<T>>, chunkIndex: number, fromIndex: number) {\n        let begin = fromIndex, index = 0, total = 0;\n        for (let i = chunkIndex - 1, n = data.length; ++i < n;) {\n            const chunk = data[i];\n            if (~(index = indexOf(chunk, _1, begin))) {\n                return total + index;\n            }\n            begin = 0;\n            total += chunk.length;\n        }\n        return -1;\n    }\n    return function (this: any, element: T['TValue'], offset?: number) {\n        _1 = element;\n        const data = this.data as ReadonlyArray<Data<T>>;\n        const result = typeof offset !== 'number'\n            ? chunkedIndexOf(data, 0, 0)\n            : binarySearch(data, this._offsets, offset, chunkedIndexOf);\n        _1 = undefined;\n        return result;\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\nimport { instance as getVisitor } from './get.mjs';\nimport { getBool, BitIterator } from '../util/bit.mjs';\nimport { createElementComparator } from '../util/vector.mjs';\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {\n}\n/** @ignore */\nfunction nullIndexOf(data, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && data.length > 0 ? 0 : -1;\n}\n/** @ignore */\nfunction indexOfNull(data, fromIndex) {\n    const { nullBitmap } = data;\n    if (!nullBitmap || data.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of new BitIterator(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfValue(data, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(data, fromIndex);\n    }\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfUnion(data, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n\n//# sourceMappingURL=indexof.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Type } from '../enum.js';\nimport { Visitor } from '../visitor.js';\nimport { instance as getVisitor } from './get.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { getBool, BitIterator } from '../util/bit.js';\nimport { createElementComparator } from '../util/vector.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends Data>(node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany<T extends Data>(nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, value: T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, value: TypeToDataType<T>['TValue'] | null, index?: number) => number;\n    visitNull<T extends Null>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool<T extends Bool>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt<T extends Int>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8<T extends Int8>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16<T extends Int16>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32<T extends Int32>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64<T extends Int64>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8<T extends Uint8>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16<T extends Uint16>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32<T extends Uint32>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64<T extends Uint64>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat<T extends Float>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16<T extends Float16>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32<T extends Float32>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64<T extends Float64>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8<T extends Utf8>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary<T extends Binary>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate<T extends Date_>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay<T extends DateDay>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime<T extends Time>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal<T extends Decimal>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitList<T extends List>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct<T extends Struct>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion<T extends Union>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary<T extends Dictionary>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval<T extends Interval>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap<T extends Map_>(data: Data<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor { }\n\n/** @ignore */\nfunction nullIndexOf(data: Data<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && data.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(data: Data<T>, fromIndex?: number): number {\n    const { nullBitmap } = data;\n    if (!nullBitmap || data.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of new BitIterator(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(data: Data<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(data, fromIndex); }\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(data: Data<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n    const xs = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    const b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n/** @ignore */\nexport class BitIterator {\n    constructor(bytes, begin, length, context, get) {\n        this.bytes = bytes;\n        this.length = length;\n        this.context = context;\n        this.get = get;\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n    next() {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return { done: true, value: null };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = Math.trunc(byteOffset);\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n    let i = Math.trunc(uint32);\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=bit.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    const xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    const b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport class BitIterator<T> implements IterableIterator<T> {\n    bit: number;\n    byte: number;\n    byteIndex: number;\n    index: number;\n\n    constructor(\n        private bytes: Uint8Array,\n        begin: number,\n        private length: number,\n        private context: any,\n        private get: (context: any, index: number, byte: number, bit: number) => T\n    ) {\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n\n    next(): IteratorResult<T> {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return { done: true, value: null };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = Math.trunc(byteOffset!);\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = Math.trunc(uint32);\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\nimport { Type, Precision } from '../enum.mjs';\nimport { Float, Int, Time, } from '../type.mjs';\nimport { ChunkedIterator } from '../util/chunk.mjs';\n/** @ignore */\nexport class IteratorVisitor extends Visitor {\n}\n/** @ignore */\nfunction vectorIterator(vector) {\n    const { type } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.nullCount === 0 && vector.stride === 1 && ((type.typeId === Type.Timestamp) ||\n        (type instanceof Int && type.bitWidth !== 64) ||\n        (type instanceof Time && type.bitWidth !== 64) ||\n        (type instanceof Float && type.precision !== Precision.HALF))) {\n        return new ChunkedIterator(vector.data.length, (chunkIndex) => {\n            const data = vector.data[chunkIndex];\n            return data.values.subarray(0, data.length)[Symbol.iterator]();\n        });\n    }\n    // Otherwise, iterate manually\n    let offset = 0;\n    return new ChunkedIterator(vector.data.length, (chunkIndex) => {\n        const data = vector.data[chunkIndex];\n        const length = data.length;\n        const inner = vector.slice(offset, offset + length);\n        offset += length;\n        return new VectorIterator(inner);\n    });\n}\n/** @ignore */\nclass VectorIterator {\n    constructor(vector) {\n        this.vector = vector;\n        this.index = 0;\n    }\n    next() {\n        if (this.index < this.vector.length) {\n            return {\n                value: this.vector.get(this.index++)\n            };\n        }\n        return { done: true, value: null };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n/** @ignore */\nexport const instance = new IteratorVisitor();\n\n//# sourceMappingURL=iterator.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { Type, Precision } from '../enum.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\nimport { ChunkedIterator } from '../util/chunk.js';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends Vector>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany<T extends Vector>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends DataType>(node: Vector<T> | T): (vector: Vector<T>) => IterableIterator<T['TValue'] | null>;\n    getVisitFn<T extends Type>(node: T): (vector: Vector<TypeToDataType<T>>) => IterableIterator<TypeToDataType<T>['TValue'] | null>;\n    visitNull<T extends Null>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool<T extends Bool>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt<T extends Int>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8<T extends Int8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16<T extends Int16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32<T extends Int32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64<T extends Int64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8<T extends Uint8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16<T extends Uint16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32<T extends Uint32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64<T extends Uint64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat<T extends Float>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16<T extends Float16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32<T extends Float32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64<T extends Float64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8<T extends Utf8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary<T extends Binary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate<T extends Date_>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay<T extends DateDay>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond<T extends DateMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp<T extends Timestamp>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond<T extends TimestampSecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime<T extends Time>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond<T extends TimeSecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond<T extends TimeMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond<T extends TimeNanosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal<T extends Decimal>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList<T extends List>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct<T extends Struct>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion<T extends Union>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion<T extends DenseUnion>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion<T extends SparseUnion>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary<T extends Dictionary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval<T extends Interval>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime<T extends IntervalDayTime>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList<T extends FixedSizeList>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap<T extends Map_>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor { }\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    const { type } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.nullCount === 0 && vector.stride === 1 && (\n        (type.typeId === Type.Timestamp) ||\n        (type instanceof Int && (type as Int).bitWidth !== 64) ||\n        (type instanceof Time && (type as Time).bitWidth !== 64) ||\n        (type instanceof Float && (type as Float).precision !== Precision.HALF)\n    )) {\n        return new ChunkedIterator(vector.data.length, (chunkIndex) => {\n            const data = vector.data[chunkIndex];\n            return data.values.subarray(0, data.length)[Symbol.iterator]();\n        });\n    }\n\n    // Otherwise, iterate manually\n    let offset = 0;\n    return new ChunkedIterator(vector.data.length, (chunkIndex) => {\n        const data = vector.data[chunkIndex];\n        const length = data.length;\n        const inner = vector.slice(offset, offset + length);\n        offset += length;\n        return new VectorIterator(inner);\n    });\n}\n\n/** @ignore */\nclass VectorIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n    private index = 0;\n\n    constructor(private vector: Vector<T>) { }\n\n    next(): IteratorResult<T['TValue'] | null> {\n        if (this.index < this.vector.length) {\n            return {\n                value: this.vector.get(this.index++)\n            };\n        }\n\n        return { done: true, value: null };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","/* istanbul ignore file */\nimport { Visitor } from '../visitor.mjs';\nimport { TimeUnit, UnionMode } from '../enum.mjs';\n/** @ignore */ const sum = (x, y) => x + y;\n/** @ignore */\nexport class GetByteLengthVisitor extends Visitor {\n    visitNull(____, _) {\n        return 0;\n    }\n    visitInt(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitFloat(data, _) {\n        return data.type.ArrayType.BYTES_PER_ELEMENT;\n    }\n    visitBool(____, _) {\n        return 1 / 8;\n    }\n    visitDecimal(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitDate(data, _) {\n        return (data.type.unit + 1) * 4;\n    }\n    visitTime(data, _) {\n        return data.type.bitWidth / 8;\n    }\n    visitTimestamp(data, _) {\n        return data.type.unit === TimeUnit.SECOND ? 4 : 8;\n    }\n    visitInterval(data, _) {\n        return (data.type.unit + 1) * 4;\n    }\n    visitStruct(data, i) {\n        return data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    visitFixedSizeBinary(data, _) {\n        return data.type.byteWidth;\n    }\n    visitMap(data, i) {\n        // 4 + 4 for the indices\n        return 8 + data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    visitDictionary(data, i) {\n        var _a;\n        return (data.type.indices.bitWidth / 8) + (((_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.getByteLength(data.values[i])) || 0);\n    }\n}\n/** @ignore */\nconst getUtf8ByteLength = ({ valueOffsets }, index) => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */\nconst getBinaryByteLength = ({ valueOffsets }, index) => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */\nconst getListByteLength = ({ valueOffsets, stride, children }, index) => {\n    const child = children[0];\n    const { [index * stride]: start } = valueOffsets;\n    const { [index * stride + 1]: end } = valueOffsets;\n    const visit = instance.getVisitFn(child.type);\n    const slice = child.slice(start, end - start);\n    let size = 8; // 4 + 4 for the indices\n    for (let idx = -1, len = end - start; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n/** @ignore */\nconst getFixedSizeListByteLength = ({ stride, children }, index) => {\n    const child = children[0];\n    const slice = child.slice(index * stride, stride);\n    const visit = instance.getVisitFn(child.type);\n    let size = 0;\n    for (let idx = -1, len = slice.length; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnionByteLength = (data, index) => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnionByteLength(data, index) :\n        getSparseUnionByteLength(data, index);\n};\n/** @ignore */\nconst getDenseUnionByteLength = ({ type, children, typeIds, valueOffsets }, index) => {\n    const childIndex = type.typeIdToChildIndex[typeIds[index]];\n    // 4 for the typeId, 4 for the valueOffsets, then the child at the offset\n    return 8 + instance.visit(children[childIndex], valueOffsets[index]);\n};\n/** @ignore */\nconst getSparseUnionByteLength = ({ children }, index) => {\n    // 4 for the typeId, then once each for the children at this index\n    return 4 + instance.visitMany(children, children.map(() => index)).reduce(sum, 0);\n};\nGetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;\nGetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;\nGetByteLengthVisitor.prototype.visitList = getListByteLength;\nGetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;\nGetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;\nGetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;\nGetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;\n/** @ignore */\nexport const instance = new GetByteLengthVisitor();\n\n//# sourceMappingURL=bytelength.mjs.map\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable unicorn/no-array-callback-reference */\n\nimport { Data } from '../data.js';\nimport { Visitor } from '../visitor.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { Type, TimeUnit, UnionMode } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n\n/** @ignore */\nexport interface GetByteLengthVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number): number;\n    visitMany<T extends DataType>(nodes: Data<T>[], index: number[]): number[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, index: number) => number;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number) => number;\n    visitBinary<T extends Binary>(data: Data<T>, index: number): number;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number): number;\n    visitList<T extends List>(data: Data<T>, index: number): number;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number): number;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number): number;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number): number;\n}\n\n/** @ignore */\nexport class GetByteLengthVisitor extends Visitor {\n    public visitNull(____: Data<Null>, _: number) {\n        return 0;\n    }\n    public visitInt(data: Data<Int>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitFloat(data: Data<Float>, _: number) {\n        return data.type.ArrayType.BYTES_PER_ELEMENT;\n    }\n    public visitBool(____: Data<Bool>, _: number) {\n        return 1 / 8;\n    }\n    public visitDecimal(data: Data<Decimal>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitDate(data: Data<Date_>, _: number) {\n        return (data.type.unit + 1) * 4;\n    }\n    public visitTime(data: Data<Time>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitTimestamp(data: Data<Timestamp>, _: number) {\n        return data.type.unit === TimeUnit.SECOND ? 4 : 8;\n    }\n    public visitInterval(data: Data<Interval>, _: number) {\n        return (data.type.unit + 1) * 4;\n    }\n    public visitStruct(data: Data<Struct>, i: number) {\n        return data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    public visitFixedSizeBinary(data: Data<FixedSizeBinary>, _: number) {\n        return data.type.byteWidth;\n    }\n    public visitMap(data: Data<Map_>, i: number) {\n        // 4 + 4 for the indices\n        return 8 + data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    public visitDictionary(data: Data<Dictionary>, i: number) {\n        return (data.type.indices.bitWidth / 8) + (data.dictionary?.getByteLength(data.values[i]) || 0);\n    }\n}\n\n/** @ignore */\nconst getUtf8ByteLength = <T extends Utf8>({ valueOffsets }: Data<T>, index: number): number => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n\n/** @ignore */\nconst getBinaryByteLength = <T extends Binary>({ valueOffsets }: Data<T>, index: number): number => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n\n/** @ignore */\nconst getListByteLength = <T extends List>({ valueOffsets, stride, children }: Data<T>, index: number): number => {\n    const child: Data<T['valueType']> = children[0];\n    const { [index * stride]: start } = valueOffsets;\n    const { [index * stride + 1]: end } = valueOffsets;\n    const visit = instance.getVisitFn(child.type);\n    const slice = child.slice(start, end - start);\n    let size = 8; // 4 + 4 for the indices\n    for (let idx = -1, len = end - start; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n\n/** @ignore */\nconst getFixedSizeListByteLength = <T extends FixedSizeList>({ stride, children }: Data<T>, index: number): number => {\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(index * stride, stride);\n    const visit = instance.getVisitFn(child.type);\n    let size = 0;\n    for (let idx = -1, len = slice.length; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnionByteLength = <\n    D extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: D, index: number): number => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnionByteLength(data as Data<DenseUnion>, index) :\n        getSparseUnionByteLength(data as Data<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnionByteLength = <T extends DenseUnion>({ type, children, typeIds, valueOffsets }: Data<T>, index: number): number => {\n    const childIndex = type.typeIdToChildIndex[typeIds[index]];\n    // 4 for the typeId, 4 for the valueOffsets, then the child at the offset\n    return 8 + instance.visit(children[childIndex], valueOffsets[index]);\n};\n\n/** @ignore */\nconst getSparseUnionByteLength = <T extends SparseUnion>({ children }: Data<T>, index: number): number => {\n    // 4 for the typeId, then once each for the children at this index\n    return 4 + instance.visitMany(children, children.map(() => index)).reduce(sum, 0);\n};\n\nGetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;\nGetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;\nGetByteLengthVisitor.prototype.visitList = getListByteLength;\nGetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;\nGetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;\nGetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;\nGetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;\n\n/** @ignore */\nexport const instance = new GetByteLengthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { Field, Schema } from './schema.mjs';\nimport * as dtypes from './type.mjs';\nimport { Data } from './data.mjs';\nimport { Vector, makeVector } from './vector.mjs';\nimport { instance as getBuilderConstructor } from './visitor/builderctor.mjs';\nimport { Table } from './table.mjs';\nimport { RecordBatch } from './recordbatch.mjs';\nimport { compareTypes } from './visitor/typecomparator.mjs';\nexport function makeBuilder(options) {\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn(type)())(options);\n    if (type.children && type.children.length > 0) {\n        const children = options['children'] || [];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_, i) => children[i] || defaultOptions)\n            : (({ name }) => children[name] || defaultOptions);\n        for (const [index, field] of type.children.entries()) {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(makeBuilder(Object.assign(Object.assign({}, opts), { type })));\n        }\n    }\n    return builder;\n}\nexport function vectorFromArray(init, type) {\n    if (init instanceof Data || init instanceof Vector || init.type instanceof dtypes.DataType || ArrayBuffer.isView(init)) {\n        return makeVector(init);\n    }\n    const options = { type: type !== null && type !== void 0 ? type : inferType(init), nullValues: [null] };\n    const chunks = [...builderThroughIterable(options)(init)];\n    const vector = chunks.length === 1 ? chunks[0] : chunks.reduce((a, b) => a.concat(b));\n    if (dtypes.DataType.isDictionary(vector.type)) {\n        return vector.memoize();\n    }\n    return vector;\n}\n/**\n * Creates a {@link Table} from an array of objects.\n *\n * @param array A table of objects.\n */\nexport function tableFromJSON(array) {\n    const vector = vectorFromArray(array);\n    const batch = new RecordBatch(new Schema(vector.type.children), vector.data[0]);\n    return new Table(batch);\n}\nfunction inferType(value) {\n    if (value.length === 0) {\n        return new dtypes.Null;\n    }\n    let nullsCount = 0;\n    let arraysCount = 0;\n    let objectsCount = 0;\n    let numbersCount = 0;\n    let stringsCount = 0;\n    let bigintsCount = 0;\n    let booleansCount = 0;\n    let datesCount = 0;\n    for (const val of value) {\n        if (val == null) {\n            ++nullsCount;\n            continue;\n        }\n        switch (typeof val) {\n            case 'bigint':\n                ++bigintsCount;\n                continue;\n            case 'boolean':\n                ++booleansCount;\n                continue;\n            case 'number':\n                ++numbersCount;\n                continue;\n            case 'string':\n                ++stringsCount;\n                continue;\n            case 'object':\n                if (Array.isArray(val)) {\n                    ++arraysCount;\n                }\n                else if (Object.prototype.toString.call(val) === '[object Date]') {\n                    ++datesCount;\n                }\n                else {\n                    ++objectsCount;\n                }\n                continue;\n        }\n        throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\n    }\n    if (numbersCount + nullsCount === value.length) {\n        return new dtypes.Float64;\n    }\n    else if (stringsCount + nullsCount === value.length) {\n        return new dtypes.Dictionary(new dtypes.Utf8, new dtypes.Int32);\n    }\n    else if (bigintsCount + nullsCount === value.length) {\n        return new dtypes.Int64;\n    }\n    else if (booleansCount + nullsCount === value.length) {\n        return new dtypes.Bool;\n    }\n    else if (datesCount + nullsCount === value.length) {\n        return new dtypes.DateMillisecond;\n    }\n    else if (arraysCount + nullsCount === value.length) {\n        const array = value;\n        const childType = inferType(array[array.findIndex((ary) => ary != null)]);\n        if (array.every((ary) => ary == null || compareTypes(childType, inferType(ary)))) {\n            return new dtypes.List(new Field('', childType, true));\n        }\n    }\n    else if (objectsCount + nullsCount === value.length) {\n        const fields = new Map();\n        for (const row of value) {\n            for (const key of Object.keys(row)) {\n                if (!fields.has(key) && row[key] != null) {\n                    // use the type inferred for the first instance of a found key\n                    fields.set(key, new Field(key, inferType([row[key]]), true));\n                }\n            }\n        }\n        return new dtypes.Struct([...fields.values()]);\n    }\n    throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\n}\n/**\n * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n * sequence of Arrow Vector<T> following the chunking semantics defined in\n * the supplied `options` argument.\n *\n * This function returns a function that accepts an `Iterable` of values to\n * transform. When called, this function returns an Iterator of `Vector<T>`.\n *\n * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n *\n * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n *   reaches or exceeds the supplied `highWaterMark`.\n *\n * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n * @returns A function which accepts a JavaScript `Iterable` of values to\n *          write, and returns an `Iterator` that yields Vectors according\n *          to the chunking semantics defined in the `options` argument.\n * @nocollapse\n */\nexport function builderThroughIterable(options) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\n    const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function* (source) {\n        let numChunks = 0;\n        const builder = makeBuilder(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n/**\n * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n * sequence of Arrow Vector<T> following the chunking semantics defined in\n * the supplied `options` argument.\n *\n * This function returns a function that accepts an `AsyncIterable` of values to\n * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n *\n * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n *\n * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n *   reaches or exceeds the supplied `highWaterMark`.\n *\n * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n * @returns A function which accepts a JavaScript `AsyncIterable` of values\n *          to write, and returns an `AsyncIterator` that yields Vectors\n *          according to the chunking semantics defined in the `options`\n *          argument.\n * @nocollapse\n */\nexport function builderThroughAsyncIterable(options) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : Math.pow(2, 14) } = options;\n    const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function (source) {\n        return __asyncGenerator(this, arguments, function* () {\n            var e_1, _a;\n            let numChunks = 0;\n            const builder = makeBuilder(options);\n            try {\n                for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield __await(source_1.next()), !source_1_1.done;) {\n                    const value = source_1_1.value;\n                    if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                        ++numChunks && (yield yield __await(builder.toVector()));\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield __await(_a.call(source_1));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (builder.finish().length > 0 || numChunks === 0) {\n                yield yield __await(builder.toVector());\n            }\n        });\n    };\n}\n\n//# sourceMappingURL=factories.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field, Schema } from './schema.js';\nimport * as dtypes from './type.js';\nimport { Data, DataProps } from './data.js';\nimport { BuilderType, JavaScriptDataType } from './interfaces.js';\nimport { Vector, makeVector } from './vector.js';\nimport { Builder, BuilderOptions } from './builder.js';\nimport { instance as getBuilderConstructor } from './visitor/builderctor.js';\nimport { ArrayDataType, BigIntArray, JavaScriptArrayDataType, TypedArray, TypedArrayDataType } from './interfaces.js';\nimport { Table } from './table.js';\nimport { RecordBatch } from './recordbatch.js';\nimport { compareTypes } from './visitor/typecomparator.js';\n\nexport function makeBuilder<T extends dtypes.DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): BuilderType<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        for (const [index, field] of type.children.entries()) {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(makeBuilder({ ...opts, type }));\n        }\n    }\n\n    return builder as BuilderType<T, TNull>;\n}\n\n/**\n * Creates a Vector from a JavaScript array via a {@link Builder}.\n * Use {@link makeVector} if you only want to create a vector from a typed array.\n *\n * @example\n * ```ts\n * const vf64 = vectorFromArray([1, 2, 3]);\n * const vi8 = vectorFromArray([1, 2, 3], new Int8);\n * const vdict = vectorFromArray(['foo', 'bar']);\n * const vstruct = vectorFromArray([{a: 'foo', b: 42}, {a: 'bar', b: 12}]);\n * ```\n */\nexport function vectorFromArray(values: readonly (null | undefined)[], type?: dtypes.Null): Vector<dtypes.Null>;\nexport function vectorFromArray(values: readonly (null | undefined | boolean)[], type?: dtypes.Bool): Vector<dtypes.Bool>;\nexport function vectorFromArray<T extends dtypes.Utf8 | dtypes.Dictionary<dtypes.Utf8> = dtypes.Dictionary<dtypes.Utf8, dtypes.Int32>>(values: readonly (null | undefined | string)[], type?: T): Vector<T>;\nexport function vectorFromArray<T extends dtypes.Date_>(values: readonly (null | undefined | Date)[], type?: T): Vector<T>;\nexport function vectorFromArray<T extends dtypes.Int>(values: readonly (null | undefined | number)[], type: T): Vector<T>;\nexport function vectorFromArray<T extends dtypes.Int64 | dtypes.Uint64 = dtypes.Int64>(values: readonly (null | undefined | bigint)[], type?: T): Vector<T>;\nexport function vectorFromArray<T extends dtypes.Float = dtypes.Float64>(values: readonly (null | undefined | number)[], type?: T): Vector<T>;\nexport function vectorFromArray<T extends dtypes.DataType>(values: readonly (unknown)[], type: T): Vector<T>;\nexport function vectorFromArray<T extends readonly unknown[]>(values: T): Vector<JavaScriptArrayDataType<T>>;\n/** Creates a Vector from a typed array via {@link makeVector}. */\nexport function vectorFromArray<T extends TypedArray | BigIntArray>(data: T): Vector<TypedArrayDataType<T>>;\n\nexport function vectorFromArray<T extends dtypes.DataType>(data: Data<T>): Vector<T>;\nexport function vectorFromArray<T extends dtypes.DataType>(data: Vector<T>): Vector<T>;\nexport function vectorFromArray<T extends dtypes.DataType>(data: DataProps<T>): Vector<T>;\nexport function vectorFromArray<T extends TypedArray | BigIntArray | readonly unknown[]>(data: T): Vector<ArrayDataType<T>>;\n\nexport function vectorFromArray(init: any, type?: dtypes.DataType) {\n    if (init instanceof Data || init instanceof Vector || init.type instanceof dtypes.DataType || ArrayBuffer.isView(init)) {\n        return makeVector(init as any);\n    }\n    const options: IterableBuilderOptions = { type: type ?? inferType(init), nullValues: [null] };\n    const chunks = [...builderThroughIterable(options)(init)];\n    const vector = chunks.length === 1 ? chunks[0] : chunks.reduce((a, b) => a.concat(b));\n    if (dtypes.DataType.isDictionary(vector.type)) {\n        return vector.memoize();\n    }\n    return vector;\n}\n\n/**\n * Creates a {@link Table} from an array of objects.\n *\n * @param array A table of objects.\n */\nexport function tableFromJSON<T extends Record<string, unknown>>(array: T[]): Table<{ [P in keyof T]: JavaScriptDataType<T[P]> }> {\n    const vector = vectorFromArray(array) as Vector<dtypes.Struct<any>>;\n    const batch = new RecordBatch(new Schema(vector.type.children), vector.data[0]);\n    return new Table(batch);\n}\n\n/** @ignore */\nfunction inferType<T extends readonly unknown[]>(values: T): JavaScriptArrayDataType<T>;\nfunction inferType(value: readonly unknown[]): dtypes.DataType {\n    if (value.length === 0) { return new dtypes.Null; }\n    let nullsCount = 0;\n    let arraysCount = 0;\n    let objectsCount = 0;\n    let numbersCount = 0;\n    let stringsCount = 0;\n    let bigintsCount = 0;\n    let booleansCount = 0;\n    let datesCount = 0;\n\n    for (const val of value) {\n        if (val == null) { ++nullsCount; continue; }\n        switch (typeof val) {\n            case 'bigint': ++bigintsCount; continue;\n            case 'boolean': ++booleansCount; continue;\n            case 'number': ++numbersCount; continue;\n            case 'string': ++stringsCount; continue;\n            case 'object':\n                if (Array.isArray(val)) {\n                    ++arraysCount;\n                } else if (Object.prototype.toString.call(val) === '[object Date]') {\n                    ++datesCount;\n                } else {\n                    ++objectsCount;\n                }\n                continue;\n        }\n        throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\n    }\n\n    if (numbersCount + nullsCount === value.length) {\n        return new dtypes.Float64;\n    } else if (stringsCount + nullsCount === value.length) {\n        return new dtypes.Dictionary(new dtypes.Utf8, new dtypes.Int32);\n    } else if (bigintsCount + nullsCount === value.length) {\n        return new dtypes.Int64;\n    } else if (booleansCount + nullsCount === value.length) {\n        return new dtypes.Bool;\n    } else if (datesCount + nullsCount === value.length) {\n        return new dtypes.DateMillisecond;\n    } else if (arraysCount + nullsCount === value.length) {\n        const array = value as Array<unknown>[];\n        const childType = inferType(array[array.findIndex((ary) => ary != null)]);\n        if (array.every((ary) => ary == null || compareTypes(childType, inferType(ary)))) {\n            return new dtypes.List(new Field('', childType, true));\n        }\n    } else if (objectsCount + nullsCount === value.length) {\n        const fields = new Map<string, Field>();\n        for (const row of value as Record<string, unknown>[]) {\n            for (const key of Object.keys(row)) {\n                if (!fields.has(key) && row[key] != null) {\n                    // use the type inferred for the first instance of a found key\n                    fields.set(key, new Field(key, inferType([row[key]]), true));\n                }\n            }\n        }\n        return new dtypes.Struct([...fields.values()]);\n    }\n\n    throw new TypeError('Unable to infer Vector type from input values, explicit type declaration expected');\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link builderThroughIterable}\n * @see {@link builderThroughAsyncIterable}\n */\nexport interface IterableBuilderOptions<T extends dtypes.DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends dtypes.DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<Vector<T>>;\n\n/**\n * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n * sequence of Arrow Vector<T> following the chunking semantics defined in\n * the supplied `options` argument.\n *\n * This function returns a function that accepts an `Iterable` of values to\n * transform. When called, this function returns an Iterator of `Vector<T>`.\n *\n * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n *\n * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n *   reaches or exceeds the supplied `highWaterMark`.\n *\n * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n * @returns A function which accepts a JavaScript `Iterable` of values to\n *          write, and returns an `Iterator` that yields Vectors according\n *          to the chunking semantics defined in the `options` argument.\n * @nocollapse\n */\nexport function builderThroughIterable<T extends dtypes.DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function* (source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        const builder = makeBuilder(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughIterable<T, TNull>;\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends dtypes.DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<Vector<T>>;\n\n/**\n * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n * sequence of Arrow Vector<T> following the chunking semantics defined in\n * the supplied `options` argument.\n *\n * This function returns a function that accepts an `AsyncIterable` of values to\n * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n *\n * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n *\n * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n *   reaches or exceeds the supplied `highWaterMark`.\n *\n * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n * @returns A function which accepts a JavaScript `AsyncIterable` of values\n *          to write, and returns an `AsyncIterator` that yields Vectors\n *          according to the chunking semantics defined in the `options`\n *          argument.\n * @nocollapse\n */\nexport function builderThroughAsyncIterable<T extends dtypes.DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? Number.POSITIVE_INFINITY : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        const builder = makeBuilder(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughAsyncIterable<T, TNull>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type.mjs';\nexport class Schema {\n    constructor(fields = [], metadata, dictionaries) {\n        this.fields = (fields || []);\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    get [Symbol.toStringTag]() { return 'Schema'; }\n    get names() { return this.fields.map((f) => f.name); }\n    toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n    /**\n     * Construct a new Schema containing only specified fields.\n     *\n     * @param fieldNames Names of fields to keep.\n     * @returns A new Schema of fields matching the specified names.\n     */\n    select(fieldNames) {\n        const names = new Set(fieldNames);\n        const fields = this.fields.filter((f) => names.has(f.name));\n        return new Schema(fields, this.metadata);\n    }\n    /**\n     * Construct a new Schema containing only fields at the specified indices.\n     *\n     * @param fieldIndices Indices of fields to keep.\n     * @returns A new Schema of fields at the specified indices.\n     */\n    selectAt(fieldIndices) {\n        const fields = fieldIndices.map((i) => this.fields[i]).filter(Boolean);\n        return new Schema(fields, this.metadata);\n    }\n    assign(...args) {\n        const other = (args[0] instanceof Schema\n            ? args[0]\n            : Array.isArray(args[0])\n                ? new Schema(args[0])\n                : new Schema(args));\n        const curFields = [...this.fields];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        });\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n        return new Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));\n    }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n    /** @nocollapse */\n    static new(...args) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field(`${name}`, type, nullable, metadata);\n    }\n    get typeId() { return this.type.typeId; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    toString() { return `${this.name}: ${this.type}`; }\n    clone(...args) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({ name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata } = args[0]);\n        return Field.new(name, type, nullable, metadata);\n    }\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n/** @ignore */\nfunction generateDictionaryMap(fields, dictionaries = new Map()) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            }\n            else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n    return dictionaries;\n}\n\n//# sourceMappingURL=schema.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, TypeMap } from './type.js';\n\nexport class Schema<T extends TypeMap = any> {\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(\n        fields: Field<T[keyof T]>[] = [],\n        metadata?: Map<string, string> | null,\n        dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n\n    public get names(): (keyof T)[] { return this.fields.map((f) => f.name); }\n\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    /**\n     * Construct a new Schema containing only specified fields.\n     *\n     * @param fieldNames Names of fields to keep.\n     * @returns A new Schema of fields matching the specified names.\n     */\n    public select<K extends keyof T = any>(fieldNames: K[]) {\n        const names = new Set<string | K>(fieldNames);\n        const fields = this.fields.filter((f) => names.has(f.name)) as Field<T[K]>[];\n        return new Schema<{ [P in K]: T[P] }>(fields, this.metadata);\n    }\n\n    /**\n     * Construct a new Schema containing only fields at the specified indices.\n     *\n     * @param fieldIndices Indices of fields to keep.\n     * @returns A new Schema of fields at the specified indices.\n     */\n    public selectAt<K extends T = any>(fieldIndices: number[]) {\n        const fields = fieldIndices.map((i) => this.fields[i]).filter(Boolean) as Field<K[keyof K]>[];\n        return new Schema<K>(fields, this.metadata);\n    }\n\n    public assign<R extends TypeMap = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends TypeMap = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends TypeMap = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = (args[0] instanceof Schema\n            ? args[0] as Schema<R>\n            : Array.isArray(args[0])\n                ? new Schema<R>(<Field<R[keyof R]>[]>args[0])\n                : new Schema<R>(<Field<R[keyof R]>[]>args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = <any>null;\n(Schema.prototype as any).metadata = <any>null;\n(Schema.prototype as any).dictionaries = <any>null;\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number; type: T; nullable?: boolean; metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public clone<R extends DataType = T>(props: { name?: string | number; type?: R; nullable?: boolean; metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({ name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata } = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\nimport { BinaryBuilder } from '../builder/binary.mjs';\nimport { BoolBuilder } from '../builder/bool.mjs';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date.mjs';\nimport { DecimalBuilder } from '../builder/decimal.mjs';\nimport { DictionaryBuilder } from '../builder/dictionary.mjs';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary.mjs';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist.mjs';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float.mjs';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval.mjs';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int.mjs';\nimport { ListBuilder } from '../builder/list.mjs';\nimport { MapBuilder } from '../builder/map.mjs';\nimport { NullBuilder } from '../builder/null.mjs';\nimport { StructBuilder } from '../builder/struct.mjs';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp.mjs';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time.mjs';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union.mjs';\nimport { Utf8Builder } from '../builder/utf8.mjs';\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    visitNull() { return NullBuilder; }\n    visitBool() { return BoolBuilder; }\n    visitInt() { return IntBuilder; }\n    visitInt8() { return Int8Builder; }\n    visitInt16() { return Int16Builder; }\n    visitInt32() { return Int32Builder; }\n    visitInt64() { return Int64Builder; }\n    visitUint8() { return Uint8Builder; }\n    visitUint16() { return Uint16Builder; }\n    visitUint32() { return Uint32Builder; }\n    visitUint64() { return Uint64Builder; }\n    visitFloat() { return FloatBuilder; }\n    visitFloat16() { return Float16Builder; }\n    visitFloat32() { return Float32Builder; }\n    visitFloat64() { return Float64Builder; }\n    visitUtf8() { return Utf8Builder; }\n    visitBinary() { return BinaryBuilder; }\n    visitFixedSizeBinary() { return FixedSizeBinaryBuilder; }\n    visitDate() { return DateBuilder; }\n    visitDateDay() { return DateDayBuilder; }\n    visitDateMillisecond() { return DateMillisecondBuilder; }\n    visitTimestamp() { return TimestampBuilder; }\n    visitTimestampSecond() { return TimestampSecondBuilder; }\n    visitTimestampMillisecond() { return TimestampMillisecondBuilder; }\n    visitTimestampMicrosecond() { return TimestampMicrosecondBuilder; }\n    visitTimestampNanosecond() { return TimestampNanosecondBuilder; }\n    visitTime() { return TimeBuilder; }\n    visitTimeSecond() { return TimeSecondBuilder; }\n    visitTimeMillisecond() { return TimeMillisecondBuilder; }\n    visitTimeMicrosecond() { return TimeMicrosecondBuilder; }\n    visitTimeNanosecond() { return TimeNanosecondBuilder; }\n    visitDecimal() { return DecimalBuilder; }\n    visitList() { return ListBuilder; }\n    visitStruct() { return StructBuilder; }\n    visitUnion() { return UnionBuilder; }\n    visitDenseUnion() { return DenseUnionBuilder; }\n    visitSparseUnion() { return SparseUnionBuilder; }\n    visitDictionary() { return DictionaryBuilder; }\n    visitInterval() { return IntervalBuilder; }\n    visitIntervalDayTime() { return IntervalDayTimeBuilder; }\n    visitIntervalYearMonth() { return IntervalYearMonthBuilder; }\n    visitFixedSizeList() { return FixedSizeListBuilder; }\n    visitMap() { return MapBuilder; }\n}\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n\n//# sourceMappingURL=builderctor.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Type } from '../enum.js';\nimport { Vector } from '../vector.js';\nimport { DataType } from '../type.js';\nimport { Visitor } from '../visitor.js';\nimport { BuilderCtor } from '../interfaces.js';\nimport { BinaryBuilder } from '../builder/binary.js';\nimport { BoolBuilder } from '../builder/bool.js';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date.js';\nimport { DecimalBuilder } from '../builder/decimal.js';\nimport { DictionaryBuilder } from '../builder/dictionary.js';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary.js';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist.js';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float.js';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval.js';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int.js';\nimport { ListBuilder } from '../builder/list.js';\nimport { MapBuilder } from '../builder/map.js';\nimport { NullBuilder } from '../builder/null.js';\nimport { StructBuilder } from '../builder/struct.js';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp.js';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time.js';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union.js';\nimport { Utf8Builder } from '../builder/utf8.js';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull() { return NullBuilder; }\n    public visitBool() { return BoolBuilder; }\n    public visitInt() { return IntBuilder; }\n    public visitInt8() { return Int8Builder; }\n    public visitInt16() { return Int16Builder; }\n    public visitInt32() { return Int32Builder; }\n    public visitInt64() { return Int64Builder; }\n    public visitUint8() { return Uint8Builder; }\n    public visitUint16() { return Uint16Builder; }\n    public visitUint32() { return Uint32Builder; }\n    public visitUint64() { return Uint64Builder; }\n    public visitFloat() { return FloatBuilder; }\n    public visitFloat16() { return Float16Builder; }\n    public visitFloat32() { return Float32Builder; }\n    public visitFloat64() { return Float64Builder; }\n    public visitUtf8() { return Utf8Builder; }\n    public visitBinary() { return BinaryBuilder; }\n    public visitFixedSizeBinary() { return FixedSizeBinaryBuilder; }\n    public visitDate() { return DateBuilder; }\n    public visitDateDay() { return DateDayBuilder; }\n    public visitDateMillisecond() { return DateMillisecondBuilder; }\n    public visitTimestamp() { return TimestampBuilder; }\n    public visitTimestampSecond() { return TimestampSecondBuilder; }\n    public visitTimestampMillisecond() { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond() { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond() { return TimestampNanosecondBuilder; }\n    public visitTime() { return TimeBuilder; }\n    public visitTimeSecond() { return TimeSecondBuilder; }\n    public visitTimeMillisecond() { return TimeMillisecondBuilder; }\n    public visitTimeMicrosecond() { return TimeMicrosecondBuilder; }\n    public visitTimeNanosecond() { return TimeNanosecondBuilder; }\n    public visitDecimal() { return DecimalBuilder; }\n    public visitList() { return ListBuilder; }\n    public visitStruct() { return StructBuilder; }\n    public visitUnion() { return UnionBuilder; }\n    public visitDenseUnion() { return DenseUnionBuilder; }\n    public visitSparseUnion() { return SparseUnionBuilder; }\n    public visitDictionary() { return DictionaryBuilder; }\n    public visitInterval() { return IntervalBuilder; }\n    public visitIntervalDayTime() { return IntervalDayTimeBuilder; }\n    public visitIntervalYearMonth() { return IntervalYearMonthBuilder; }\n    public visitFixedSizeList() { return FixedSizeListBuilder; }\n    public visitMap() { return MapBuilder; }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../util/buffer.mjs';\nimport { BufferBuilder } from './buffer.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class BinaryBuilder extends VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    _flushPending(pending, pendingLength) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let offset = 0;\n        for (const [index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                const length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=binary.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type.js';\nimport { toUint8Array } from '../util/buffer.js';\nimport { BufferBuilder } from './buffer.js';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder.js';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let offset = 0;\n        for (const [index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                const length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer.mjs';\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len, BPE) => ((((Math.ceil(len) * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = (arr, len = 0) => (arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0));\n/** @ignore */\nexport class BufferBuilder {\n    constructor(buffer, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor;\n        this._resize(this.length = Math.ceil(buffer.length / stride));\n    }\n    get byteLength() {\n        return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;\n    }\n    get reservedLength() { return this.buffer.length / this.stride; }\n    get reservedByteLength() { return this.buffer.byteLength; }\n    // @ts-ignore\n    set(index, value) { return this; }\n    append(value) { return this.set(this.length, value); }\n    reserve(extra) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n            }\n        }\n        return this;\n    }\n    flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    _resize(newLength) {\n        return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nexport class DataBufferBuilder extends BufferBuilder {\n    last() { return this.get(this.length - 1); }\n    get(index) { return this.buffer[index]; }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n    constructor(data = new Uint8Array(0)) {\n        super(data, 1 / 8);\n        this.numValid = 0;\n    }\n    get numInvalid() { return this.length - this.numValid; }\n    get(idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    set(idx, val) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    append(value) {\n        return this.set(this.length - 1, value);\n    }\n    set(index, value) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n//# sourceMappingURL=buffer.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer.js';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces.js';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray ? TypedArrayConstructor<T> :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((Math.ceil(len) * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = Math.ceil(buffer.length / stride));\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() {\n        return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;\n    }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T>memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { makeData } from './data.mjs';\nimport { MapRow, kKeys } from './row/map.mjs';\nimport { strideForType, } from './type.mjs';\nimport { createIsValidFunction } from './builder/valid.mjs';\nimport { BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer.mjs';\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * @example\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = makeBuilder({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport class Builder {\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }) {\n        /**\n         * The number of values written to the `Builder` that haven't been flushed yet.\n         * @readonly\n         */\n        this.length = 0;\n        /**\n         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n         * @readonly\n         */\n        this.finished = false;\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughDOM(options) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    toVector() { return new Vector([this.flush()]); }\n    get ArrayType() { return this.type.ArrayType; }\n    get nullCount() { return this._nulls.numInvalid; }\n    get numChildren() { return this.children.length; }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    get byteLength() {\n        let size = 0;\n        const { _offsets, _values, _nulls, _typeIds, children } = this;\n        _offsets && (size += _offsets.byteLength);\n        _values && (size += _values.byteLength);\n        _nulls && (size += _nulls.byteLength);\n        _typeIds && (size += _typeIds.byteLength);\n        return children.reduce((size, child) => size + child.byteLength, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    get reservedLength() {\n        return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    get reservedByteLength() {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n    get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n    get values() { return this._values ? this._values.buffer : null; }\n    get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n    get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    append(value) { return this.set(this.length, value); }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    isValid(value) { return this._isValid(value); }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    set(index, value) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    setValue(index, value) { this._setValue(this, index, value); }\n    setValid(index, valid) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n    // @ts-ignore\n    addChild(child, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    getChildAt(index) {\n        return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */\n    flush() {\n        let data;\n        let typeIds;\n        let nullBitmap;\n        let valueOffsets;\n        const { type, length, nullCount, _typeIds, _offsets, _values, _nulls } = this;\n        if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length)) { // Unions\n            // DenseUnions\n            valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length);\n        }\n        else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length)) { // Variable-width primitives (Binary, Utf8), and Lists\n            // Binary, Utf8\n            data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());\n        }\n        else { // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval)\n            data = _values === null || _values === void 0 ? void 0 : _values.flush(length);\n        }\n        if (nullCount > 0) {\n            nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length);\n        }\n        const children = this.children.map((child) => child.flush());\n        this.clear();\n        return makeData({\n            type, length, nullCount,\n            children, 'child': children[0],\n            data, typeIds, nullBitmap, valueOffsets,\n        });\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    finish() {\n        this.finished = true;\n        for (const child of this.children)\n            child.finish();\n        return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    clear() {\n        var _a, _b, _c, _d;\n        this.length = 0;\n        (_a = this._nulls) === null || _a === void 0 ? void 0 : _a.clear();\n        (_b = this._values) === null || _b === void 0 ? void 0 : _b.clear();\n        (_c = this._offsets) === null || _c === void 0 ? void 0 : _c.clear();\n        (_d = this._typeIds) === null || _d === void 0 ? void 0 : _d.clear();\n        for (const child of this.children)\n            child.clear();\n        return this;\n    }\n}\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = () => true;\n/** @ignore */\nexport class FixedWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    setValue(index, value) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n/** @ignore */\nexport class VariableWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._pendingLength = 0;\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    setValue(index, value) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += (value instanceof MapRow) ? value[kKeys].length : value.length;\n        pending.set(index, value);\n    }\n    setValid(index, isValid) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    flush() {\n        this._flush();\n        return super.flush();\n    }\n    finish() {\n        this._flush();\n        return super.finish();\n    }\n    _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n}\n\n//# sourceMappingURL=builder.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector.js';\nimport { Data, makeData } from './data.js';\nimport { MapRow, kKeys } from './row/map.js';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_,\n} from './type.js';\nimport { createIsValidFunction } from './builder/valid.js';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer.js';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions } | BuilderOptions[];\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * @example\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = makeBuilder({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return new Vector([this.flush()]); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        const { _offsets, _values, _nulls, _typeIds, children } = this;\n        _offsets && (size += _offsets.byteLength);\n        _values && (size += _values.byteLength);\n        _nulls && (size += _nulls.byteLength);\n        _typeIds && (size += _typeIds.byteLength);\n        return children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    declare protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    declare protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    declare protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    declare protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    declare protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    declare protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */\n    public flush(): Data<T> {\n\n        let data;\n        let typeIds;\n        let nullBitmap;\n        let valueOffsets;\n        const { type, length, nullCount, _typeIds, _offsets, _values, _nulls } = this;\n\n        if (typeIds = _typeIds?.flush(length)) { // Unions\n            // DenseUnions\n            valueOffsets = _offsets?.flush(length);\n        } else if (valueOffsets = _offsets?.flush(length)) { // Variable-width primitives (Binary, Utf8), and Lists\n            // Binary, Utf8\n            data = _values?.flush(_offsets.last());\n        } else { // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval)\n            data = _values?.flush(length);\n        }\n\n        if (nullCount > 0) {\n            nullBitmap = _nulls?.flush(length);\n        }\n\n        const children = this.children.map((child) => child.flush());\n\n        this.clear();\n\n        return makeData(<any>{\n            type, length, nullCount,\n            children, 'child': children[0],\n            data, typeIds, nullBitmap, valueOffsets,\n        }) as Data<T>;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        for (const child of this.children) child.finish();\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._nulls?.clear();\n        this._values?.clear();\n        this._offsets?.clear();\n        this._typeIds?.clear();\n        for (const child of this.children) child.clear();\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += (value instanceof MapRow) ? value[kKeys].length : value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty.mjs';\nimport { BigIntAvailable } from '../util/compat.mjs';\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction(nullValues) {\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value) { return true; };\n    }\n    let fnBody = '';\n    const noNaNs = nullValues.filter((x) => x === x);\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n    return new Function(`x`, `${fnBody}\\nreturn true;`);\n}\n/** @ignore */\nfunction valueToCase(x) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    }\n    else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n\n//# sourceMappingURL=valid.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type.js';\nimport { valueToString } from '../util/pretty.js';\nimport { BigIntAvailable } from '../util/compat.js';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    const noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BitmapBufferBuilder } from './buffer.mjs';\nimport { Builder } from '../builder.mjs';\n/** @ignore */\nexport class BoolBuilder extends Builder {\n    constructor(options) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    setValue(index, value) {\n        this._values.set(index, +value);\n    }\n}\n\n//# sourceMappingURL=bool.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type.js';\nimport { BitmapBufferBuilder } from './buffer.js';\nimport { Builder, BuilderOptions } from '../builder.js';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setDate, setDateDay, setDateMillisecond } from '../visitor/set.mjs';\n/** @ignore */\nexport class DateBuilder extends FixedWidthBuilder {\n}\nDateBuilder.prototype._setValue = setDate;\n/** @ignore */\nexport class DateDayBuilder extends DateBuilder {\n}\nDateDayBuilder.prototype._setValue = setDateDay;\n/** @ignore */\nexport class DateMillisecondBuilder extends DateBuilder {\n}\nDateMillisecondBuilder.prototype._setValue = setDateMillisecond;\n\n//# sourceMappingURL=date.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Date_, DateDay, DateMillisecond } from '../type.js';\nimport { setDate, setDateDay, setDateMillisecond } from '../visitor/set.js';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> { }\n\n(DateBuilder.prototype as any)._setValue = setDate;\n\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> { }\n\n(DateDayBuilder.prototype as any)._setValue = setDateDay;\n\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> { }\n\n(DateMillisecondBuilder.prototype as any)._setValue = setDateMillisecond;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setDecimal } from '../visitor/set.mjs';\n/** @ignore */\nexport class DecimalBuilder extends FixedWidthBuilder {\n}\nDecimalBuilder.prototype._setValue = setDecimal;\n\n//# sourceMappingURL=decimal.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type.js';\nimport { FixedWidthBuilder } from '../builder.js';\nimport { setDecimal } from '../visitor/set.js';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> { }\n\n(DecimalBuilder.prototype as any)._setValue = setDecimal;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type.mjs';\nimport { Builder } from '../builder.mjs';\nimport { makeBuilder } from '../factories.mjs';\n/** @ignore */\nexport class DictionaryBuilder extends Builder {\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) });\n        this._nulls = null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = makeBuilder({ 'type': this.type.indices, 'nullValues': nulls });\n        this.dictionary = makeBuilder({ 'type': this.type.dictionary, 'nullValues': null });\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n    get values() { return this.indices.values; }\n    get nullCount() { return this.indices.nullCount; }\n    get nullBitmap() { return this.indices.nullBitmap; }\n    get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    isValid(value) { return this.indices.isValid(value); }\n    setValid(index, valid) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    setValue(index, value) {\n        const keysToIndices = this._keysToIndices;\n        const key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary;\n        this.clear();\n        return data;\n    }\n    finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    valueToKey(val) {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n\n//# sourceMappingURL=dictionary.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector.js';\nimport { IntBuilder } from './int.js';\nimport { Dictionary, DataType } from '../type.js';\nimport { Builder, BuilderOptions } from '../builder.js';\nimport { makeBuilder } from '../factories.js';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any>null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = makeBuilder({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = makeBuilder({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const keysToIndices = this._keysToIndices;\n        const key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setFixedSizeBinary } from '../visitor/set.mjs';\n/** @ignore */\nexport class FixedSizeBinaryBuilder extends FixedWidthBuilder {\n}\nFixedSizeBinaryBuilder.prototype._setValue = setFixedSizeBinary;\n\n//# sourceMappingURL=fixedsizebinary.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type.js';\nimport { FixedWidthBuilder } from '../builder.js';\nimport { setFixedSizeBinary } from '../visitor/set.js';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> { }\n\n(FixedSizeBinaryBuilder.prototype as any)._setValue = setFixedSizeBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { Builder } from '../builder.mjs';\nimport { FixedSizeList } from '../type.mjs';\n/** @ignore */\nexport class FixedSizeListBuilder extends Builder {\n    setValue(index, value) {\n        const [child] = this.children;\n        const start = index * this.stride;\n        for (let i = -1, n = value.length; ++i < n;) {\n            child.set(start + i, value[i]);\n        }\n    }\n    addChild(child, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n}\n\n//# sourceMappingURL=fixedsizelist.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema.js';\nimport { Builder } from '../builder.js';\nimport { DataType, FixedSizeList } from '../type.js';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        const [child] = this.children;\n        const start = index * this.stride;\n        for (let i = -1, n = value.length; ++i < n;) {\n            child.set(start + i, value[i]);\n        }\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { float64ToUint16 } from '../util/math.mjs';\nimport { FixedWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class FloatBuilder extends FixedWidthBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\n/** @ignore */\nexport class Float16Builder extends FloatBuilder {\n    setValue(index, value) {\n        // convert JS float64 to a uint16\n        super.setValue(index, float64ToUint16(value));\n    }\n}\n/** @ignore */\nexport class Float32Builder extends FloatBuilder {\n}\n/** @ignore */\nexport class Float64Builder extends FloatBuilder {\n}\n\n//# sourceMappingURL=float.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math.js';\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Float, Float16, Float32, Float64 } from '../type.js';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        super.setValue(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> { }\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> { }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setIntervalValue, setIntervalDayTime, setIntervalYearMonth } from '../visitor/set.mjs';\n/** @ignore */\nexport class IntervalBuilder extends FixedWidthBuilder {\n}\nIntervalBuilder.prototype._setValue = setIntervalValue;\n/** @ignore */\nexport class IntervalDayTimeBuilder extends IntervalBuilder {\n}\nIntervalDayTimeBuilder.prototype._setValue = setIntervalDayTime;\n/** @ignore */\nexport class IntervalYearMonthBuilder extends IntervalBuilder {\n}\nIntervalYearMonthBuilder.prototype._setValue = setIntervalYearMonth;\n\n//# sourceMappingURL=interval.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type.js';\nimport { setIntervalValue, setIntervalDayTime, setIntervalYearMonth } from '../visitor/set.js';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> { }\n\n(IntervalBuilder.prototype as any)._setValue = setIntervalValue;\n\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> { }\n\n(IntervalDayTimeBuilder.prototype as any)._setValue = setIntervalDayTime;\n\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> { }\n\n(IntervalYearMonthBuilder.prototype as any)._setValue = setIntervalYearMonth;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class IntBuilder extends FixedWidthBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\n/** @ignore */\nexport class Int8Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Int16Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Int32Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Int64Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Uint8Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Uint16Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Uint32Builder extends IntBuilder {\n}\n/** @ignore */\nexport class Uint64Builder extends IntBuilder {\n}\n\n//# sourceMappingURL=int.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type.js';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> { }\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> { }\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> { }\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> { }\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> { }\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> { }\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> { }\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> { }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { List } from '../type.mjs';\nimport { OffsetsBufferBuilder } from './buffer.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class ListBuilder extends VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    addChild(child, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    _flushPending(pending) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending) {\n            if (typeof value === 'undefined') {\n                offsets.set(index, 0);\n            }\n            else {\n                const n = value.length;\n                const start = offsets.set(index, n).buffer[index];\n                for (let i = -1; ++i < n;) {\n                    child.set(start + i, value[i]);\n                }\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=list.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema.js';\nimport { DataType, List } from '../type.js';\nimport { OffsetsBufferBuilder } from './buffer.js';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder.js';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending) {\n            if (typeof value === 'undefined') {\n                offsets.set(index, 0);\n            } else {\n                const n = value.length;\n                const start = offsets.set(index, n).buffer[index];\n                for (let i = -1; ++i < n;) {\n                    child.set(start + i, value[i]);\n                }\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { Map_ } from '../type.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class MapBuilder extends VariableWidthBuilder {\n    set(index, value) {\n        return super.set(index, value);\n    }\n    setValue(index, value) {\n        const row = (value instanceof Map ? value : new Map(Object.entries(value)));\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += row.size;\n        pending.set(index, row);\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n    _flushPending(pending) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                let { [index]: idx, [index + 1]: end } = offsets.set(index, value.size).buffer;\n                for (const val of value.entries()) {\n                    child.set(idx, val);\n                    if (++idx >= end)\n                        break;\n                }\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=map.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema.js';\nimport { DataType, Map_, Struct } from '../type.js';\nimport { Builder, VariableWidthBuilder } from '../builder.js';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V };\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    declare protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        const row = (value instanceof Map ? value : new Map(Object.entries(value))) as MapValue<K, V>;\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index) as Map<K, V> | undefined;\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += row.size;\n        pending.set(index, row);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K; value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const [child] = this.children;\n        for (const [index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                let {\n                    [index]: idx,\n                    [index + 1]: end\n                } = offsets.set(index, value.size).buffer;\n                for (const val of value.entries()) {\n                    child.set(idx, val);\n                    if (++idx >= end) break;\n                }\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Builder } from '../builder.mjs';\n/** @ignore */\nexport class NullBuilder extends Builder {\n    // @ts-ignore\n    setValue(index, value) { }\n    setValid(index, valid) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n\n//# sourceMappingURL=null.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type.js';\nimport { Builder } from '../builder.js';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) { }\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable unicorn/no-array-for-each */\nimport { Field } from '../schema.mjs';\nimport { Builder } from '../builder.mjs';\nimport { Struct } from '../type.mjs';\n/** @ignore */\nexport class StructBuilder extends Builder {\n    setValue(index, value) {\n        const { children, type } = this;\n        switch (Array.isArray(value) || value.constructor) {\n            case true: return type.children.forEach((_, i) => children[i].set(index, value[i]));\n            case Map: return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));\n            default: return type.children.forEach((f, i) => children[i].set(index, value[f.name]));\n        }\n    }\n    /** @inheritdoc */\n    setValid(index, valid) {\n        if (!super.setValid(index, valid)) {\n            this.children.forEach((child) => child.setValid(index, valid));\n        }\n        return valid;\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n\n//# sourceMappingURL=struct.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable unicorn/no-array-for-each */\n\nimport { Field } from '../schema.js';\nimport { Builder } from '../builder.js';\nimport { Struct, TypeMap } from '../type.js';\n\n/** @ignore */\nexport class StructBuilder<T extends TypeMap = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public setValue(index: number, value: Struct<T>['TValue']) {\n        const { children, type } = this;\n        switch (Array.isArray(value) || value.constructor) {\n            case true: return type.children.forEach((_, i) => children[i].set(index, value[i]));\n            case Map: return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));\n            default: return type.children.forEach((f, i) => children[i].set(index, value[f.name]));\n        }\n    }\n\n    /** @inheritdoc */\n    public setValid(index: number, valid: boolean) {\n        if (!super.setValid(index, valid)) {\n            this.children.forEach((child) => child.setValid(index, valid));\n        }\n        return valid;\n    }\n\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setTimestamp, setTimestampSecond, setTimestampMillisecond, setTimestampMicrosecond, setTimestampNanosecond } from '../visitor/set.mjs';\n/** @ignore */\nexport class TimestampBuilder extends FixedWidthBuilder {\n}\nTimestampBuilder.prototype._setValue = setTimestamp;\n/** @ignore */\nexport class TimestampSecondBuilder extends TimestampBuilder {\n}\nTimestampSecondBuilder.prototype._setValue = setTimestampSecond;\n/** @ignore */\nexport class TimestampMillisecondBuilder extends TimestampBuilder {\n}\nTimestampMillisecondBuilder.prototype._setValue = setTimestampMillisecond;\n/** @ignore */\nexport class TimestampMicrosecondBuilder extends TimestampBuilder {\n}\nTimestampMicrosecondBuilder.prototype._setValue = setTimestampMicrosecond;\n/** @ignore */\nexport class TimestampNanosecondBuilder extends TimestampBuilder {\n}\nTimestampNanosecondBuilder.prototype._setValue = setTimestampNanosecond;\n\n//# sourceMappingURL=timestamp.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type.js';\nimport { setTimestamp, setTimestampSecond, setTimestampMillisecond, setTimestampMicrosecond, setTimestampNanosecond } from '../visitor/set.js';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> { }\n\n(TimestampBuilder.prototype as any)._setValue = setTimestamp;\n\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> { }\n\n(TimestampSecondBuilder.prototype as any)._setValue = setTimestampSecond;\n\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> { }\n\n(TimestampMillisecondBuilder.prototype as any)._setValue = setTimestampMillisecond;\n\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> { }\n\n(TimestampMicrosecondBuilder.prototype as any)._setValue = setTimestampMicrosecond;\n\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> { }\n\n(TimestampNanosecondBuilder.prototype as any)._setValue = setTimestampNanosecond;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { FixedWidthBuilder } from '../builder.mjs';\nimport { setTime, setTimeSecond, setTimeMillisecond, setTimeMicrosecond, setTimeNanosecond } from '../visitor/set.mjs';\n/** @ignore */\nexport class TimeBuilder extends FixedWidthBuilder {\n}\nTimeBuilder.prototype._setValue = setTime;\n/** @ignore */\nexport class TimeSecondBuilder extends TimeBuilder {\n}\nTimeSecondBuilder.prototype._setValue = setTimeSecond;\n/** @ignore */\nexport class TimeMillisecondBuilder extends TimeBuilder {\n}\nTimeMillisecondBuilder.prototype._setValue = setTimeMillisecond;\n/** @ignore */\nexport class TimeMicrosecondBuilder extends TimeBuilder {\n}\nTimeMicrosecondBuilder.prototype._setValue = setTimeMicrosecond;\n/** @ignore */\nexport class TimeNanosecondBuilder extends TimeBuilder {\n}\nTimeNanosecondBuilder.prototype._setValue = setTimeNanosecond;\n\n//# sourceMappingURL=time.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder.js';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type.js';\nimport { setTime, setTimeSecond, setTimeMillisecond, setTimeMicrosecond, setTimeNanosecond } from '../visitor/set.js';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> { }\n\n(TimeBuilder.prototype as any)._setValue = setTime;\n\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> { }\n\n(TimeSecondBuilder.prototype as any)._setValue = setTimeSecond;\n\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> { }\n\n(TimeMillisecondBuilder.prototype as any)._setValue = setTimeMillisecond;\n\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> { }\n\n(TimeMicrosecondBuilder.prototype as any)._setValue = setTimeMicrosecond;\n\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> { }\n\n(TimeNanosecondBuilder.prototype as any)._setValue = setTimeNanosecond;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { DataBufferBuilder } from './buffer.mjs';\nimport { Builder } from '../builder.mjs';\nimport { Union } from '../type.mjs';\n/** @ignore */\nexport class UnionBuilder extends Builder {\n    constructor(options) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n    get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n    append(value, childTypeId) {\n        return this.set(this.length, value, childTypeId);\n    }\n    set(index, value, childTypeId) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n    setValue(index, value, childTypeId) {\n        this._typeIds.set(index, childTypeId);\n        const childIndex = this.type.typeIdToChildIndex[childTypeId];\n        const child = this.children[childIndex];\n        child === null || child === void 0 ? void 0 : child.set(index, value);\n    }\n    addChild(child, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n    /** @ignore */\n    // @ts-ignore\n    _valueToChildTypeId(builder, value, offset) {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n/** @ignore */\nexport class SparseUnionBuilder extends UnionBuilder {\n}\n/** @ignore */\nexport class DenseUnionBuilder extends UnionBuilder {\n    constructor(options) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n    /** @ignore */\n    setValue(index, value, childTypeId) {\n        const id = this._typeIds.set(index, childTypeId).buffer[index];\n        const child = this.getChildAt(this.type.typeIdToChildIndex[id]);\n        const denseIndex = this._offsets.set(index, child.length).buffer[index];\n        child === null || child === void 0 ? void 0 : child.set(denseIndex, value);\n    }\n}\n\n//# sourceMappingURL=union.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema.js';\nimport { DataBufferBuilder } from './buffer.js';\nimport { Builder, BuilderOptions } from '../builder.js';\nimport { Union, SparseUnion, DenseUnion } from '../type.js';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        const child = this.children[childIndex];\n        child?.set(index, value);\n    }\n\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T>new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> { }\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const id = this._typeIds.set(index, childTypeId!).buffer[index];\n        const child = this.getChildAt(this.type.typeIdToChildIndex[id])!;\n        const denseIndex = this._offsets.set(index, child.length).buffer[index];\n        child?.set(denseIndex, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { BinaryBuilder } from './binary.mjs';\nimport { BufferBuilder } from './buffer.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class Utf8Builder extends VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, encodeUtf8(value));\n    }\n    // @ts-ignore\n    _flushPending(pending, pendingLength) { }\n}\nUtf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;\n\n//# sourceMappingURL=utf8.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { BinaryBuilder } from './binary.js';\nimport { BufferBuilder } from './buffer.js';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder.js';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void { }\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Data, makeData } from './data.mjs';\nimport { Table } from './table.mjs';\nimport { Vector } from './vector.mjs';\nimport { Schema, Field } from './schema.mjs';\nimport { DataType, Struct, Null } from './type.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.mjs';\n/** @ignore */\nexport class RecordBatch {\n    constructor(...args) {\n        switch (args.length) {\n            case 2: {\n                [this.schema] = args;\n                if (!(this.schema instanceof Schema)) {\n                    throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');\n                }\n                [,\n                    this.data = makeData({\n                        nullCount: 0,\n                        type: new Struct(this.schema.fields),\n                        children: this.schema.fields.map((f) => makeData({ type: f.type, nullCount: 0 }))\n                    })\n                ] = args;\n                if (!(this.data instanceof Data)) {\n                    throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');\n                }\n                [this.schema, this.data] = ensureSameLengthData(this.schema, this.data.children);\n                break;\n            }\n            case 1: {\n                const [obj] = args;\n                const { fields, children, length } = Object.keys(obj).reduce((memo, name, i) => {\n                    memo.children[i] = obj[name];\n                    memo.length = Math.max(memo.length, obj[name].length);\n                    memo.fields[i] = Field.new({ name, type: obj[name].type, nullable: true });\n                    return memo;\n                }, {\n                    length: 0,\n                    fields: new Array(),\n                    children: new Array(),\n                });\n                const schema = new Schema(fields);\n                const data = makeData({ type: new Struct(fields), length, children, nullCount: 0 });\n                [this.schema, this.data] = ensureSameLengthData(schema, data.children, length);\n                break;\n            }\n            default: throw new TypeError('RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.');\n        }\n    }\n    get dictionaries() {\n        return this._dictionaries || (this._dictionaries = collectDictionaries(this.schema.fields, this.data.children));\n    }\n    /**\n     * The number of columns in this RecordBatch.\n     */\n    get numCols() { return this.schema.fields.length; }\n    /**\n     * The number of rows in this RecordBatch.\n     */\n    get numRows() { return this.data.length; }\n    /**\n     * The number of null rows in this RecordBatch.\n     */\n    get nullCount() {\n        return this.data.nullCount;\n    }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    isValid(index) {\n        return this.data.getValid(index);\n    }\n    /**\n     * Get a row by position.\n     * @param index The index of the element to read.\n     */\n    get(index) {\n        return getVisitor.visit(this.data, index);\n    }\n    /**\n     * Set a row by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    set(index, value) {\n        return setVisitor.visit(this.data, index, value);\n    }\n    /**\n     * Retrieve the index of the first occurrence of a row in an RecordBatch.\n     * @param element The row to locate in the RecordBatch.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    indexOf(element, offset) {\n        return indexOfVisitor.visit(this.data, element, offset);\n    }\n    /**\n     * Get the size (in bytes) of a row by index.\n     * @param index The row index for which to compute the byteLength.\n     */\n    getByteLength(index) {\n        return byteLengthVisitor.visit(this.data, index);\n    }\n    /**\n     * Iterator for rows in this RecordBatch.\n     */\n    [Symbol.iterator]() {\n        return iteratorVisitor.visit(new Vector([this.data]));\n    }\n    /**\n     * Return a JavaScript Array of the RecordBatch rows.\n     * @returns An Array of RecordBatch rows.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * Combines two or more RecordBatch of the same schema.\n     * @param others Additional RecordBatch to add to the end of this RecordBatch.\n     */\n    concat(...others) {\n        return new Table(this.schema, [this, ...others]);\n    }\n    /**\n     * Return a zero-copy sub-section of this RecordBatch.\n     * @param start The beginning of the specified portion of the RecordBatch.\n     * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.\n     */\n    slice(begin, end) {\n        const [slice] = new Vector([this.data]).slice(begin, end).data;\n        return new RecordBatch(this.schema, slice);\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    getChild(name) {\n        var _b;\n        return this.getChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    getChildAt(index) {\n        if (index > -1 && index < this.schema.fields.length) {\n            return new Vector([this.data.children[index]]);\n        }\n        return null;\n    }\n    /**\n     * Sets a child Vector by name.\n     * @param name The name of the child to overwrite.\n     * @returns A new RecordBatch with the new child for the specified name.\n     */\n    setChild(name, child) {\n        var _b;\n        return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name), child);\n    }\n    setChildAt(index, child) {\n        let schema = this.schema;\n        let data = this.data;\n        if (index > -1 && index < this.numCols) {\n            if (!child) {\n                child = new Vector([makeData({ type: new Null, length: this.numRows })]);\n            }\n            const fields = schema.fields.slice();\n            const children = data.children.slice();\n            const field = fields[index].clone({ type: child.type });\n            [fields[index], children[index]] = [field, child.data[0]];\n            schema = new Schema(fields, new Map(this.schema.metadata));\n            data = makeData({ type: new Struct(fields), children });\n        }\n        return new RecordBatch(schema, data);\n    }\n    /**\n     * Construct a new RecordBatch containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new RecordBatch of columns matching the specified names.\n     */\n    select(columnNames) {\n        const schema = this.schema.select(columnNames);\n        const type = new Struct(schema.fields);\n        const children = [];\n        for (const name of columnNames) {\n            const index = this.schema.fields.findIndex((f) => f.name === name);\n            if (~index) {\n                children[index] = this.data.children[index];\n            }\n        }\n        return new RecordBatch(schema, makeData({ type, length: this.numRows, children }));\n    }\n    /**\n     * Construct a new RecordBatch containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new RecordBatch of columns matching at the specified indices.\n     */\n    selectAt(columnIndices) {\n        const schema = this.schema.selectAt(columnIndices);\n        const children = columnIndices.map((i) => this.data.children[i]).filter(Boolean);\n        const subset = makeData({ type: new Struct(schema.fields), length: this.numRows, children });\n        return new RecordBatch(schema, subset);\n    }\n}\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nRecordBatch[_a] = ((proto) => {\n    proto._nullCount = -1;\n    proto[Symbol.isConcatSpreadable] = true;\n    return 'RecordBatch';\n})(RecordBatch.prototype);\n/** @ignore */\nfunction ensureSameLengthData(schema, chunks, maxLength = chunks.reduce((max, col) => Math.max(max, col.length), 0)) {\n    var _b;\n    const fields = [...schema.fields];\n    const children = [...chunks];\n    const nullBitmapSize = ((maxLength + 63) & ~63) >> 3;\n    for (const [idx, field] of schema.fields.entries()) {\n        const chunk = chunks[idx];\n        if (!chunk || chunk.length !== maxLength) {\n            fields[idx] = field.clone({ nullable: true });\n            children[idx] = (_b = chunk === null || chunk === void 0 ? void 0 : chunk._changeLengthAndBackfillNullBitmap(maxLength)) !== null && _b !== void 0 ? _b : makeData({\n                type: field.type,\n                length: maxLength,\n                nullCount: maxLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n    return [\n        schema.assign(fields),\n        makeData({ type: new Struct(fields), length: maxLength, children })\n    ];\n}\n/** @ignore */\nfunction collectDictionaries(fields, children, dictionaries = new Map()) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        const data = children[i];\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                if (data.dictionary) {\n                    dictionaries.set(type.id, data.dictionary);\n                }\n            }\n            else if (dictionaries.get(type.id) !== data.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            collectDictionaries(type.children, data.children, dictionaries);\n        }\n    }\n    return dictionaries;\n}\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\nexport class _InternalEmptyPlaceholderRecordBatch extends RecordBatch {\n    constructor(schema) {\n        const children = schema.fields.map((f) => makeData({ type: f.type }));\n        const data = makeData({ type: new Struct(schema.fields), nullCount: 0, children });\n        super(schema, data);\n    }\n}\n\n//# sourceMappingURL=recordbatch.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, makeData } from './data.js';\nimport { Table } from './table.js';\nimport { Vector } from './vector.js';\nimport { Schema, Field } from './schema.js';\nimport { DataType, Struct, Null, TypeMap } from './type.js';\n\nimport { instance as getVisitor } from './visitor/get.js';\nimport { instance as setVisitor } from './visitor/set.js';\nimport { instance as indexOfVisitor } from './visitor/indexof.js';\nimport { instance as iteratorVisitor } from './visitor/iterator.js';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.js';\n\n/** @ignore */\nexport interface RecordBatch<T extends TypeMap = any> {\n    ///\n    // Virtual properties for the TypeScript compiler.\n    // These do not exist at runtime.\n    ///\n    readonly TType: Struct<T>;\n    readonly TArray: Struct<T>['TArray'];\n    readonly TValue: Struct<T>['TValue'];\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n     */\n    [Symbol.isConcatSpreadable]: true;\n}\n\n/** @ignore */\nexport class RecordBatch<T extends TypeMap = any> {\n\n    constructor(columns: { [P in keyof T]: Data<T[P]> });\n    constructor(schema: Schema<T>, data?: Data<Struct<T>>);\n    constructor(...args: any[]) {\n        switch (args.length) {\n            case 2: {\n                [this.schema] = args;\n                if (!(this.schema instanceof Schema)) {\n                    throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');\n                }\n                [,\n                    this.data = makeData({\n                        nullCount: 0,\n                        type: new Struct<T>(this.schema.fields),\n                        children: this.schema.fields.map((f) => makeData({ type: f.type, nullCount: 0 }))\n                    })\n                ] = args;\n                if (!(this.data instanceof Data)) {\n                    throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');\n                }\n                [this.schema, this.data] = ensureSameLengthData<T>(this.schema, this.data.children as Data<T[keyof T]>[]);\n                break;\n            }\n            case 1: {\n                const [obj] = args;\n                const { fields, children, length } = Object.keys(obj).reduce((memo, name, i) => {\n                    memo.children[i] = obj[name];\n                    memo.length = Math.max(memo.length, obj[name].length);\n                    memo.fields[i] = Field.new({ name, type: obj[name].type, nullable: true });\n                    return memo;\n                }, {\n                    length: 0,\n                    fields: new Array<Field<T[keyof T]>>(),\n                    children: new Array<Data<T[keyof T]>>(),\n                });\n\n                const schema = new Schema<T>(fields);\n                const data = makeData({ type: new Struct<T>(fields), length, children, nullCount: 0 });\n                [this.schema, this.data] = ensureSameLengthData<T>(schema, data.children as Data<T[keyof T]>[], length);\n                break;\n            }\n            default: throw new TypeError('RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.');\n        }\n    }\n\n    protected _dictionaries?: Map<number, Vector>;\n\n    public readonly schema: Schema<T>;\n    public readonly data: Data<Struct<T>>;\n\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = collectDictionaries(this.schema.fields, this.data.children));\n    }\n\n    /**\n     * The number of columns in this RecordBatch.\n     */\n    public get numCols() { return this.schema.fields.length; }\n\n    /**\n     * The number of rows in this RecordBatch.\n     */\n    public get numRows() { return this.data.length; }\n\n    /**\n     * The number of null rows in this RecordBatch.\n     */\n    public get nullCount() {\n        return this.data.nullCount;\n    }\n\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    public isValid(index: number) {\n        return this.data.getValid(index);\n    }\n\n    /**\n     * Get a row by position.\n     * @param index The index of the element to read.\n     */\n    public get(index: number) {\n        return getVisitor.visit(this.data, index);\n    }\n\n    /**\n     * Set a row by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    public set(index: number, value: Struct<T>['TValue']) {\n        return setVisitor.visit(this.data, index, value);\n    }\n\n    /**\n     * Retrieve the index of the first occurrence of a row in an RecordBatch.\n     * @param element The row to locate in the RecordBatch.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    public indexOf(element: Struct<T>['TValue'], offset?: number): number {\n        return indexOfVisitor.visit(this.data, element, offset);\n    }\n\n    /**\n     * Get the size (in bytes) of a row by index.\n     * @param index The row index for which to compute the byteLength.\n     */\n    public getByteLength(index: number): number {\n        return byteLengthVisitor.visit(this.data, index);\n    }\n\n    /**\n     * Iterator for rows in this RecordBatch.\n     */\n    public [Symbol.iterator]() {\n        return iteratorVisitor.visit(new Vector([this.data])) as IterableIterator<Struct<T>['TValue']>;\n    }\n\n    /**\n     * Return a JavaScript Array of the RecordBatch rows.\n     * @returns An Array of RecordBatch rows.\n     */\n    public toArray() {\n        return [...this];\n    }\n\n    /**\n     * Combines two or more RecordBatch of the same schema.\n     * @param others Additional RecordBatch to add to the end of this RecordBatch.\n     */\n    public concat(...others: RecordBatch<T>[]) {\n        return new Table(this.schema, [this, ...others]);\n    }\n\n    /**\n     * Return a zero-copy sub-section of this RecordBatch.\n     * @param start The beginning of the specified portion of the RecordBatch.\n     * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.\n     */\n    public slice(begin?: number, end?: number): RecordBatch<T> {\n        const [slice] = new Vector([this.data]).slice(begin, end).data;\n        return new RecordBatch(this.schema, slice);\n    }\n\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    public getChild<P extends keyof T>(name: P) {\n        return this.getChildAt<T[P]>(this.schema.fields?.findIndex((f) => f.name === name));\n    }\n\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        if (index > -1 && index < this.schema.fields.length) {\n            return new Vector([this.data.children[index]]) as Vector<R>;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a child Vector by name.\n     * @param name The name of the child to overwrite.\n     * @returns A new RecordBatch with the new child for the specified name.\n     */\n    public setChild<P extends keyof T, R extends DataType>(name: P, child: Vector<R>) {\n        return this.setChildAt(this.schema.fields?.findIndex((f) => f.name === name), child) as RecordBatch<T & { [K in P]: R }>;\n    }\n\n    /**\n     * Sets a child Vector by index.\n     * @param index The index of the child to overwrite.\n     * @returns A new RecordBatch with the new child at the specified index.\n     */\n    public setChildAt(index: number, child?: null): RecordBatch;\n    public setChildAt<R extends DataType = any>(index: number, child: Vector<R>): RecordBatch;\n    public setChildAt(index: number, child: any) {\n        let schema: Schema = this.schema;\n        let data: Data<Struct> = this.data;\n        if (index > -1 && index < this.numCols) {\n            if (!child) {\n                child = new Vector([makeData({ type: new Null, length: this.numRows })]);\n            }\n            const fields = schema.fields.slice() as Field<any>[];\n            const children = data.children.slice() as Data<any>[];\n            const field = fields[index].clone({ type: child.type });\n            [fields[index], children[index]] = [field, child.data[0]];\n            schema = new Schema(fields, new Map(this.schema.metadata));\n            data = makeData({ type: new Struct<T>(fields), children });\n        }\n        return new RecordBatch(schema, data);\n    }\n\n    /**\n     * Construct a new RecordBatch containing only specified columns.\n     *\n     * @param columnNames Names of columns to keep.\n     * @returns A new RecordBatch of columns matching the specified names.\n     */\n    public select<K extends keyof T = any>(columnNames: K[]) {\n        const schema = this.schema.select(columnNames);\n        const type = new Struct(schema.fields);\n        const children = [] as Data<T[K]>[];\n        for (const name of columnNames) {\n            const index = this.schema.fields.findIndex((f) => f.name === name);\n            if (~index) {\n                children[index] = this.data.children[index] as Data<T[K]>;\n            }\n        }\n        return new RecordBatch(schema, makeData({ type, length: this.numRows, children }));\n    }\n\n    /**\n     * Construct a new RecordBatch containing only columns at the specified indices.\n     *\n     * @param columnIndices Indices of columns to keep.\n     * @returns A new RecordBatch of columns matching at the specified indices.\n     */\n    public selectAt<K extends T = any>(columnIndices: number[]) {\n        const schema = this.schema.selectAt<K>(columnIndices);\n        const children = columnIndices.map((i) => this.data.children[i]).filter(Boolean);\n        const subset = makeData({ type: new Struct(schema.fields), length: this.numRows, children });\n        return new RecordBatch<{ [P in keyof K]: K[P] }>(schema, subset);\n    }\n\n    // Initialize this static property via an IIFE so bundlers don't tree-shake\n    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n    protected static [Symbol.toStringTag] = ((proto: RecordBatch) => {\n        (proto as any)._nullCount = -1;\n        (proto as any)[Symbol.isConcatSpreadable] = true;\n        return 'RecordBatch';\n    })(RecordBatch.prototype);\n}\n\n\n/** @ignore */\nfunction ensureSameLengthData<T extends TypeMap = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    maxLength = chunks.reduce((max, col) => Math.max(max, col.length), 0)\n) {\n    const fields = [...schema.fields];\n    const children = [...chunks] as Data<T[keyof T]>[];\n    const nullBitmapSize = ((maxLength + 63) & ~63) >> 3;\n\n    for (const [idx, field] of schema.fields.entries()) {\n        const chunk = chunks[idx];\n        if (!chunk || chunk.length !== maxLength) {\n            fields[idx] = field.clone({ nullable: true });\n            children[idx] = chunk?._changeLengthAndBackfillNullBitmap(maxLength) ?? makeData({\n                type: field.type,\n                length: maxLength,\n                nullCount: maxLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n\n    return [\n        schema.assign(fields),\n        makeData({ type: new Struct<T>(fields), length: maxLength, children })\n    ] as [Schema<T>, Data<Struct<T>>];\n}\n\n/** @ignore */\nfunction collectDictionaries(fields: Field[], children: Data[], dictionaries = new Map<number, Vector>()): Map<number, Vector> {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        const data = children[i];\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                if (data.dictionary) {\n                    dictionaries.set(type.id, data.dictionary);\n                }\n            } else if (dictionaries.get(type.id) !== data.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            collectDictionaries(type.children, data.children, dictionaries);\n        }\n    }\n    return dictionaries;\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends TypeMap = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        const children = schema.fields.map((f) => makeData({ type: f.type }));\n        const data = makeData({ type: new Struct<T>(schema.fields), nullCount: 0, children });\n        super(schema, data);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas(schema, other) {\n        return (schema === other) || (other instanceof schema.constructor &&\n            this.compareManyFields(schema.fields, other.fields));\n    }\n    compareManyFields(fields, others) {\n        return (fields === others) || (Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => this.compareFields(f, others[i])));\n    }\n    compareFields(field, other) {\n        return (field === other) || (other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            this.visit(field.type, other.type));\n    }\n}\nfunction compareConstructor(type, other) {\n    return other instanceof type.constructor;\n}\nfunction compareAny(type, other) {\n    return (type === other) || compareConstructor(type, other);\n}\nfunction compareInt(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned);\n}\nfunction compareFloat(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.precision === other.precision);\n}\nfunction compareFixedSizeBinary(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth);\n}\nfunction compareDate(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit);\n}\nfunction compareTimestamp(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone);\n}\nfunction compareTime(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth);\n}\nfunction compareList(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children));\n}\nfunction compareStruct(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children));\n}\nfunction compareUnion(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareManyFields(type.children, other.children));\n}\nfunction compareDictionary(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary));\n}\nfunction compareInterval(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit);\n}\nfunction compareFixedSizeList(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children));\n}\nfunction compareMap(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children));\n}\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n/** @ignore */\nexport const instance = new TypeComparator();\nexport function compareSchemas(schema, other) {\n    return instance.compareSchemas(schema, other);\n}\nexport function compareFields(field, other) {\n    return instance.compareFields(field, other);\n}\nexport function compareTypes(type, other) {\n    return instance.visit(type, other);\n}\n\n//# sourceMappingURL=typecomparator.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { Schema, Field } from '../schema.js';\nimport {\n    DataType, TypeMap, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull<T extends Null>(type: T, other?: DataType | null): other is T;\n    visitBool<T extends Bool>(type: T, other?: DataType | null): other is T;\n    visitInt<T extends Int>(type: T, other?: DataType | null): other is T;\n    visitInt8<T extends Int8>(type: T, other?: DataType | null): other is T;\n    visitInt16<T extends Int16>(type: T, other?: DataType | null): other is T;\n    visitInt32<T extends Int32>(type: T, other?: DataType | null): other is T;\n    visitInt64<T extends Int64>(type: T, other?: DataType | null): other is T;\n    visitUint8<T extends Uint8>(type: T, other?: DataType | null): other is T;\n    visitUint16<T extends Uint16>(type: T, other?: DataType | null): other is T;\n    visitUint32<T extends Uint32>(type: T, other?: DataType | null): other is T;\n    visitUint64<T extends Uint64>(type: T, other?: DataType | null): other is T;\n    visitFloat<T extends Float>(type: T, other?: DataType | null): other is T;\n    visitFloat16<T extends Float16>(type: T, other?: DataType | null): other is T;\n    visitFloat32<T extends Float32>(type: T, other?: DataType | null): other is T;\n    visitFloat64<T extends Float64>(type: T, other?: DataType | null): other is T;\n    visitUtf8<T extends Utf8>(type: T, other?: DataType | null): other is T;\n    visitBinary<T extends Binary>(type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T;\n    visitDate<T extends Date_>(type: T, other?: DataType | null): other is T;\n    visitDateDay<T extends DateDay>(type: T, other?: DataType | null): other is T;\n    visitDateMillisecond<T extends DateMillisecond>(type: T, other?: DataType | null): other is T;\n    visitTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T;\n    visitTimestampSecond<T extends TimestampSecond>(type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(type: T, other?: DataType | null): other is T;\n    visitTime<T extends Time>(type: T, other?: DataType | null): other is T;\n    visitTimeSecond<T extends TimeSecond>(type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond<T extends TimeMillisecond>(type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond<T extends TimeNanosecond>(type: T, other?: DataType | null): other is T;\n    visitDecimal<T extends Decimal>(type: T, other?: DataType | null): other is T;\n    visitList<T extends List>(type: T, other?: DataType | null): other is T;\n    visitStruct<T extends Struct>(type: T, other?: DataType | null): other is T;\n    visitUnion<T extends Union>(type: T, other?: DataType | null): other is T;\n    visitDenseUnion<T extends DenseUnion>(type: T, other?: DataType | null): other is T;\n    visitSparseUnion<T extends SparseUnion>(type: T, other?: DataType | null): other is T;\n    visitDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T;\n    visitInterval<T extends Interval>(type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime<T extends IntervalDayTime>(type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(type: T, other?: DataType | null): other is T;\n    visitFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T;\n    visitMap<T extends Map_>(type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends TypeMap>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            this.compareManyFields(schema.fields, other.fields)\n        );\n    }\n    compareManyFields<T extends TypeMap>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => this.compareFields(f, others[i]))\n        );\n    }\n    compareFields<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            this.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any>type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n\nexport function compareSchemas<T extends TypeMap>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n    return instance.compareSchemas(schema, other);\n}\n\nexport function compareFields<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n    return instance.compareFields(field, other);\n}\n\nexport function compareTypes<A extends DataType = any>(type: A, other?: DataType): other is A {\n    return instance.visit(type, other);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { makeData } from '../data.mjs';\nimport { Struct } from '../type.mjs';\nimport { RecordBatch } from '../recordbatch.mjs';\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches(schema, vecs) {\n    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v.data.concat()));\n}\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {\n    const fields = [...schema.fields];\n    const batches = [];\n    const memo = { numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0) };\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = cols.length;\n    let child, children = [];\n    while (memo.numBatches-- > 0) {\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            children[i] = child = cols[i].shift();\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n        if (Number.isFinite(batchLength)) {\n            children = distributeChildren(fields, batchLength, children, cols, memo);\n            if (batchLength > 0) {\n                batches[numBatches++] = makeData({\n                    type: new Struct(fields),\n                    length: batchLength,\n                    nullCount: 0,\n                    children: children.slice()\n                });\n            }\n        }\n    }\n    return [\n        schema = schema.assign(fields),\n        batches.map((data) => new RecordBatch(schema, data))\n    ];\n}\n/** @ignore */\nfunction distributeChildren(fields, batchLength, children, columns, memo) {\n    var _a;\n    const nullBitmapSize = ((batchLength + 63) & ~63) >> 3;\n    for (let i = -1, n = columns.length; ++i < n;) {\n        const child = children[i];\n        const length = child === null || child === void 0 ? void 0 : child.length;\n        if (length >= batchLength) {\n            if (length === batchLength) {\n                children[i] = child;\n            }\n            else {\n                children[i] = child.slice(0, batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(child.slice(batchLength, length - batchLength)));\n            }\n        }\n        else {\n            const field = fields[i];\n            fields[i] = field.clone({ nullable: true });\n            children[i] = (_a = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a !== void 0 ? _a : makeData({\n                type: field.type,\n                length: batchLength,\n                nullCount: batchLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n    return children;\n}\n\n//# sourceMappingURL=recordbatch.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector.js';\nimport { Data, makeData } from '../data.js';\nimport { Struct, TypeMap } from '../type.js';\nimport { Schema, Field } from '../schema.js';\nimport { RecordBatch } from '../recordbatch.js';\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends TypeMap = any>(schema: Schema<T>, vecs: Vector<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v.data.concat()));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends TypeMap = any>(schema: Schema<T>, cols: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batches = [] as Data<Struct<T>>[];\n    const memo = { numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = cols.length;\n    let child: Data<T[keyof T]>, children: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            children[i] = child = cols[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (Number.isFinite(batchLength)) {\n            children = distributeChildren(fields, batchLength, children, cols, memo);\n            if (batchLength > 0) {\n                batches[numBatches++] = makeData({\n                    type: new Struct(fields),\n                    length: batchLength,\n                    nullCount: 0,\n                    children: children.slice()\n                });\n            }\n        }\n    }\n\n    return [\n        schema = schema.assign(fields),\n        batches.map((data) => new RecordBatch(schema, data))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildren<T extends TypeMap = any>(\n    fields: Field<T[keyof T]>[],\n    batchLength: number,\n    children: Data<T[keyof T]>[],\n    columns: Data<T[keyof T]>[][],\n    memo: { numBatches: number }\n) {\n    const nullBitmapSize = ((batchLength + 63) & ~63) >> 3;\n    for (let i = -1, n = columns.length; ++i < n;) {\n        const child = children[i];\n        const length = child?.length;\n        if (length >= batchLength) {\n            if (length === batchLength) {\n                children[i] = child;\n            } else {\n                children[i] = child.slice(0, batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(\n                    child.slice(batchLength, length - batchLength)\n                ));\n            }\n        } else {\n            const field = fields[i];\n            fields[i] = field.clone({ nullable: true });\n            children[i] = child?._changeLengthAndBackfillNullBitmap(batchLength) ?? makeData({\n                type: field.type,\n                length: batchLength,\n                nullCount: batchLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            }) as Data<T[keyof T]>;\n        }\n    }\n    return children;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from \"tslib\";\nimport { makeData } from '../data.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Struct } from '../type.mjs';\nimport { MessageHeader } from '../enum.mjs';\nimport { Footer } from './metadata/file.mjs';\nimport streamAdapters from '../io/adapters.mjs';\nimport { ByteStream, AsyncByteStream } from '../io/stream.mjs';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file.mjs';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader.mjs';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.mjs';\nimport { ITERATOR_DONE, ReadableInterop, } from '../io/interfaces.mjs';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message.mjs';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat.mjs';\nexport class RecordBatchReader extends ReadableInterop {\n    constructor(impl) {\n        super();\n        this._impl = impl;\n    }\n    get closed() { return this._impl.closed; }\n    get schema() { return this._impl.schema; }\n    get autoDestroy() { return this._impl.autoDestroy; }\n    get dictionaries() { return this._impl.dictionaries; }\n    get numDictionaries() { return this._impl.numDictionaries; }\n    get numRecordBatches() { return this._impl.numRecordBatches; }\n    get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n    isSync() { return this._impl.isSync(); }\n    isAsync() { return this._impl.isAsync(); }\n    isFile() { return this._impl.isFile(); }\n    isStream() { return this._impl.isStream(); }\n    next() {\n        return this._impl.next();\n    }\n    throw(value) {\n        return this._impl.throw(value);\n    }\n    return(value) {\n        return this._impl.return(value);\n    }\n    cancel() {\n        return this._impl.cancel();\n    }\n    reset(schema) {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    open(options) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    readRecordBatch(index) {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    [Symbol.iterator]() {\n        return this._impl[Symbol.iterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return this._impl[Symbol.asyncIterator]();\n    }\n    toDOMStream() {\n        return streamAdapters.toDOMStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }));\n    }\n    toNodeStream() {\n        return streamAdapters.toNodeStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }), { objectMode: true });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static from(source) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        }\n        else if (isArrowJSON(source)) {\n            return fromArrowJSON(source);\n        }\n        else if (isFileHandle(source)) {\n            return fromFileHandle(source);\n        }\n        else if (isPromise(source)) {\n            return (() => __awaiter(this, void 0, void 0, function* () { return yield RecordBatchReader.from(yield source); }))();\n        }\n        else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream(new AsyncByteStream(source));\n        }\n        return fromByteStream(new ByteStream(source));\n    }\n    /** @nocollapse */\n    static readAll(source) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source);\n        }\n        else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n            return readAllSync(source);\n        }\n        return readAllAsync(source);\n    }\n}\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport class RecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    readAll() { return [...this]; }\n    [Symbol.iterator]() { return this._impl[Symbol.iterator](); }\n    [Symbol.asyncIterator]() { return __asyncGenerator(this, arguments, function* _a() { yield __await(yield* __asyncDelegator(__asyncValues(this[Symbol.iterator]()))); }); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    readAll() {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const batches = new Array();\n            try {\n                for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {\n                    const batch = _c.value;\n                    batches.push(batch);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return batches;\n        });\n    }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    [Symbol.asyncIterator]() { return this._impl[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader extends RecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\n/** @ignore */\nclass RecordBatchReaderImpl {\n    constructor(dictionaries = new Map()) {\n        this.closed = false;\n        this.autoDestroy = true;\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() { return this._dictionaryIndex; }\n    get numRecordBatches() { return this._recordBatchIndex; }\n    isSync() { return false; }\n    isAsync() { return false; }\n    isFile() { return false; }\n    isStream() { return false; }\n    reset(schema) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        const children = this._loadVectors(header, body, this.schema.fields);\n        const data = makeData({ type: new Struct(this.schema.fields), length: header.length, children });\n        return new RecordBatch(this.schema, data);\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id, isDelta } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id);\n            const data = this._loadVectors(header.data, body, [type]);\n            return (dictionary && isDelta ? dictionary.concat(new Vector(data)) :\n                new Vector(data)).memoize();\n        }\n        return dictionary.memoize();\n    }\n    _loadVectors(header, body, types) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n/** @ignore */\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n    isSync() { return true; }\n    isStream() { return true; }\n    [Symbol.iterator]() {\n        return this;\n    }\n    cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    open(options) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message;\n        const { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };\n        }\n        return this.return();\n    }\n    _readNextMessageAndValidate(type) {\n        return this._reader.readMessage(type);\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    isAsync() { return true; }\n    isStream() { return true; }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    cancel() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && (this.closed = true)) {\n                yield this.reset()._reader.return();\n                this._reader = null;\n                this.dictionaries = null;\n            }\n        });\n    }\n    open(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.closed) {\n                this.autoDestroy = shouldAutoDestroy(this, options);\n                if (!(this.schema || (this.schema = (yield this._reader.readSchema())))) {\n                    yield this.cancel();\n                }\n            }\n            return this;\n        });\n    }\n    throw(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && this.autoDestroy && (this.closed = true)) {\n                return yield this.reset()._reader.throw(value);\n            }\n            return ITERATOR_DONE;\n        });\n    }\n    return(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && this.autoDestroy && (this.closed = true)) {\n                return yield this.reset()._reader.return(value);\n            }\n            return ITERATOR_DONE;\n        });\n    }\n    next() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.closed) {\n                return ITERATOR_DONE;\n            }\n            let message;\n            const { _reader: reader } = this;\n            while (message = yield this._readNextMessageAndValidate()) {\n                if (message.isSchema()) {\n                    yield this.reset(message.header());\n                }\n                else if (message.isRecordBatch()) {\n                    this._recordBatchIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return { done: false, value: recordBatch };\n                }\n                else if (message.isDictionaryBatch()) {\n                    this._dictionaryIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n            if (this.schema && this._recordBatchIndex === 0) {\n                this._recordBatchIndex++;\n                return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };\n            }\n            return yield this.return();\n        });\n    }\n    _readNextMessageAndValidate(type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this._reader.readMessage(type);\n        });\n    }\n}\n/** @ignore */\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isSync() { return true; }\n    isFile() { return true; }\n    open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    readRecordBatch(index) {\n        var _a;\n        if (this.closed) {\n            return null;\n        }\n        if (!this._footer) {\n            this.open();\n        }\n        const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    _readDictionaryBatch(index) {\n        var _a;\n        const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    _readNextMessageAndValidate(type) {\n        var _a;\n        if (!this._footer) {\n            this.open();\n        }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n    constructor(source, ...rest) {\n        const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isFile() { return true; }\n    isAsync() { return true; }\n    open(options) {\n        const _super = Object.create(null, {\n            open: { get: () => super.open }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && !this._footer) {\n                this.schema = (this._footer = yield this._readFooter()).schema;\n                for (const block of this._footer.dictionaryBatches()) {\n                    block && (yield this._readDictionaryBatch(this._dictionaryIndex++));\n                }\n            }\n            return yield _super.open.call(this, options);\n        });\n    }\n    readRecordBatch(index) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.closed) {\n                return null;\n            }\n            if (!this._footer) {\n                yield this.open();\n            }\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n            if (block && (yield this._handle.seek(block.offset))) {\n                const message = yield this._reader.readMessage(MessageHeader.RecordBatch);\n                if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {\n                    const header = message.header();\n                    const buffer = yield this._reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return recordBatch;\n                }\n            }\n            return null;\n        });\n    }\n    _readDictionaryBatch(index) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n            if (block && (yield this._handle.seek(block.offset))) {\n                const message = yield this._reader.readMessage(MessageHeader.DictionaryBatch);\n                if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {\n                    const header = message.header();\n                    const buffer = yield this._reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n        });\n    }\n    _readFooter() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { _handle } = this;\n            _handle._pending && (yield _handle._pending);\n            const offset = _handle.size - magicAndPadding;\n            const length = yield _handle.readInt32(offset);\n            const buffer = yield _handle.readAt(offset - length, length);\n            return Footer.decode(buffer);\n        });\n    }\n    _readNextMessageAndValidate(type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._footer) {\n                yield this.open();\n            }\n            if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n                const block = this._footer.getRecordBatch(this._recordBatchIndex);\n                if (block && (yield this._handle.seek(block.offset))) {\n                    return yield this._reader.readMessage(type);\n                }\n            }\n            return null;\n        });\n    }\n}\n/** @ignore */\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source, dictionaries);\n    }\n    _loadVectors(header, body, types) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction* readAllSync(source) {\n    const reader = RecordBatchReader.from(source);\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do {\n                yield reader;\n            } while (!(reader.reset().open()).closed);\n        }\n    }\n    finally {\n        reader.cancel();\n    }\n}\n/** @ignore */\nfunction readAllAsync(source) {\n    return __asyncGenerator(this, arguments, function* readAllAsync_1() {\n        const reader = yield __await(RecordBatchReader.from(source));\n        try {\n            if (!(yield __await(reader.open({ autoDestroy: false }))).closed) {\n                do {\n                    yield yield __await(reader);\n                } while (!(yield __await(reader.reset().open())).closed);\n            }\n        }\n        finally {\n            yield __await(reader.cancel());\n        }\n    });\n}\n/** @ignore */\nfunction fromArrowJSON(source) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () { }()));\n}\n/** @ignore */\nfunction fromAsyncByteStream(source) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bytes = yield source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n            ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source))\n            : new RecordBatchFileReader(new RecordBatchFileReaderImpl(yield source.read()))\n            : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function () { return __asyncGenerator(this, arguments, function* () { }); }()));\n    });\n}\n/** @ignore */\nfunction fromFileHandle(source) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { size } = yield source.stat();\n        const file = new AsyncRandomAccessFile(source, size);\n        if (size >= magicX2AndPadding && checkForMagicArrowString(yield file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));\n        }\n        return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));\n    });\n}\n\n//# sourceMappingURL=reader.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { makeData } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { DataType, Struct, TypeMap } from '../type.js';\nimport { MessageHeader } from '../enum.js';\nimport { Footer } from './metadata/file.js';\nimport { Schema, Field } from '../schema.js';\nimport streamAdapters from '../io/adapters.js';\nimport { Message } from './metadata/message.js';\nimport * as metadata from './metadata/message.js';\nimport { ArrayBufferViewInput } from '../util/buffer.js';\nimport { ByteStream, AsyncByteStream } from '../io/stream.js';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file.js';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader.js';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.js';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces.js';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message.js';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat.js';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean };\n/** @ignore */ type RecordBatchReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends TypeMap = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends TypeMap = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends TypeMap = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>>this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>>this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends TypeMap>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>; readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends TypeMap = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends TypeMap = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends TypeMap = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg4): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends TypeMap = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends TypeMap = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg4): AsyncIterableIterator<AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchReaders<T>>;\n    /** @nocollapse */\n    public static readAll<T extends TypeMap = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super(_impl); }\n    public readAll() { return [...this]; }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super(_impl); }\n    public async readAll() {\n        const batches = new Array<RecordBatch<T>>();\n        for await (const batch of this) { batches.push(batch); }\n        return batches;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends TypeMap = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super(_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends TypeMap = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super(_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends TypeMap = any> extends RecordBatchStreamReader<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends TypeMap = any> extends AsyncRecordBatchStreamReader<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends TypeMap = any> =\n    RecordBatchJSONReaderImpl<T> |\n    RecordBatchFileReaderImpl<T> |\n    RecordBatchStreamReaderImpl<T> |\n    AsyncRecordBatchFileReaderImpl<T> |\n    AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends TypeMap = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends TypeMap = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends TypeMap = any> implements RecordBatchReaderImpl<T> {\n\n    declare public schema: Schema<T>;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any>schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        const children = this._loadVectors(header, body, this.schema.fields);\n        const data = makeData({ type: new Struct(this.schema.fields), length: header.length, children });\n        return new RecordBatch(this.schema, data);\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            const data = this._loadVectors(header.data, body, [type]);\n            return (dictionary && isDelta ? dictionary.concat(\n                new Vector(data)) :\n                new Vector(data)).memoize() as Vector;\n        }\n        return dictionary.memoize();\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any>null;\n            this.dictionaries = <any>null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any>null;\n            this.dictionaries = <any>null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n\n    protected _footer?: Footer;\n    declare protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer?.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message?.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer?.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message?.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer?.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends TypeMap = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    declare protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number>rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>>rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer?.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message?.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer?.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message?.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends TypeMap = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any>source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends TypeMap = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any>source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends TypeMap>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends TypeMap>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function* (): any { }()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends TypeMap>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function* (): any { }()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends TypeMap>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding && checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n        return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Block as _Block } from '../../fb/block.mjs';\nimport { Footer as _Footer } from '../../fb/footer.mjs';\nimport * as flatbuffers from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Schema } from '../../schema.mjs';\nimport { MetadataVersion } from '../../enum.mjs';\nimport { toUint8Array } from '../../util/buffer.mjs';\n/** @ignore */\nclass Footer_ {\n    constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema());\n        return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n    static encode(footer) {\n        const b = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        for (const rb of [...footer.recordBatches()].slice().reverse()) {\n            FileBlock.encode(b, rb);\n        }\n        const recordBatchesOffset = b.endVector();\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        for (const db of [...footer.dictionaryBatches()].slice().reverse()) {\n            FileBlock.encode(b, db);\n        }\n        const dictionaryBatchesOffset = b.endVector();\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() { return this._recordBatches.length; }\n    get numDictionaries() { return this._dictionaryBatches.length; }\n    *recordBatches() {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    *dictionaryBatches() {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    getRecordBatch(index) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\nexport { Footer_ as Footer };\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n    constructor(schema, _footer) {\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    get numDictionaries() { return this._footer.dictionariesLength(); }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nexport class FileBlock {\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static decode(block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n    static encode(b, fileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n}\n\n//# sourceMappingURL=file.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Block as _Block } from '../../fb/block.js';\nimport { Footer as _Footer } from '../../fb/footer.js';\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport { Schema } from '../../schema.js';\nimport { MetadataVersion } from '../../enum.js';\nimport { toUint8Array } from '../../util/buffer.js';\nimport { ArrayBufferViewInput } from '../../util/buffer.js';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        for (const rb of [...footer.recordBatches()].slice().reverse()) {\n            FileBlock.encode(b, rb);\n        }\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        for (const db of [...footer.dictionaryBatches()].slice().reverse()) {\n            FileBlock.encode(b, db);\n        }\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    declare protected _recordBatches: FileBlock[];\n    declare protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n        public version: MetadataVersion = MetadataVersion.V4,\n        recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport class Block {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     */\n    offset() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * Length of the metadata\n     */\n    metaDataLength() {\n        return this.bb.readInt32(this.bb_pos + 8);\n    }\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metadata).\n     */\n    bodyLength() {\n        return this.bb.readInt64(this.bb_pos + 16);\n    }\n    static sizeOf() {\n        return 24;\n    }\n    static createBlock(builder, offset, metaDataLength, bodyLength) {\n        builder.prep(8, 24);\n        builder.writeInt64(bodyLength);\n        builder.pad(4);\n        builder.writeInt32(metaDataLength);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n}\n\n//# sourceMappingURL=block.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class Block {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Block {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\n/**\n * Index to the start of the RecordBlock (note this is past the Message header)\n */\noffset():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos);\n}\n\n/**\n * Length of the metadata\n */\nmetaDataLength():number {\n  return this.bb!.readInt32(this.bb_pos + 8);\n}\n\n/**\n * Length of the data (this is aligned so there can be a gap between this and\n * the metadata).\n */\nbodyLength():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos + 16);\n}\n\nstatic sizeOf():number {\n  return 24;\n}\n\nstatic createBlock(builder:flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long):flatbuffers.Offset {\n  builder.prep(8, 24);\n  builder.writeInt64(bodyLength);\n  builder.pad(4);\n  builder.writeInt32(metaDataLength);\n  builder.writeInt64(offset);\n  return builder.offset();\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Block } from './block.mjs';\nimport { KeyValue } from './key-value.mjs';\nimport { MetadataVersion } from './metadata-version.mjs';\nimport { Schema } from './schema.mjs';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n */\nexport class Footer {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFooter(bb, obj) {\n        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFooter(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    version() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : MetadataVersion.V1;\n    }\n    schema(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Schema()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    dictionaries(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n    dictionariesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    recordBatches(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n    recordBatchesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * User-defined metadata\n     */\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startFooter(builder) {\n        builder.startObject(5);\n    }\n    static addVersion(builder, version) {\n        builder.addFieldInt16(0, version, MetadataVersion.V1);\n    }\n    static addSchema(builder, schemaOffset) {\n        builder.addFieldOffset(1, schemaOffset, 0);\n    }\n    static addDictionaries(builder, dictionariesOffset) {\n        builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n    static startDictionariesVector(builder, numElems) {\n        builder.startVector(24, numElems, 8);\n    }\n    static addRecordBatches(builder, recordBatchesOffset) {\n        builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n    static startRecordBatchesVector(builder, numElems) {\n        builder.startVector(24, numElems, 8);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endFooter(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishFooterBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedFooterBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n//# sourceMappingURL=footer.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Block } from './block.js';\nimport { KeyValue } from './key-value.js';\nimport { MetadataVersion } from './metadata-version.js';\nimport { Schema } from './schema.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n */\nexport class Footer {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Footer {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsFooter(bb:flatbuffers.ByteBuffer, obj?:Footer):Footer {\n  return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsFooter(bb:flatbuffers.ByteBuffer, obj?:Footer):Footer {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nversion():MetadataVersion {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : MetadataVersion.V1;\n}\n\nschema(obj?:Schema):Schema|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Schema()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\ndictionaries(index: number, obj?:Block):Block|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Block()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n}\n\ndictionariesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nrecordBatches(index: number, obj?:Block):Block|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? (obj || new Block()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n}\n\nrecordBatchesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * User-defined metadata\n */\ncustomMetadata(index: number, obj?:KeyValue):KeyValue|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncustomMetadataLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startFooter(builder:flatbuffers.Builder) {\n  builder.startObject(5);\n}\n\nstatic addVersion(builder:flatbuffers.Builder, version:MetadataVersion) {\n  builder.addFieldInt16(0, version, MetadataVersion.V1);\n}\n\nstatic addSchema(builder:flatbuffers.Builder, schemaOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, schemaOffset, 0);\n}\n\nstatic addDictionaries(builder:flatbuffers.Builder, dictionariesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, dictionariesOffset, 0);\n}\n\nstatic startDictionariesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(24, numElems, 8);\n}\n\nstatic addRecordBatches(builder:flatbuffers.Builder, recordBatchesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, recordBatchesOffset, 0);\n}\n\nstatic startRecordBatchesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(24, numElems, 8);\n}\n\nstatic addCustomMetadata(builder:flatbuffers.Builder, customMetadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, customMetadataOffset, 0);\n}\n\nstatic createCustomMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startCustomMetadataVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endFooter(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic finishFooterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedFooterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\n}\n","export { SIZEOF_SHORT } from './constants';\r\nexport { SIZEOF_INT } from './constants';\r\nexport { FILE_IDENTIFIER_LENGTH } from './constants';\r\nexport { SIZE_PREFIX_LENGTH } from './constants';\r\nexport { int32, float32, float64, isLittleEndian } from './utils';\r\nexport { Long, createLong } from './long';\r\nexport { Encoding } from './encoding';\r\nexport { Builder } from './builder';\r\nexport { ByteBuffer } from './byte-buffer';\r\n","export const SIZEOF_SHORT = 2;\r\nexport const SIZEOF_INT = 4;\r\nexport const FILE_IDENTIFIER_LENGTH = 4;\r\nexport const SIZE_PREFIX_LENGTH = 4;\r\n","export const int32 = new Int32Array(2);\r\nexport const float32 = new Float32Array(int32.buffer);\r\nexport const float64 = new Float64Array(int32.buffer);\r\nexport const isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\r\n","export function createLong(low, high) {\r\n    return Long.create(low, high);\r\n}\r\nexport class Long {\r\n    constructor(low, high) {\r\n        this.low = low | 0;\r\n        this.high = high | 0;\r\n    }\r\n    static create(low, high) {\r\n        // Special-case zero to avoid GC overhead for default values\r\n        return low == 0 && high == 0 ? Long.ZERO : new Long(low, high);\r\n    }\r\n    toFloat64() {\r\n        return (this.low >>> 0) + this.high * 0x100000000;\r\n    }\r\n    equals(other) {\r\n        return this.low == other.low && this.high == other.high;\r\n    }\r\n}\r\nLong.ZERO = new Long(0, 0);\r\n","export var Encoding;\r\n(function (Encoding) {\r\n    Encoding[Encoding[\"UTF8_BYTES\"] = 1] = \"UTF8_BYTES\";\r\n    Encoding[Encoding[\"UTF16_STRING\"] = 2] = \"UTF16_STRING\";\r\n})(Encoding || (Encoding = {}));\r\n","import { ByteBuffer } from \"./byte-buffer\";\r\nimport { SIZEOF_SHORT, SIZE_PREFIX_LENGTH, SIZEOF_INT, FILE_IDENTIFIER_LENGTH } from \"./constants\";\r\nimport { Long } from \"./long\";\r\nexport class Builder {\r\n    /**\r\n     * Create a FlatBufferBuilder.\r\n     */\r\n    constructor(opt_initial_size) {\r\n        /** Minimum alignment encountered so far. */\r\n        this.minalign = 1;\r\n        /** The vtable for the current table. */\r\n        this.vtable = null;\r\n        /** The amount of fields we're actually using. */\r\n        this.vtable_in_use = 0;\r\n        /** Whether we are currently serializing a table. */\r\n        this.isNested = false;\r\n        /** Starting offset of the current struct/table. */\r\n        this.object_start = 0;\r\n        /** List of offsets of all vtables. */\r\n        this.vtables = [];\r\n        /** For the current vector being built. */\r\n        this.vector_num_elems = 0;\r\n        /** False omits default values from the serialized data */\r\n        this.force_defaults = false;\r\n        this.string_maps = null;\r\n        let initial_size;\r\n        if (!opt_initial_size) {\r\n            initial_size = 1024;\r\n        }\r\n        else {\r\n            initial_size = opt_initial_size;\r\n        }\r\n        /**\r\n         * @type {ByteBuffer}\r\n         * @private\r\n         */\r\n        this.bb = ByteBuffer.allocate(initial_size);\r\n        this.space = initial_size;\r\n    }\r\n    clear() {\r\n        this.bb.clear();\r\n        this.space = this.bb.capacity();\r\n        this.minalign = 1;\r\n        this.vtable = null;\r\n        this.vtable_in_use = 0;\r\n        this.isNested = false;\r\n        this.object_start = 0;\r\n        this.vtables = [];\r\n        this.vector_num_elems = 0;\r\n        this.force_defaults = false;\r\n        this.string_maps = null;\r\n    }\r\n    /**\r\n     * In order to save space, fields that are set to their default value\r\n     * don't get serialized into the buffer. Forcing defaults provides a\r\n     * way to manually disable this optimization.\r\n     *\r\n     * @param forceDefaults true always serializes default values\r\n     */\r\n    forceDefaults(forceDefaults) {\r\n        this.force_defaults = forceDefaults;\r\n    }\r\n    /**\r\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\r\n     * called finish(). The actual data starts at the ByteBuffer's current position,\r\n     * not necessarily at 0.\r\n     */\r\n    dataBuffer() {\r\n        return this.bb;\r\n    }\r\n    /**\r\n     * Get the bytes representing the FlatBuffer. Only call this after you've\r\n     * called finish().\r\n     */\r\n    asUint8Array() {\r\n        return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\r\n    }\r\n    /**\r\n     * Prepare to write an element of `size` after `additional_bytes` have been\r\n     * written, e.g. if you write a string, you need to align such the int length\r\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\r\n     * you need to do is alignment, `additional_bytes` will be 0.\r\n     *\r\n     * @param size This is the of the new element to write\r\n     * @param additional_bytes The padding size\r\n     */\r\n    prep(size, additional_bytes) {\r\n        // Track the biggest thing we've ever aligned to.\r\n        if (size > this.minalign) {\r\n            this.minalign = size;\r\n        }\r\n        // Find the amount of alignment needed such that `size` is properly\r\n        // aligned after `additional_bytes`\r\n        const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\r\n        // Reallocate the buffer if needed.\r\n        while (this.space < align_size + size + additional_bytes) {\r\n            const old_buf_size = this.bb.capacity();\r\n            this.bb = Builder.growByteBuffer(this.bb);\r\n            this.space += this.bb.capacity() - old_buf_size;\r\n        }\r\n        this.pad(align_size);\r\n    }\r\n    pad(byte_size) {\r\n        for (let i = 0; i < byte_size; i++) {\r\n            this.bb.writeInt8(--this.space, 0);\r\n        }\r\n    }\r\n    writeInt8(value) {\r\n        this.bb.writeInt8(this.space -= 1, value);\r\n    }\r\n    writeInt16(value) {\r\n        this.bb.writeInt16(this.space -= 2, value);\r\n    }\r\n    writeInt32(value) {\r\n        this.bb.writeInt32(this.space -= 4, value);\r\n    }\r\n    writeInt64(value) {\r\n        this.bb.writeInt64(this.space -= 8, value);\r\n    }\r\n    writeFloat32(value) {\r\n        this.bb.writeFloat32(this.space -= 4, value);\r\n    }\r\n    writeFloat64(value) {\r\n        this.bb.writeFloat64(this.space -= 8, value);\r\n    }\r\n    /**\r\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int8` to add the the buffer.\r\n     */\r\n    addInt8(value) {\r\n        this.prep(1, 0);\r\n        this.writeInt8(value);\r\n    }\r\n    /**\r\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int16` to add the the buffer.\r\n     */\r\n    addInt16(value) {\r\n        this.prep(2, 0);\r\n        this.writeInt16(value);\r\n    }\r\n    /**\r\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int32` to add the the buffer.\r\n     */\r\n    addInt32(value) {\r\n        this.prep(4, 0);\r\n        this.writeInt32(value);\r\n    }\r\n    /**\r\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int64` to add the the buffer.\r\n     */\r\n    addInt64(value) {\r\n        this.prep(8, 0);\r\n        this.writeInt64(value);\r\n    }\r\n    /**\r\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float32` to add the the buffer.\r\n     */\r\n    addFloat32(value) {\r\n        this.prep(4, 0);\r\n        this.writeFloat32(value);\r\n    }\r\n    /**\r\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float64` to add the the buffer.\r\n     */\r\n    addFloat64(value) {\r\n        this.prep(8, 0);\r\n        this.writeFloat64(value);\r\n    }\r\n    addFieldInt8(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt8(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt16(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt16(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt32(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt32(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt64(voffset, value, defaultValue) {\r\n        if (this.force_defaults || !value.equals(defaultValue)) {\r\n            this.addInt64(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldFloat32(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addFloat32(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldFloat64(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addFloat64(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldOffset(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addOffset(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    /**\r\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\r\n     */\r\n    addFieldStruct(voffset, value, defaultValue) {\r\n        if (value != defaultValue) {\r\n            this.nested(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    /**\r\n     * Structures are always stored inline, they need to be created right\r\n     * where they're used.  You'll get this assertion failure if you\r\n     * created it elsewhere.\r\n     */\r\n    nested(obj) {\r\n        if (obj != this.offset()) {\r\n            throw new Error('FlatBuffers: struct must be serialized inline.');\r\n        }\r\n    }\r\n    /**\r\n     * Should not be creating any other object, string or vector\r\n     * while an object is being constructed\r\n     */\r\n    notNested() {\r\n        if (this.isNested) {\r\n            throw new Error('FlatBuffers: object serialization must not be nested.');\r\n        }\r\n    }\r\n    /**\r\n     * Set the current vtable at `voffset` to the current location in the buffer.\r\n     */\r\n    slot(voffset) {\r\n        if (this.vtable !== null)\r\n            this.vtable[voffset] = this.offset();\r\n    }\r\n    /**\r\n     * @returns Offset relative to the end of the buffer.\r\n     */\r\n    offset() {\r\n        return this.bb.capacity() - this.space;\r\n    }\r\n    /**\r\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\r\n     * the end of the new buffer (since we build the buffer backwards).\r\n     *\r\n     * @param bb The current buffer with the existing data\r\n     * @returns A new byte buffer with the old data copied\r\n     * to it. The data is located at the end of the buffer.\r\n     *\r\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\r\n     * it a uint8Array we need to suppress the type check:\r\n     * @suppress {checkTypes}\r\n     */\r\n    static growByteBuffer(bb) {\r\n        const old_buf_size = bb.capacity();\r\n        // Ensure we don't grow beyond what fits in an int.\r\n        if (old_buf_size & 0xC0000000) {\r\n            throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\r\n        }\r\n        const new_buf_size = old_buf_size << 1;\r\n        const nbb = ByteBuffer.allocate(new_buf_size);\r\n        nbb.setPosition(new_buf_size - old_buf_size);\r\n        nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\r\n        return nbb;\r\n    }\r\n    /**\r\n     * Adds on offset, relative to where it will be written.\r\n     *\r\n     * @param offset The offset to add.\r\n     */\r\n    addOffset(offset) {\r\n        this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.\r\n        this.writeInt32(this.offset() - offset + SIZEOF_INT);\r\n    }\r\n    /**\r\n     * Start encoding a new object in the buffer.  Users will not usually need to\r\n     * call this directly. The FlatBuffers compiler will generate helper methods\r\n     * that call this method internally.\r\n     */\r\n    startObject(numfields) {\r\n        this.notNested();\r\n        if (this.vtable == null) {\r\n            this.vtable = [];\r\n        }\r\n        this.vtable_in_use = numfields;\r\n        for (let i = 0; i < numfields; i++) {\r\n            this.vtable[i] = 0; // This will push additional elements as needed\r\n        }\r\n        this.isNested = true;\r\n        this.object_start = this.offset();\r\n    }\r\n    /**\r\n     * Finish off writing the object that is under construction.\r\n     *\r\n     * @returns The offset to the object inside `dataBuffer`\r\n     */\r\n    endObject() {\r\n        if (this.vtable == null || !this.isNested) {\r\n            throw new Error('FlatBuffers: endObject called without startObject');\r\n        }\r\n        this.addInt32(0);\r\n        const vtableloc = this.offset();\r\n        // Trim trailing zeroes.\r\n        let i = this.vtable_in_use - 1;\r\n        // eslint-disable-next-line no-empty\r\n        for (; i >= 0 && this.vtable[i] == 0; i--) { }\r\n        const trimmed_size = i + 1;\r\n        // Write out the current vtable.\r\n        for (; i >= 0; i--) {\r\n            // Offset relative to the start of the table.\r\n            this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\r\n        }\r\n        const standard_fields = 2; // The fields below:\r\n        this.addInt16(vtableloc - this.object_start);\r\n        const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\r\n        this.addInt16(len);\r\n        // Search for an existing vtable that matches the current one.\r\n        let existing_vtable = 0;\r\n        const vt1 = this.space;\r\n        outer_loop: for (i = 0; i < this.vtables.length; i++) {\r\n            const vt2 = this.bb.capacity() - this.vtables[i];\r\n            if (len == this.bb.readInt16(vt2)) {\r\n                for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\r\n                    if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\r\n                        continue outer_loop;\r\n                    }\r\n                }\r\n                existing_vtable = this.vtables[i];\r\n                break;\r\n            }\r\n        }\r\n        if (existing_vtable) {\r\n            // Found a match:\r\n            // Remove the current vtable.\r\n            this.space = this.bb.capacity() - vtableloc;\r\n            // Point table to existing vtable.\r\n            this.bb.writeInt32(this.space, existing_vtable - vtableloc);\r\n        }\r\n        else {\r\n            // No match:\r\n            // Add the location of the current vtable to the list of vtables.\r\n            this.vtables.push(this.offset());\r\n            // Point table to current vtable.\r\n            this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\r\n        }\r\n        this.isNested = false;\r\n        return vtableloc;\r\n    }\r\n    /**\r\n     * Finalize a buffer, poiting to the given `root_table`.\r\n     */\r\n    finish(root_table, opt_file_identifier, opt_size_prefix) {\r\n        const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\r\n        if (opt_file_identifier) {\r\n            const file_identifier = opt_file_identifier;\r\n            this.prep(this.minalign, SIZEOF_INT +\r\n                FILE_IDENTIFIER_LENGTH + size_prefix);\r\n            if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\r\n                throw new Error('FlatBuffers: file identifier must be length ' +\r\n                    FILE_IDENTIFIER_LENGTH);\r\n            }\r\n            for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\r\n                this.writeInt8(file_identifier.charCodeAt(i));\r\n            }\r\n        }\r\n        this.prep(this.minalign, SIZEOF_INT + size_prefix);\r\n        this.addOffset(root_table);\r\n        if (size_prefix) {\r\n            this.addInt32(this.bb.capacity() - this.space);\r\n        }\r\n        this.bb.setPosition(this.space);\r\n    }\r\n    /**\r\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\r\n     */\r\n    finishSizePrefixed(root_table, opt_file_identifier) {\r\n        this.finish(root_table, opt_file_identifier, true);\r\n    }\r\n    /**\r\n     * This checks a required field has been set in a given table that has\r\n     * just been constructed.\r\n     */\r\n    requiredField(table, field) {\r\n        const table_start = this.bb.capacity() - table;\r\n        const vtable_start = table_start - this.bb.readInt32(table_start);\r\n        const ok = this.bb.readInt16(vtable_start + field) != 0;\r\n        // If this fails, the caller will show what field needs to be set.\r\n        if (!ok) {\r\n            throw new Error('FlatBuffers: field ' + field + ' must be set');\r\n        }\r\n    }\r\n    /**\r\n     * Start a new array/vector of objects.  Users usually will not call\r\n     * this directly. The FlatBuffers compiler will create a start/end\r\n     * method for vector types in generated code.\r\n     *\r\n     * @param elem_size The size of each element in the array\r\n     * @param num_elems The number of elements in the array\r\n     * @param alignment The alignment of the array\r\n     */\r\n    startVector(elem_size, num_elems, alignment) {\r\n        this.notNested();\r\n        this.vector_num_elems = num_elems;\r\n        this.prep(SIZEOF_INT, elem_size * num_elems);\r\n        this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\r\n    }\r\n    /**\r\n     * Finish off the creation of an array and all its elements. The array must be\r\n     * created with `startVector`.\r\n     *\r\n     * @returns The offset at which the newly created array\r\n     * starts.\r\n     */\r\n    endVector() {\r\n        this.writeInt32(this.vector_num_elems);\r\n        return this.offset();\r\n    }\r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has\r\n     * already been seen, we return the offset of the already written string\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createSharedString(s) {\r\n        if (!s) {\r\n            return 0;\r\n        }\r\n        if (!this.string_maps) {\r\n            this.string_maps = new Map();\r\n        }\r\n        if (this.string_maps.has(s)) {\r\n            return this.string_maps.get(s);\r\n        }\r\n        const offset = this.createString(s);\r\n        this.string_maps.set(s, offset);\r\n        return offset;\r\n    }\r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\r\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createString(s) {\r\n        if (!s) {\r\n            return 0;\r\n        }\r\n        let utf8;\r\n        if (s instanceof Uint8Array) {\r\n            utf8 = s;\r\n        }\r\n        else {\r\n            utf8 = [];\r\n            let i = 0;\r\n            while (i < s.length) {\r\n                let codePoint;\r\n                // Decode UTF-16\r\n                const a = s.charCodeAt(i++);\r\n                if (a < 0xD800 || a >= 0xDC00) {\r\n                    codePoint = a;\r\n                }\r\n                else {\r\n                    const b = s.charCodeAt(i++);\r\n                    codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\r\n                }\r\n                // Encode UTF-8\r\n                if (codePoint < 0x80) {\r\n                    utf8.push(codePoint);\r\n                }\r\n                else {\r\n                    if (codePoint < 0x800) {\r\n                        utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\r\n                    }\r\n                    else {\r\n                        if (codePoint < 0x10000) {\r\n                            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\r\n                        }\r\n                        else {\r\n                            utf8.push(((codePoint >> 18) & 0x07) | 0xF0, ((codePoint >> 12) & 0x3F) | 0x80);\r\n                        }\r\n                        utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\r\n                    }\r\n                    utf8.push((codePoint & 0x3F) | 0x80);\r\n                }\r\n            }\r\n        }\r\n        this.addInt8(0);\r\n        this.startVector(1, utf8.length, 1);\r\n        this.bb.setPosition(this.space -= utf8.length);\r\n        for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\r\n            bytes[offset++] = utf8[i];\r\n        }\r\n        return this.endVector();\r\n    }\r\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */\r\n    createLong(low, high) {\r\n        return Long.create(low, high);\r\n    }\r\n    /**\r\n     * A helper function to pack an object\r\n     *\r\n     * @returns offset of obj\r\n     */\r\n    createObjectOffset(obj) {\r\n        if (obj === null) {\r\n            return 0;\r\n        }\r\n        if (typeof obj === 'string') {\r\n            return this.createString(obj);\r\n        }\r\n        else {\r\n            return obj.pack(this);\r\n        }\r\n    }\r\n    /**\r\n     * A helper function to pack a list of object\r\n     *\r\n     * @returns list of offsets of each non null object\r\n     */\r\n    createObjectOffsetList(list) {\r\n        const ret = [];\r\n        for (let i = 0; i < list.length; ++i) {\r\n            const val = list[i];\r\n            if (val !== null) {\r\n                ret.push(this.createObjectOffset(val));\r\n            }\r\n            else {\r\n                throw new Error('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    createStructOffsetList(list, startFunc) {\r\n        startFunc(this, list.length);\r\n        this.createObjectOffsetList(list);\r\n        return this.endVector();\r\n    }\r\n}\r\n","import { FILE_IDENTIFIER_LENGTH, SIZEOF_INT } from \"./constants\";\r\nimport { Long } from \"./long\";\r\nimport { int32, isLittleEndian, float32, float64 } from \"./utils\";\r\nimport { Encoding } from \"./encoding\";\r\nexport class ByteBuffer {\r\n    /**\r\n     * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)\r\n     */\r\n    constructor(bytes_) {\r\n        this.bytes_ = bytes_;\r\n        this.position_ = 0;\r\n    }\r\n    /**\r\n     * Create and allocate a new ByteBuffer with a given size.\r\n     */\r\n    static allocate(byte_size) {\r\n        return new ByteBuffer(new Uint8Array(byte_size));\r\n    }\r\n    clear() {\r\n        this.position_ = 0;\r\n    }\r\n    /**\r\n     * Get the underlying `Uint8Array`.\r\n     */\r\n    bytes() {\r\n        return this.bytes_;\r\n    }\r\n    /**\r\n     * Get the buffer's position.\r\n     */\r\n    position() {\r\n        return this.position_;\r\n    }\r\n    /**\r\n     * Set the buffer's position.\r\n     */\r\n    setPosition(position) {\r\n        this.position_ = position;\r\n    }\r\n    /**\r\n     * Get the buffer's capacity.\r\n     */\r\n    capacity() {\r\n        return this.bytes_.length;\r\n    }\r\n    readInt8(offset) {\r\n        return this.readUint8(offset) << 24 >> 24;\r\n    }\r\n    readUint8(offset) {\r\n        return this.bytes_[offset];\r\n    }\r\n    readInt16(offset) {\r\n        return this.readUint16(offset) << 16 >> 16;\r\n    }\r\n    readUint16(offset) {\r\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\r\n    }\r\n    readInt32(offset) {\r\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\r\n    }\r\n    readUint32(offset) {\r\n        return this.readInt32(offset) >>> 0;\r\n    }\r\n    readInt64(offset) {\r\n        return new Long(this.readInt32(offset), this.readInt32(offset + 4));\r\n    }\r\n    readUint64(offset) {\r\n        return new Long(this.readUint32(offset), this.readUint32(offset + 4));\r\n    }\r\n    readFloat32(offset) {\r\n        int32[0] = this.readInt32(offset);\r\n        return float32[0];\r\n    }\r\n    readFloat64(offset) {\r\n        int32[isLittleEndian ? 0 : 1] = this.readInt32(offset);\r\n        int32[isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\r\n        return float64[0];\r\n    }\r\n    writeInt8(offset, value) {\r\n        this.bytes_[offset] = value;\r\n    }\r\n    writeUint8(offset, value) {\r\n        this.bytes_[offset] = value;\r\n    }\r\n    writeInt16(offset, value) {\r\n        this.bytes_[offset] = value;\r\n        this.bytes_[offset + 1] = value >> 8;\r\n    }\r\n    writeUint16(offset, value) {\r\n        this.bytes_[offset] = value;\r\n        this.bytes_[offset + 1] = value >> 8;\r\n    }\r\n    writeInt32(offset, value) {\r\n        this.bytes_[offset] = value;\r\n        this.bytes_[offset + 1] = value >> 8;\r\n        this.bytes_[offset + 2] = value >> 16;\r\n        this.bytes_[offset + 3] = value >> 24;\r\n    }\r\n    writeUint32(offset, value) {\r\n        this.bytes_[offset] = value;\r\n        this.bytes_[offset + 1] = value >> 8;\r\n        this.bytes_[offset + 2] = value >> 16;\r\n        this.bytes_[offset + 3] = value >> 24;\r\n    }\r\n    writeInt64(offset, value) {\r\n        this.writeInt32(offset, value.low);\r\n        this.writeInt32(offset + 4, value.high);\r\n    }\r\n    writeUint64(offset, value) {\r\n        this.writeUint32(offset, value.low);\r\n        this.writeUint32(offset + 4, value.high);\r\n    }\r\n    writeFloat32(offset, value) {\r\n        float32[0] = value;\r\n        this.writeInt32(offset, int32[0]);\r\n    }\r\n    writeFloat64(offset, value) {\r\n        float64[0] = value;\r\n        this.writeInt32(offset, int32[isLittleEndian ? 0 : 1]);\r\n        this.writeInt32(offset + 4, int32[isLittleEndian ? 1 : 0]);\r\n    }\r\n    /**\r\n     * Return the file identifier.   Behavior is undefined for FlatBuffers whose\r\n     * schema does not include a file_identifier (likely points at padding or the\r\n     * start of a the root vtable).\r\n     */\r\n    getBufferIdentifier() {\r\n        if (this.bytes_.length < this.position_ + SIZEOF_INT +\r\n            FILE_IDENTIFIER_LENGTH) {\r\n            throw new Error('FlatBuffers: ByteBuffer is too short to contain an identifier.');\r\n        }\r\n        let result = \"\";\r\n        for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\r\n            result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT + i));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Look up a field in the vtable, return an offset into the object, or 0 if the\r\n     * field is not present.\r\n     */\r\n    __offset(bb_pos, vtable_offset) {\r\n        const vtable = bb_pos - this.readInt32(bb_pos);\r\n        return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\r\n    }\r\n    /**\r\n     * Initialize any Table-derived type to point to the union at the given offset.\r\n     */\r\n    __union(t, offset) {\r\n        t.bb_pos = offset + this.readInt32(offset);\r\n        t.bb = this;\r\n        return t;\r\n    }\r\n    /**\r\n     * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\r\n     * This allocates a new string and converts to wide chars upon each access.\r\n     *\r\n     * To avoid the conversion to UTF-16, pass Encoding.UTF8_BYTES as\r\n     * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\r\n     * and from UTF-16 when the data will just be packaged back up in another\r\n     * FlatBuffer later on.\r\n     *\r\n     * @param offset\r\n     * @param opt_encoding Defaults to UTF16_STRING\r\n     */\r\n    __string(offset, opt_encoding) {\r\n        offset += this.readInt32(offset);\r\n        const length = this.readInt32(offset);\r\n        let result = '';\r\n        let i = 0;\r\n        offset += SIZEOF_INT;\r\n        if (opt_encoding === Encoding.UTF8_BYTES) {\r\n            return this.bytes_.subarray(offset, offset + length);\r\n        }\r\n        while (i < length) {\r\n            let codePoint;\r\n            // Decode UTF-8\r\n            const a = this.readUint8(offset + i++);\r\n            if (a < 0xC0) {\r\n                codePoint = a;\r\n            }\r\n            else {\r\n                const b = this.readUint8(offset + i++);\r\n                if (a < 0xE0) {\r\n                    codePoint =\r\n                        ((a & 0x1F) << 6) |\r\n                            (b & 0x3F);\r\n                }\r\n                else {\r\n                    const c = this.readUint8(offset + i++);\r\n                    if (a < 0xF0) {\r\n                        codePoint =\r\n                            ((a & 0x0F) << 12) |\r\n                                ((b & 0x3F) << 6) |\r\n                                (c & 0x3F);\r\n                    }\r\n                    else {\r\n                        const d = this.readUint8(offset + i++);\r\n                        codePoint =\r\n                            ((a & 0x07) << 18) |\r\n                                ((b & 0x3F) << 12) |\r\n                                ((c & 0x3F) << 6) |\r\n                                (d & 0x3F);\r\n                    }\r\n                }\r\n            }\r\n            // Encode UTF-16\r\n            if (codePoint < 0x10000) {\r\n                result += String.fromCharCode(codePoint);\r\n            }\r\n            else {\r\n                codePoint -= 0x10000;\r\n                result += String.fromCharCode((codePoint >> 10) + 0xD800, (codePoint & ((1 << 10) - 1)) + 0xDC00);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Handle unions that can contain string as its member, if a Table-derived type then initialize it,\r\n     * if a string then return a new one\r\n     *\r\n     * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this\r\n     * makes the behaviour of __union_with_string different compared to __union\r\n     */\r\n    __union_with_string(o, offset) {\r\n        if (typeof o === 'string') {\r\n            return this.__string(offset);\r\n        }\r\n        return this.__union(o, offset);\r\n    }\r\n    /**\r\n     * Retrieve the relative offset stored at \"offset\"\r\n     */\r\n    __indirect(offset) {\r\n        return offset + this.readInt32(offset);\r\n    }\r\n    /**\r\n     * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\r\n     */\r\n    __vector(offset) {\r\n        return offset + this.readInt32(offset) + SIZEOF_INT; // data starts after the length\r\n    }\r\n    /**\r\n     * Get the length of a vector whose offset is stored at \"offset\" in this object.\r\n     */\r\n    __vector_len(offset) {\r\n        return this.readInt32(offset + this.readInt32(offset));\r\n    }\r\n    __has_identifier(ident) {\r\n        if (ident.length != FILE_IDENTIFIER_LENGTH) {\r\n            throw new Error('FlatBuffers: file identifier must be length ' +\r\n                FILE_IDENTIFIER_LENGTH);\r\n        }\r\n        for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\r\n            if (ident.charCodeAt(i) != this.readInt8(this.position() + SIZEOF_INT + i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */\r\n    createLong(low, high) {\r\n        return Long.create(low, high);\r\n    }\r\n    /**\r\n     * A helper function for generating list for obj api\r\n     */\r\n    createScalarList(listAccessor, listLength) {\r\n        const ret = [];\r\n        for (let i = 0; i < listLength; ++i) {\r\n            if (listAccessor(i) !== null) {\r\n                ret.push(listAccessor(i));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * A helper function for generating list for obj api\r\n     * @param listAccessor function that accepts an index and return data at that index\r\n     * @param listLength listLength\r\n     * @param res result list\r\n     */\r\n    createObjList(listAccessor, listLength) {\r\n        const ret = [];\r\n        for (let i = 0; i < listLength; ++i) {\r\n            const val = listAccessor(i);\r\n            if (val !== null) {\r\n                ret.push(val.unpack());\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n */\nexport class KeyValue {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsKeyValue(bb, obj) {\n        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsKeyValue(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    key(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    value(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startKeyValue(builder) {\n        builder.startObject(2);\n    }\n    static addKey(builder, keyOffset) {\n        builder.addFieldOffset(0, keyOffset, 0);\n    }\n    static addValue(builder, valueOffset) {\n        builder.addFieldOffset(1, valueOffset, 0);\n    }\n    static endKeyValue(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createKeyValue(builder, keyOffset, valueOffset) {\n        KeyValue.startKeyValue(builder);\n        KeyValue.addKey(builder, keyOffset);\n        KeyValue.addValue(builder, valueOffset);\n        return KeyValue.endKeyValue(builder);\n    }\n}\n\n//# sourceMappingURL=key-value.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n */\nexport class KeyValue {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):KeyValue {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsKeyValue(bb:flatbuffers.ByteBuffer, obj?:KeyValue):KeyValue {\n  return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsKeyValue(bb:flatbuffers.ByteBuffer, obj?:KeyValue):KeyValue {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nkey():string|null\nkey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nkey(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nvalue():string|null\nvalue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nvalue(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startKeyValue(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, keyOffset, 0);\n}\n\nstatic addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, valueOffset, 0);\n}\n\nstatic endKeyValue(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createKeyValue(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset):flatbuffers.Offset {\n  KeyValue.startKeyValue(builder);\n  KeyValue.addKey(builder, keyOffset);\n  KeyValue.addValue(builder, valueOffset);\n  return KeyValue.endKeyValue(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * Logical types, vector layouts, and schemas\n * Format Version History.\n * Version 1.0 - Forward and backwards compatibility guaranteed.\n * Version 1.1 - Add Decimal256 (No format release).\n * Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO\n */\nexport var MetadataVersion;\n(function (MetadataVersion) {\n    /**\n     * 0.1.0 (October 2016).\n     */\n    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */\n    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */\n    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */\n    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */\n    MetadataVersion[MetadataVersion[\"V5\"] = 4] = \"V5\";\n})(MetadataVersion || (MetadataVersion = {}));\n\n//# sourceMappingURL=metadata-version.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/**\n * Logical types, vector layouts, and schemas\n * Format Version History.\n * Version 1.0 - Forward and backwards compatibility guaranteed.\n * Version 1.1 - Add Decimal256 (No format release).\n * Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO\n */\nexport enum MetadataVersion{\n  /**\n   * 0.1.0 (October 2016).\n   */\n  V1 = 0,\n\n  /**\n   * 0.2.0 (February 2017). Non-backwards compatible with V1.\n   */\n  V2 = 1,\n\n  /**\n   * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n   */\n  V3 = 2,\n\n  /**\n   * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n   */\n  V4 = 3,\n\n  /**\n   * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n   * metadata and IPC messages). Implementations are recommended to provide a\n   * V4 compatibility mode with V5 format changes disabled.\n   *\n   * Incompatible changes between V4 and V5:\n   * - Union buffer layout has changed. In V5, Unions don't have a validity\n   *   bitmap buffer.\n   */\n  V5 = 4\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Endianness } from './endianness.mjs';\nimport { Field } from './field.mjs';\nimport { KeyValue } from './key-value.mjs';\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n */\nexport class Schema {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSchema(bb, obj) {\n        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSchema(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     */\n    endianness() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : Endianness.Little;\n    }\n    fields(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    fieldsLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Features used in the stream/file.\n     */\n    features(index) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    featuresLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startSchema(builder) {\n        builder.startObject(4);\n    }\n    static addEndianness(builder, endianness) {\n        builder.addFieldInt16(0, endianness, Endianness.Little);\n    }\n    static addFields(builder, fieldsOffset) {\n        builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n    static createFieldsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startFieldsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addFeatures(builder, featuresOffset) {\n        builder.addFieldOffset(3, featuresOffset, 0);\n    }\n    static createFeaturesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt64(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startFeaturesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static endSchema(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishSchemaBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedSchemaBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    static createSchema(builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {\n        Schema.startSchema(builder);\n        Schema.addEndianness(builder, endianness);\n        Schema.addFields(builder, fieldsOffset);\n        Schema.addCustomMetadata(builder, customMetadataOffset);\n        Schema.addFeatures(builder, featuresOffset);\n        return Schema.endSchema(builder);\n    }\n}\n\n//# sourceMappingURL=schema.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Endianness } from './endianness.js';\nimport { Field } from './field.js';\nimport { KeyValue } from './key-value.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n */\nexport class Schema {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Schema {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsSchema(bb:flatbuffers.ByteBuffer, obj?:Schema):Schema {\n  return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsSchema(bb:flatbuffers.ByteBuffer, obj?:Schema):Schema {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * endianness of the buffer\n * it is Little Endian by default\n * if endianness doesn't match the underlying system then the vectors need to be converted\n */\nendianness():Endianness {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : Endianness.Little;\n}\n\nfields(index: number, obj?:Field):Field|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\nfieldsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\ncustomMetadata(index: number, obj?:KeyValue):KeyValue|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncustomMetadataLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Features used in the stream/file.\n */\nfeatures(index: number):flatbuffers.Long|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : this.bb!.createLong(0, 0);\n}\n\nfeaturesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startSchema(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addEndianness(builder:flatbuffers.Builder, endianness:Endianness) {\n  builder.addFieldInt16(0, endianness, Endianness.Little);\n}\n\nstatic addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, fieldsOffset, 0);\n}\n\nstatic createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startFieldsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addCustomMetadata(builder:flatbuffers.Builder, customMetadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, customMetadataOffset, 0);\n}\n\nstatic createCustomMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startCustomMetadataVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addFeatures(builder:flatbuffers.Builder, featuresOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, featuresOffset, 0);\n}\n\nstatic createFeaturesVector(builder:flatbuffers.Builder, data:flatbuffers.Long[]):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startFeaturesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic endSchema(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic finishSchemaBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedSchemaBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\nstatic createSchema(builder:flatbuffers.Builder, endianness:Endianness, fieldsOffset:flatbuffers.Offset, customMetadataOffset:flatbuffers.Offset, featuresOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Schema.startSchema(builder);\n  Schema.addEndianness(builder, endianness);\n  Schema.addFields(builder, fieldsOffset);\n  Schema.addCustomMetadata(builder, customMetadataOffset);\n  Schema.addFeatures(builder, featuresOffset);\n  return Schema.endSchema(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n */\nexport var Endianness;\n(function (Endianness) {\n    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n})(Endianness || (Endianness = {}));\n\n//# sourceMappingURL=endianness.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n */\nexport enum Endianness{\n  Little = 0,\n  Big = 1\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { DictionaryEncoding } from './dictionary-encoding.mjs';\nimport { KeyValue } from './key-value.mjs';\nimport { Type } from './type.mjs';\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n */\nexport class Field {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsField(bb, obj) {\n        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsField(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    name(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    /**\n     * Whether or not this field can contain nulls. Should be true in general.\n     */\n    nullable() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : Type.NONE;\n    }\n    /**\n     * This is the type of the decoded value if the field is dictionary encoded.\n     */\n    // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * Present only if the field is dictionary encoded.\n     */\n    dictionary(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * children apply only to nested data types like Struct, List and Union. For\n     * primitive types children will have length 0.\n     */\n    children(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    childrenLength() {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * User-defined metadata\n     */\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startField(builder) {\n        builder.startObject(7);\n    }\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    static addNullable(builder, nullable) {\n        builder.addFieldInt8(1, +nullable, +false);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(2, typeType, Type.NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(3, typeOffset, 0);\n    }\n    static addDictionary(builder, dictionaryOffset) {\n        builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n    static addChildren(builder, childrenOffset) {\n        builder.addFieldOffset(5, childrenOffset, 0);\n    }\n    static createChildrenVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startChildrenVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(6, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endField(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=field.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { DictionaryEncoding } from './dictionary-encoding.js';\nimport { KeyValue } from './key-value.js';\nimport { Type } from './type.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n */\nexport class Field {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Field {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsField(bb:flatbuffers.ByteBuffer, obj?:Field):Field {\n  return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsField(bb:flatbuffers.ByteBuffer, obj?:Field):Field {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Name is not required, in i.e. a List\n */\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\n/**\n * Whether or not this field can contain nulls. Should be true in general.\n */\nnullable():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\ntypeType():Type {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Type.NONE;\n}\n\n/**\n * This is the type of the decoded value if the field is dictionary encoded.\n */\n// @ts-ignore\ntype<T extends flatbuffers.Table>(obj:any):any|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n}\n\n/**\n * Present only if the field is dictionary encoded.\n */\ndictionary(obj?:DictionaryEncoding):DictionaryEncoding|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? (obj || new DictionaryEncoding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * children apply only to nested data types like Struct, List and Union. For\n * primitive types children will have length 0.\n */\nchildren(index: number, obj?:Field):Field|null {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\nchildrenLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * User-defined metadata\n */\ncustomMetadata(index: number, obj?:KeyValue):KeyValue|null {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncustomMetadataLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startField(builder:flatbuffers.Builder) {\n  builder.startObject(7);\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, nameOffset, 0);\n}\n\nstatic addNullable(builder:flatbuffers.Builder, nullable:boolean) {\n  builder.addFieldInt8(1, +nullable, +false);\n}\n\nstatic addTypeType(builder:flatbuffers.Builder, typeType:Type) {\n  builder.addFieldInt8(2, typeType, Type.NONE);\n}\n\nstatic addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, typeOffset, 0);\n}\n\nstatic addDictionary(builder:flatbuffers.Builder, dictionaryOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, dictionaryOffset, 0);\n}\n\nstatic addChildren(builder:flatbuffers.Builder, childrenOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(5, childrenOffset, 0);\n}\n\nstatic createChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startChildrenVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addCustomMetadata(builder:flatbuffers.Builder, customMetadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(6, customMetadataOffset, 0);\n}\n\nstatic createCustomMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startCustomMetadataVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endField(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { DictionaryKind } from './dictionary-kind.mjs';\nimport { Int } from './int.mjs';\nexport class DictionaryEncoding {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryEncoding(bb, obj) {\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryEncoding(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     */\n    id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * The dictionary indices are constrained to be non-negative integers. If\n     * this field is null, the indices must be signed int32. To maximize\n     * cross-language compatibility and performance, implementations are\n     * recommended to prefer signed integer types over unsigned integer types\n     * and to avoid uint64 indices unless they are required by an application.\n     */\n    indexType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     */\n    isOrdered() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    dictionaryKind() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;\n    }\n    static startDictionaryEncoding(builder) {\n        builder.startObject(4);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n    static addIndexType(builder, indexTypeOffset) {\n        builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n    static addIsOrdered(builder, isOrdered) {\n        builder.addFieldInt8(2, +isOrdered, +false);\n    }\n    static addDictionaryKind(builder, dictionaryKind) {\n        builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n    }\n    static endDictionaryEncoding(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=dictionary-encoding.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { DictionaryKind } from './dictionary-kind.js';\nimport { Int } from './int.js';\n\n\nexport class DictionaryEncoding {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):DictionaryEncoding {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDictionaryEncoding(bb:flatbuffers.ByteBuffer, obj?:DictionaryEncoding):DictionaryEncoding {\n  return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDictionaryEncoding(bb:flatbuffers.ByteBuffer, obj?:DictionaryEncoding):DictionaryEncoding {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * The known dictionary id in the application where this data is used. In\n * the file or streaming formats, the dictionary ids are found in the\n * DictionaryBatch messages\n */\nid():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * The dictionary indices are constrained to be non-negative integers. If\n * this field is null, the indices must be signed int32. To maximize\n * cross-language compatibility and performance, implementations are\n * recommended to prefer signed integer types over unsigned integer types\n * and to avoid uint64 indices unless they are required by an application.\n */\nindexType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * By default, dictionaries are not ordered, or the order does not have\n * semantic meaning. In some statistical, applications, dictionary-encoding\n * is used to represent ordered categorical data, and we provide a way to\n * preserve that metadata here\n */\nisOrdered():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\ndictionaryKind():DictionaryKind {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;\n}\n\nstatic startDictionaryEncoding(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addId(builder:flatbuffers.Builder, id:flatbuffers.Long) {\n  builder.addFieldInt64(0, id, builder.createLong(0, 0));\n}\n\nstatic addIndexType(builder:flatbuffers.Builder, indexTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, indexTypeOffset, 0);\n}\n\nstatic addIsOrdered(builder:flatbuffers.Builder, isOrdered:boolean) {\n  builder.addFieldInt8(2, +isOrdered, +false);\n}\n\nstatic addDictionaryKind(builder:flatbuffers.Builder, dictionaryKind:DictionaryKind) {\n  builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n}\n\nstatic endDictionaryEncoding(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n * Maintained for forwards compatibility, in the future\n * Dictionaries might be explicit maps between integers and values\n * allowing for non-contiguous index values\n */\nexport var DictionaryKind;\n(function (DictionaryKind) {\n    DictionaryKind[DictionaryKind[\"DenseArray\"] = 0] = \"DenseArray\";\n})(DictionaryKind || (DictionaryKind = {}));\n\n//# sourceMappingURL=dictionary-kind.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n * Maintained for forwards compatibility, in the future\n * Dictionaries might be explicit maps between integers and values\n * allowing for non-contiguous index values\n */\nexport enum DictionaryKind{\n  DenseArray = 0\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nexport class Int {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsInt(bb, obj) {\n        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsInt(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    isSigned() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startInt(builder) {\n        builder.startObject(2);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(0, bitWidth, 0);\n    }\n    static addIsSigned(builder, isSigned) {\n        builder.addFieldInt8(1, +isSigned, +false);\n    }\n    static endInt(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createInt(builder, bitWidth, isSigned) {\n        Int.startInt(builder);\n        Int.addBitWidth(builder, bitWidth);\n        Int.addIsSigned(builder, isSigned);\n        return Int.endInt(builder);\n    }\n}\n\n//# sourceMappingURL=int.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class Int {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Int {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsInt(bb:flatbuffers.ByteBuffer, obj?:Int):Int {\n  return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsInt(bb:flatbuffers.ByteBuffer, obj?:Int):Int {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nbitWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\nisSigned():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nstatic startInt(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\n  builder.addFieldInt32(0, bitWidth, 0);\n}\n\nstatic addIsSigned(builder:flatbuffers.Builder, isSigned:boolean) {\n  builder.addFieldInt8(1, +isSigned, +false);\n}\n\nstatic endInt(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createInt(builder:flatbuffers.Builder, bitWidth:number, isSigned:boolean):flatbuffers.Offset {\n  Int.startInt(builder);\n  Int.addBitWidth(builder, bitWidth);\n  Int.addIsSigned(builder, isSigned);\n  return Int.endInt(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport { Binary } from './binary.mjs';\nimport { Bool } from './bool.mjs';\nimport { Date } from './date.mjs';\nimport { Decimal } from './decimal.mjs';\nimport { Duration } from './duration.mjs';\nimport { FixedSizeBinary } from './fixed-size-binary.mjs';\nimport { FixedSizeList } from './fixed-size-list.mjs';\nimport { FloatingPoint } from './floating-point.mjs';\nimport { Int } from './int.mjs';\nimport { Interval } from './interval.mjs';\nimport { LargeBinary } from './large-binary.mjs';\nimport { LargeList } from './large-list.mjs';\nimport { LargeUtf8 } from './large-utf8.mjs';\nimport { List } from './list.mjs';\nimport { Map } from './map.mjs';\nimport { Null } from './null.mjs';\nimport { Struct_ } from './struct_.mjs';\nimport { Time } from './time.mjs';\nimport { Timestamp } from './timestamp.mjs';\nimport { Union } from './union.mjs';\nimport { Utf8 } from './utf8.mjs';\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[Type[\"Duration\"] = 18] = \"Duration\";\n    Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n    Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n    Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n})(Type || (Type = {}));\nexport function unionToType(type, accessor) {\n    switch (Type[type]) {\n        case 'NONE': return null;\n        case 'Null': return accessor(new Null());\n        case 'Int': return accessor(new Int());\n        case 'FloatingPoint': return accessor(new FloatingPoint());\n        case 'Binary': return accessor(new Binary());\n        case 'Utf8': return accessor(new Utf8());\n        case 'Bool': return accessor(new Bool());\n        case 'Decimal': return accessor(new Decimal());\n        case 'Date': return accessor(new Date());\n        case 'Time': return accessor(new Time());\n        case 'Timestamp': return accessor(new Timestamp());\n        case 'Interval': return accessor(new Interval());\n        case 'List': return accessor(new List());\n        case 'Struct_': return accessor(new Struct_());\n        case 'Union': return accessor(new Union());\n        case 'FixedSizeBinary': return accessor(new FixedSizeBinary());\n        case 'FixedSizeList': return accessor(new FixedSizeList());\n        case 'Map': return accessor(new Map());\n        case 'Duration': return accessor(new Duration());\n        case 'LargeBinary': return accessor(new LargeBinary());\n        case 'LargeUtf8': return accessor(new LargeUtf8());\n        case 'LargeList': return accessor(new LargeList());\n        default: return null;\n    }\n}\nexport function unionListToType(type, accessor, index) {\n    switch (Type[type]) {\n        case 'NONE': return null;\n        case 'Null': return accessor(index, new Null());\n        case 'Int': return accessor(index, new Int());\n        case 'FloatingPoint': return accessor(index, new FloatingPoint());\n        case 'Binary': return accessor(index, new Binary());\n        case 'Utf8': return accessor(index, new Utf8());\n        case 'Bool': return accessor(index, new Bool());\n        case 'Decimal': return accessor(index, new Decimal());\n        case 'Date': return accessor(index, new Date());\n        case 'Time': return accessor(index, new Time());\n        case 'Timestamp': return accessor(index, new Timestamp());\n        case 'Interval': return accessor(index, new Interval());\n        case 'List': return accessor(index, new List());\n        case 'Struct_': return accessor(index, new Struct_());\n        case 'Union': return accessor(index, new Union());\n        case 'FixedSizeBinary': return accessor(index, new FixedSizeBinary());\n        case 'FixedSizeList': return accessor(index, new FixedSizeList());\n        case 'Map': return accessor(index, new Map());\n        case 'Duration': return accessor(index, new Duration());\n        case 'LargeBinary': return accessor(index, new LargeBinary());\n        case 'LargeUtf8': return accessor(index, new LargeUtf8());\n        case 'LargeList': return accessor(index, new LargeList());\n        default: return null;\n    }\n}\n\n//# sourceMappingURL=type.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { Binary } from './binary.js';\nimport { Bool } from './bool.js';\nimport { Date } from './date.js';\nimport { Decimal } from './decimal.js';\nimport { Duration } from './duration.js';\nimport { FixedSizeBinary } from './fixed-size-binary.js';\nimport { FixedSizeList } from './fixed-size-list.js';\nimport { FloatingPoint } from './floating-point.js';\nimport { Int } from './int.js';\nimport { Interval } from './interval.js';\nimport { LargeBinary } from './large-binary.js';\nimport { LargeList } from './large-list.js';\nimport { LargeUtf8 } from './large-utf8.js';\nimport { List } from './list.js';\nimport { Map } from './map.js';\nimport { Null } from './null.js';\nimport { Struct_ } from './struct_.js';\nimport { Time } from './time.js';\nimport { Timestamp } from './timestamp.js';\nimport { Union } from './union.js';\nimport { Utf8 } from './utf8.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n */\nexport enum Type{\n  NONE = 0,\n  Null = 1,\n  Int = 2,\n  FloatingPoint = 3,\n  Binary = 4,\n  Utf8 = 5,\n  Bool = 6,\n  Decimal = 7,\n  Date = 8,\n  Time = 9,\n  Timestamp = 10,\n  Interval = 11,\n  List = 12,\n  Struct_ = 13,\n  Union = 14,\n  FixedSizeBinary = 15,\n  FixedSizeList = 16,\n  Map = 17,\n  Duration = 18,\n  LargeBinary = 19,\n  LargeUtf8 = 20,\n  LargeList = 21\n}\n\nexport function unionToType(\n  type: Type,\n  accessor: (obj:Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8) => Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null\n): Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null {\n  switch(Type[type]) {\n    case 'NONE': return null;\n    case 'Null': return accessor(new Null())! as Null;\n    case 'Int': return accessor(new Int())! as Int;\n    case 'FloatingPoint': return accessor(new FloatingPoint())! as FloatingPoint;\n    case 'Binary': return accessor(new Binary())! as Binary;\n    case 'Utf8': return accessor(new Utf8())! as Utf8;\n    case 'Bool': return accessor(new Bool())! as Bool;\n    case 'Decimal': return accessor(new Decimal())! as Decimal;\n    case 'Date': return accessor(new Date())! as Date;\n    case 'Time': return accessor(new Time())! as Time;\n    case 'Timestamp': return accessor(new Timestamp())! as Timestamp;\n    case 'Interval': return accessor(new Interval())! as Interval;\n    case 'List': return accessor(new List())! as List;\n    case 'Struct_': return accessor(new Struct_())! as Struct_;\n    case 'Union': return accessor(new Union())! as Union;\n    case 'FixedSizeBinary': return accessor(new FixedSizeBinary())! as FixedSizeBinary;\n    case 'FixedSizeList': return accessor(new FixedSizeList())! as FixedSizeList;\n    case 'Map': return accessor(new Map())! as Map;\n    case 'Duration': return accessor(new Duration())! as Duration;\n    case 'LargeBinary': return accessor(new LargeBinary())! as LargeBinary;\n    case 'LargeUtf8': return accessor(new LargeUtf8())! as LargeUtf8;\n    case 'LargeList': return accessor(new LargeList())! as LargeList;\n    default: return null;\n  }\n}\n\nexport function unionListToType(\n  type: Type,\n  accessor: (index: number, obj:Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8) => Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null,\n  index: number\n): Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null {\n  switch(Type[type]) {\n    case 'NONE': return null;\n    case 'Null': return accessor(index, new Null())! as Null;\n    case 'Int': return accessor(index, new Int())! as Int;\n    case 'FloatingPoint': return accessor(index, new FloatingPoint())! as FloatingPoint;\n    case 'Binary': return accessor(index, new Binary())! as Binary;\n    case 'Utf8': return accessor(index, new Utf8())! as Utf8;\n    case 'Bool': return accessor(index, new Bool())! as Bool;\n    case 'Decimal': return accessor(index, new Decimal())! as Decimal;\n    case 'Date': return accessor(index, new Date())! as Date;\n    case 'Time': return accessor(index, new Time())! as Time;\n    case 'Timestamp': return accessor(index, new Timestamp())! as Timestamp;\n    case 'Interval': return accessor(index, new Interval())! as Interval;\n    case 'List': return accessor(index, new List())! as List;\n    case 'Struct_': return accessor(index, new Struct_())! as Struct_;\n    case 'Union': return accessor(index, new Union())! as Union;\n    case 'FixedSizeBinary': return accessor(index, new FixedSizeBinary())! as FixedSizeBinary;\n    case 'FixedSizeList': return accessor(index, new FixedSizeList())! as FixedSizeList;\n    case 'Map': return accessor(index, new Map())! as Map;\n    case 'Duration': return accessor(index, new Duration())! as Duration;\n    case 'LargeBinary': return accessor(index, new LargeBinary())! as LargeBinary;\n    case 'LargeUtf8': return accessor(index, new LargeUtf8())! as LargeUtf8;\n    case 'LargeList': return accessor(index, new LargeList())! as LargeList;\n    default: return null;\n  }\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Opaque binary data\n */\nexport class Binary {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBinary(bb, obj) {\n        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBinary(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startBinary(builder) {\n        builder.startObject(0);\n    }\n    static endBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBinary(builder) {\n        Binary.startBinary(builder);\n        return Binary.endBinary(builder);\n    }\n}\n\n//# sourceMappingURL=binary.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Opaque binary data\n */\nexport class Binary {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Binary {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsBinary(bb:flatbuffers.ByteBuffer, obj?:Binary):Binary {\n  return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsBinary(bb:flatbuffers.ByteBuffer, obj?:Binary):Binary {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startBinary(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endBinary(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createBinary(builder:flatbuffers.Builder):flatbuffers.Offset {\n  Binary.startBinary(builder);\n  return Binary.endBinary(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nexport class Bool {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBool(bb, obj) {\n        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBool(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startBool(builder) {\n        builder.startObject(0);\n    }\n    static endBool(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBool(builder) {\n        Bool.startBool(builder);\n        return Bool.endBool(builder);\n    }\n}\n\n//# sourceMappingURL=bool.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class Bool {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Bool {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsBool(bb:flatbuffers.ByteBuffer, obj?:Bool):Bool {\n  return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsBool(bb:flatbuffers.ByteBuffer, obj?:Bool):Bool {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startBool(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endBool(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createBool(builder:flatbuffers.Builder):flatbuffers.Offset {\n  Bool.startBool(builder);\n  return Bool.endBool(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { DateUnit } from './date-unit.mjs';\n/**\n * Date is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since UNIX epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n */\nexport class Date {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDate(bb, obj) {\n        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDate(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : DateUnit.MILLISECOND;\n    }\n    static startDate(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, DateUnit.MILLISECOND);\n    }\n    static endDate(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDate(builder, unit) {\n        Date.startDate(builder);\n        Date.addUnit(builder, unit);\n        return Date.endDate(builder);\n    }\n}\n\n//# sourceMappingURL=date.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { DateUnit } from './date-unit.js';\n\n\n/**\n * Date is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since UNIX epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n */\nexport class Date {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Date {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDate(bb:flatbuffers.ByteBuffer, obj?:Date):Date {\n  return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDate(bb:flatbuffers.ByteBuffer, obj?:Date):Date {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():DateUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : DateUnit.MILLISECOND;\n}\n\nstatic startDate(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:DateUnit) {\n  builder.addFieldInt16(0, unit, DateUnit.MILLISECOND);\n}\n\nstatic endDate(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createDate(builder:flatbuffers.Builder, unit:DateUnit):flatbuffers.Offset {\n  Date.startDate(builder);\n  Date.addUnit(builder, unit);\n  return Date.endDate(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var DateUnit;\n(function (DateUnit) {\n    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n})(DateUnit || (DateUnit = {}));\n\n//# sourceMappingURL=date-unit.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum DateUnit{\n  DAY = 0,\n  MILLISECOND = 1\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n */\nexport class Decimal {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDecimal(bb, obj) {\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDecimal(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Total number of decimal digits\n     */\n    precision() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of digits after the decimal point \".\"\n     */\n    scale() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of bits per value. The only accepted widths are 128 and 256.\n     * We use bitWidth for consistency with Int::bitWidth.\n     */\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;\n    }\n    static startDecimal(builder) {\n        builder.startObject(3);\n    }\n    static addPrecision(builder, precision) {\n        builder.addFieldInt32(0, precision, 0);\n    }\n    static addScale(builder, scale) {\n        builder.addFieldInt32(1, scale, 0);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(2, bitWidth, 128);\n    }\n    static endDecimal(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDecimal(builder, precision, scale, bitWidth) {\n        Decimal.startDecimal(builder);\n        Decimal.addPrecision(builder, precision);\n        Decimal.addScale(builder, scale);\n        Decimal.addBitWidth(builder, bitWidth);\n        return Decimal.endDecimal(builder);\n    }\n}\n\n//# sourceMappingURL=decimal.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n */\nexport class Decimal {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Decimal {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Total number of decimal digits\n */\nprecision():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\n/**\n * Number of digits after the decimal point \".\"\n */\nscale():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\n/**\n * Number of bits per value. The only accepted widths are 128 and 256.\n * We use bitWidth for consistency with Int::bitWidth.\n */\nbitWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 128;\n}\n\nstatic startDecimal(builder:flatbuffers.Builder) {\n  builder.startObject(3);\n}\n\nstatic addPrecision(builder:flatbuffers.Builder, precision:number) {\n  builder.addFieldInt32(0, precision, 0);\n}\n\nstatic addScale(builder:flatbuffers.Builder, scale:number) {\n  builder.addFieldInt32(1, scale, 0);\n}\n\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\n  builder.addFieldInt32(2, bitWidth, 128);\n}\n\nstatic endDecimal(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createDecimal(builder:flatbuffers.Builder, precision:number, scale:number, bitWidth:number):flatbuffers.Offset {\n  Decimal.startDecimal(builder);\n  Decimal.addPrecision(builder, precision);\n  Decimal.addScale(builder, scale);\n  Decimal.addBitWidth(builder, bitWidth);\n  return Decimal.endDecimal(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\nexport class Duration {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDuration(bb, obj) {\n        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDuration(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n    }\n    static startDuration(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n    static endDuration(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDuration(builder, unit) {\n        Duration.startDuration(builder);\n        Duration.addUnit(builder, unit);\n        return Duration.endDuration(builder);\n    }\n}\n\n//# sourceMappingURL=duration.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { TimeUnit } from './time-unit.js';\n\n\nexport class Duration {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Duration {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDuration(bb:flatbuffers.ByteBuffer, obj?:Duration):Duration {\n  return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDuration(bb:flatbuffers.ByteBuffer, obj?:Duration):Duration {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():TimeUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n}\n\nstatic startDuration(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\n  builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n}\n\nstatic endDuration(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createDuration(builder:flatbuffers.Builder, unit:TimeUnit):flatbuffers.Offset {\n  Duration.startDuration(builder);\n  Duration.addUnit(builder, unit);\n  return Duration.endDuration(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n})(TimeUnit || (TimeUnit = {}));\n\n//# sourceMappingURL=time-unit.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum TimeUnit{\n  SECOND = 0,\n  MILLISECOND = 1,\n  MICROSECOND = 2,\n  NANOSECOND = 3\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nexport class FixedSizeBinary {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFixedSizeBinary(bb, obj) {\n        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFixedSizeBinary(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Number of bytes per value\n     */\n    byteWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    static startFixedSizeBinary(builder) {\n        builder.startObject(1);\n    }\n    static addByteWidth(builder, byteWidth) {\n        builder.addFieldInt32(0, byteWidth, 0);\n    }\n    static endFixedSizeBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFixedSizeBinary(builder, byteWidth) {\n        FixedSizeBinary.startFixedSizeBinary(builder);\n        FixedSizeBinary.addByteWidth(builder, byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(builder);\n    }\n}\n\n//# sourceMappingURL=fixed-size-binary.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class FixedSizeBinary {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):FixedSizeBinary {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsFixedSizeBinary(bb:flatbuffers.ByteBuffer, obj?:FixedSizeBinary):FixedSizeBinary {\n  return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsFixedSizeBinary(bb:flatbuffers.ByteBuffer, obj?:FixedSizeBinary):FixedSizeBinary {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Number of bytes per value\n */\nbyteWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\nstatic startFixedSizeBinary(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addByteWidth(builder:flatbuffers.Builder, byteWidth:number) {\n  builder.addFieldInt32(0, byteWidth, 0);\n}\n\nstatic endFixedSizeBinary(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createFixedSizeBinary(builder:flatbuffers.Builder, byteWidth:number):flatbuffers.Offset {\n  FixedSizeBinary.startFixedSizeBinary(builder);\n  FixedSizeBinary.addByteWidth(builder, byteWidth);\n  return FixedSizeBinary.endFixedSizeBinary(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nexport class FixedSizeList {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFixedSizeList(bb, obj) {\n        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFixedSizeList(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Number of list items per value\n     */\n    listSize() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    static startFixedSizeList(builder) {\n        builder.startObject(1);\n    }\n    static addListSize(builder, listSize) {\n        builder.addFieldInt32(0, listSize, 0);\n    }\n    static endFixedSizeList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFixedSizeList(builder, listSize) {\n        FixedSizeList.startFixedSizeList(builder);\n        FixedSizeList.addListSize(builder, listSize);\n        return FixedSizeList.endFixedSizeList(builder);\n    }\n}\n\n//# sourceMappingURL=fixed-size-list.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class FixedSizeList {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):FixedSizeList {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsFixedSizeList(bb:flatbuffers.ByteBuffer, obj?:FixedSizeList):FixedSizeList {\n  return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsFixedSizeList(bb:flatbuffers.ByteBuffer, obj?:FixedSizeList):FixedSizeList {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Number of list items per value\n */\nlistSize():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\nstatic startFixedSizeList(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addListSize(builder:flatbuffers.Builder, listSize:number) {\n  builder.addFieldInt32(0, listSize, 0);\n}\n\nstatic endFixedSizeList(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createFixedSizeList(builder:flatbuffers.Builder, listSize:number):flatbuffers.Offset {\n  FixedSizeList.startFixedSizeList(builder);\n  FixedSizeList.addListSize(builder, listSize);\n  return FixedSizeList.endFixedSizeList(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Precision } from './precision.mjs';\nexport class FloatingPoint {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsFloatingPoint(bb, obj) {\n        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsFloatingPoint(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    precision() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : Precision.HALF;\n    }\n    static startFloatingPoint(builder) {\n        builder.startObject(1);\n    }\n    static addPrecision(builder, precision) {\n        builder.addFieldInt16(0, precision, Precision.HALF);\n    }\n    static endFloatingPoint(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createFloatingPoint(builder, precision) {\n        FloatingPoint.startFloatingPoint(builder);\n        FloatingPoint.addPrecision(builder, precision);\n        return FloatingPoint.endFloatingPoint(builder);\n    }\n}\n\n//# sourceMappingURL=floating-point.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Precision } from './precision.js';\n\n\nexport class FloatingPoint {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):FloatingPoint {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsFloatingPoint(bb:flatbuffers.ByteBuffer, obj?:FloatingPoint):FloatingPoint {\n  return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsFloatingPoint(bb:flatbuffers.ByteBuffer, obj?:FloatingPoint):FloatingPoint {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nprecision():Precision {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : Precision.HALF;\n}\n\nstatic startFloatingPoint(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addPrecision(builder:flatbuffers.Builder, precision:Precision) {\n  builder.addFieldInt16(0, precision, Precision.HALF);\n}\n\nstatic endFloatingPoint(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createFloatingPoint(builder:flatbuffers.Builder, precision:Precision):flatbuffers.Offset {\n  FloatingPoint.startFloatingPoint(builder);\n  FloatingPoint.addPrecision(builder, precision);\n  return FloatingPoint.endFloatingPoint(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var Precision;\n(function (Precision) {\n    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n})(Precision || (Precision = {}));\n\n//# sourceMappingURL=precision.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum Precision{\n  HALF = 0,\n  SINGLE = 1,\n  DOUBLE = 2\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { IntervalUnit } from './interval-unit.mjs';\nexport class Interval {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsInterval(bb, obj) {\n        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsInterval(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : IntervalUnit.YEAR_MONTH;\n    }\n    static startInterval(builder) {\n        builder.startObject(1);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, IntervalUnit.YEAR_MONTH);\n    }\n    static endInterval(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createInterval(builder, unit) {\n        Interval.startInterval(builder);\n        Interval.addUnit(builder, unit);\n        return Interval.endInterval(builder);\n    }\n}\n\n//# sourceMappingURL=interval.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { IntervalUnit } from './interval-unit.js';\n\n\nexport class Interval {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Interval {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsInterval(bb:flatbuffers.ByteBuffer, obj?:Interval):Interval {\n  return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsInterval(bb:flatbuffers.ByteBuffer, obj?:Interval):Interval {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():IntervalUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : IntervalUnit.YEAR_MONTH;\n}\n\nstatic startInterval(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:IntervalUnit) {\n  builder.addFieldInt16(0, unit, IntervalUnit.YEAR_MONTH);\n}\n\nstatic endInterval(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createInterval(builder:flatbuffers.Builder, unit:IntervalUnit):flatbuffers.Offset {\n  Interval.startInterval(builder);\n  Interval.addUnit(builder, unit);\n  return Interval.endInterval(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var IntervalUnit;\n(function (IntervalUnit) {\n    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n    IntervalUnit[IntervalUnit[\"MONTH_DAY_NANO\"] = 2] = \"MONTH_DAY_NANO\";\n})(IntervalUnit || (IntervalUnit = {}));\n\n//# sourceMappingURL=interval-unit.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum IntervalUnit{\n  YEAR_MONTH = 0,\n  DAY_TIME = 1,\n  MONTH_DAY_NANO = 2\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeBinary {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeBinary(bb, obj) {\n        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeBinary(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeBinary(builder) {\n        builder.startObject(0);\n    }\n    static endLargeBinary(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeBinary(builder) {\n        LargeBinary.startLargeBinary(builder);\n        return LargeBinary.endLargeBinary(builder);\n    }\n}\n\n//# sourceMappingURL=large-binary.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeBinary {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):LargeBinary {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsLargeBinary(bb:flatbuffers.ByteBuffer, obj?:LargeBinary):LargeBinary {\n  return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsLargeBinary(bb:flatbuffers.ByteBuffer, obj?:LargeBinary):LargeBinary {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startLargeBinary(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endLargeBinary(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createLargeBinary(builder:flatbuffers.Builder):flatbuffers.Offset {\n  LargeBinary.startLargeBinary(builder);\n  return LargeBinary.endLargeBinary(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeList {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeList(bb, obj) {\n        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeList(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeList(builder) {\n        builder.startObject(0);\n    }\n    static endLargeList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeList(builder) {\n        LargeList.startLargeList(builder);\n        return LargeList.endLargeList(builder);\n    }\n}\n\n//# sourceMappingURL=large-list.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeList {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):LargeList {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsLargeList(bb:flatbuffers.ByteBuffer, obj?:LargeList):LargeList {\n  return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsLargeList(bb:flatbuffers.ByteBuffer, obj?:LargeList):LargeList {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startLargeList(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endLargeList(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createLargeList(builder:flatbuffers.Builder):flatbuffers.Offset {\n  LargeList.startLargeList(builder);\n  return LargeList.endLargeList(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeUtf8 {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsLargeUtf8(bb, obj) {\n        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsLargeUtf8(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startLargeUtf8(builder) {\n        builder.startObject(0);\n    }\n    static endLargeUtf8(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createLargeUtf8(builder) {\n        LargeUtf8.startLargeUtf8(builder);\n        return LargeUtf8.endLargeUtf8(builder);\n    }\n}\n\n//# sourceMappingURL=large-utf8.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n */\nexport class LargeUtf8 {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):LargeUtf8 {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsLargeUtf8(bb:flatbuffers.ByteBuffer, obj?:LargeUtf8):LargeUtf8 {\n  return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsLargeUtf8(bb:flatbuffers.ByteBuffer, obj?:LargeUtf8):LargeUtf8 {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startLargeUtf8(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endLargeUtf8(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createLargeUtf8(builder:flatbuffers.Builder):flatbuffers.Offset {\n  LargeUtf8.startLargeUtf8(builder);\n  return LargeUtf8.endLargeUtf8(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nexport class List {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsList(bb, obj) {\n        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsList(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startList(builder) {\n        builder.startObject(0);\n    }\n    static endList(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createList(builder) {\n        List.startList(builder);\n        return List.endList(builder);\n    }\n}\n\n//# sourceMappingURL=list.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class List {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):List {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsList(bb:flatbuffers.ByteBuffer, obj?:List):List {\n  return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsList(bb:flatbuffers.ByteBuffer, obj?:List):List {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startList(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endList(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createList(builder:flatbuffers.Builder):flatbuffers.Offset {\n  List.startList(builder);\n  return List.endList(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entries: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field.\n *\n * In a field with Map type, the field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entries\", \"key\", and \"value\", but this is\n * not enforced.\n *\n * Map\n * ```text\n *   - child[0] entries: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n * ```\n * Neither the \"entries\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n */\nexport class Map {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsMap(bb, obj) {\n        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsMap(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Set to true if the keys within each value are sorted\n     */\n    keysSorted() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startMap(builder) {\n        builder.startObject(1);\n    }\n    static addKeysSorted(builder, keysSorted) {\n        builder.addFieldInt8(0, +keysSorted, +false);\n    }\n    static endMap(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createMap(builder, keysSorted) {\n        Map.startMap(builder);\n        Map.addKeysSorted(builder, keysSorted);\n        return Map.endMap(builder);\n    }\n}\n\n//# sourceMappingURL=map.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entries: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field.\n *\n * In a field with Map type, the field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entries\", \"key\", and \"value\", but this is\n * not enforced.\n *\n * Map\n * ```text\n *   - child[0] entries: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n * ```\n * Neither the \"entries\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n */\nexport class Map {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Map {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {\n  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Set to true if the keys within each value are sorted\n */\nkeysSorted():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nstatic startMap(builder:flatbuffers.Builder) {\n  builder.startObject(1);\n}\n\nstatic addKeysSorted(builder:flatbuffers.Builder, keysSorted:boolean) {\n  builder.addFieldInt8(0, +keysSorted, +false);\n}\n\nstatic endMap(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createMap(builder:flatbuffers.Builder, keysSorted:boolean):flatbuffers.Offset {\n  Map.startMap(builder);\n  Map.addKeysSorted(builder, keysSorted);\n  return Map.endMap(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * These are stored in the flatbuffer in the Type union below\n */\nexport class Null {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsNull(bb, obj) {\n        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsNull(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startNull(builder) {\n        builder.startObject(0);\n    }\n    static endNull(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createNull(builder) {\n        Null.startNull(builder);\n        return Null.endNull(builder);\n    }\n}\n\n//# sourceMappingURL=null.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * These are stored in the flatbuffer in the Type union below\n */\nexport class Null {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Null {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsNull(bb:flatbuffers.ByteBuffer, obj?:Null):Null {\n  return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsNull(bb:flatbuffers.ByteBuffer, obj?:Null):Null {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startNull(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endNull(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createNull(builder:flatbuffers.Builder):flatbuffers.Offset {\n  Null.startNull(builder);\n  return Null.endNull(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n */\nexport class Struct_ {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsStruct_(bb, obj) {\n        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsStruct_(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startStruct_(builder) {\n        builder.startObject(0);\n    }\n    static endStruct_(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createStruct_(builder) {\n        Struct_.startStruct_(builder);\n        return Struct_.endStruct_(builder);\n    }\n}\n\n//# sourceMappingURL=struct_.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n */\nexport class Struct_ {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Struct_ {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsStruct_(bb:flatbuffers.ByteBuffer, obj?:Struct_):Struct_ {\n  return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsStruct_(bb:flatbuffers.ByteBuffer, obj?:Struct_):Struct_ {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startStruct_(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endStruct_(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createStruct_(builder:flatbuffers.Builder):flatbuffers.Offset {\n  Struct_.startStruct_(builder);\n  return Struct_.endStruct_(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\n * Time is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since midnight, stored in either of four units: seconds,\n * milliseconds, microseconds or nanoseconds.\n *\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\n * * SECOND and MILLISECOND: 32 bits\n * * MICROSECOND and NANOSECOND: 64 bits\n *\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\n * (exclusive), adjusted for the time unit (for example, up to 86400000\n * exclusive for the MILLISECOND unit).\n * This definition doesn't allow for leap seconds. Time values from\n * measurements with leap seconds will need to be corrected when ingesting\n * into Arrow (for example by replacing the value 86400 with 86399).\n */\nexport class Time {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTime(bb, obj) {\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTime(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n    }\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n    static startTime(builder) {\n        builder.startObject(2);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(1, bitWidth, 32);\n    }\n    static endTime(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTime(builder, unit, bitWidth) {\n        Time.startTime(builder);\n        Time.addUnit(builder, unit);\n        Time.addBitWidth(builder, bitWidth);\n        return Time.endTime(builder);\n    }\n}\n\n//# sourceMappingURL=time.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { TimeUnit } from './time-unit.js';\n\n\n/**\n * Time is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since midnight, stored in either of four units: seconds,\n * milliseconds, microseconds or nanoseconds.\n *\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\n * * SECOND and MILLISECOND: 32 bits\n * * MICROSECOND and NANOSECOND: 64 bits\n *\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\n * (exclusive), adjusted for the time unit (for example, up to 86400000\n * exclusive for the MILLISECOND unit).\n * This definition doesn't allow for leap seconds. Time values from\n * measurements with leap seconds will need to be corrected when ingesting\n * into Arrow (for example by replacing the value 86400 with 86399).\n */\nexport class Time {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Time {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():TimeUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n}\n\nbitWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n}\n\nstatic startTime(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\n  builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n}\n\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\n  builder.addFieldInt32(1, bitWidth, 32);\n}\n\nstatic endTime(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createTime(builder:flatbuffers.Builder, unit:TimeUnit, bitWidth:number):flatbuffers.Offset {\n  Time.startTime(builder);\n  Time.addUnit(builder, unit);\n  Time.addBitWidth(builder, bitWidth);\n  return Time.endTime(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\n * Timestamp is a 64-bit signed integer representing an elapsed time since a\n * fixed epoch, stored in either of four units: seconds, milliseconds,\n * microseconds or nanoseconds, and is optionally annotated with a timezone.\n *\n * Timestamp values do not include any leap seconds (in other words, all\n * days are considered 86400 seconds long).\n *\n * Timestamps with a non-empty timezone\n * ------------------------------------\n *\n * If a Timestamp column has a non-empty timezone value, its epoch is\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in the *UTC* timezone\n * (the Unix epoch), regardless of the Timestamp's own timezone.\n *\n * Therefore, timestamp values with a non-empty timezone correspond to\n * physical points in time together with some additional information about\n * how the data was obtained and/or how to display it (the timezone).\n *\n *   For example, the timestamp value 0 with the timezone string \"Europe/Paris\"\n *   corresponds to \"January 1st 1970, 00h00\" in the UTC timezone, but the\n *   application may prefer to display it as \"January 1st 1970, 01h00\" in\n *   the Europe/Paris timezone (which is the same physical point in time).\n *\n * One consequence is that timestamp values with a non-empty timezone\n * can be compared and ordered directly, since they all share the same\n * well-known point of reference (the Unix epoch).\n *\n * Timestamps with an unset / empty timezone\n * -----------------------------------------\n *\n * If a Timestamp column has no timezone value, its epoch is\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in an *unknown* timezone.\n *\n * Therefore, timestamp values without a timezone cannot be meaningfully\n * interpreted as physical points in time, but only as calendar / clock\n * indications (\"wall clock time\") in an unspecified timezone.\n *\n *   For example, the timestamp value 0 with an empty timezone string\n *   corresponds to \"January 1st 1970, 00h00\" in an unknown timezone: there\n *   is not enough information to interpret it as a well-defined physical\n *   point in time.\n *\n * One consequence is that timestamp values without a timezone cannot\n * be reliably compared or ordered, since they may have different points of\n * reference.  In particular, it is *not* possible to interpret an unset\n * or empty timezone as the same as \"UTC\".\n *\n * Conversion between timezones\n * ----------------------------\n *\n * If a Timestamp column has a non-empty timezone, changing the timezone\n * to a different non-empty value is a metadata-only operation:\n * the timestamp values need not change as their point of reference remains\n * the same (the Unix epoch).\n *\n * However, if a Timestamp column has no timezone value, changing it to a\n * non-empty value requires to think about the desired semantics.\n * One possibility is to assume that the original timestamp values are\n * relative to the epoch of the timezone being set; timestamp values should\n * then adjusted to the Unix epoch (for example, changing the timezone from\n * empty to \"Europe/Paris\" would require converting the timestamp values\n * from \"Europe/Paris\" to \"UTC\", which seems counter-intuitive but is\n * nevertheless correct).\n *\n * Guidelines for encoding data from external libraries\n * ----------------------------------------------------\n *\n * Date & time libraries often have multiple different data types for temporal\n * data. In order to ease interoperability between different implementations the\n * Arrow project has some recommendations for encoding these types into a Timestamp\n * column.\n *\n * An \"instant\" represents a physical point in time that has no relevant timezone\n * (for example, astronomical data). To encode an instant, use a Timestamp with\n * the timezone string set to \"UTC\", and make sure the Timestamp values\n * are relative to the UTC epoch (January 1st 1970, midnight).\n *\n * A \"zoned date-time\" represents a physical point in time annotated with an\n * informative timezone (for example, the timezone in which the data was\n * recorded).  To encode a zoned date-time, use a Timestamp with the timezone\n * string set to the name of the timezone, and make sure the Timestamp values\n * are relative to the UTC epoch (January 1st 1970, midnight).\n *\n *  (There is some ambiguity between an instant and a zoned date-time with the\n *   UTC timezone.  Both of these are stored the same in Arrow.  Typically,\n *   this distinction does not matter.  If it does, then an application should\n *   use custom metadata or an extension type to distinguish between the two cases.)\n *\n * An \"offset date-time\" represents a physical point in time combined with an\n * explicit offset from UTC.  To encode an offset date-time, use a Timestamp\n * with the timezone string set to the numeric timezone offset string\n * (e.g. \"+03:00\"), and make sure the Timestamp values are relative to\n * the UTC epoch (January 1st 1970, midnight).\n *\n * A \"naive date-time\" (also called \"local date-time\" in some libraries)\n * represents a wall clock time combined with a calendar date, but with\n * no indication of how to map this information to a physical point in time.\n * Naive date-times must be handled with care because of this missing\n * information, and also because daylight saving time (DST) may make\n * some values ambiguous or non-existent. A naive date-time may be\n * stored as a struct with Date and Time fields. However, it may also be\n * encoded into a Timestamp column with an empty timezone. The timestamp\n * values should be computed \"as if\" the timezone of the date-time values\n * was UTC; for example, the naive date-time \"January 1st 1970, 00h00\" would\n * be encoded as timestamp value 0.\n */\nexport class Timestamp {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTimestamp(bb, obj) {\n        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTimestamp(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.SECOND;\n    }\n    timezone(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startTimestamp(builder) {\n        builder.startObject(2);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, TimeUnit.SECOND);\n    }\n    static addTimezone(builder, timezoneOffset) {\n        builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n    static endTimestamp(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTimestamp(builder, unit, timezoneOffset) {\n        Timestamp.startTimestamp(builder);\n        Timestamp.addUnit(builder, unit);\n        Timestamp.addTimezone(builder, timezoneOffset);\n        return Timestamp.endTimestamp(builder);\n    }\n}\n\n//# sourceMappingURL=timestamp.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { TimeUnit } from './time-unit.js';\n\n\n/**\n * Timestamp is a 64-bit signed integer representing an elapsed time since a\n * fixed epoch, stored in either of four units: seconds, milliseconds,\n * microseconds or nanoseconds, and is optionally annotated with a timezone.\n *\n * Timestamp values do not include any leap seconds (in other words, all\n * days are considered 86400 seconds long).\n *\n * Timestamps with a non-empty timezone\n * ------------------------------------\n *\n * If a Timestamp column has a non-empty timezone value, its epoch is\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in the *UTC* timezone\n * (the Unix epoch), regardless of the Timestamp's own timezone.\n *\n * Therefore, timestamp values with a non-empty timezone correspond to\n * physical points in time together with some additional information about\n * how the data was obtained and/or how to display it (the timezone).\n *\n *   For example, the timestamp value 0 with the timezone string \"Europe/Paris\"\n *   corresponds to \"January 1st 1970, 00h00\" in the UTC timezone, but the\n *   application may prefer to display it as \"January 1st 1970, 01h00\" in\n *   the Europe/Paris timezone (which is the same physical point in time).\n *\n * One consequence is that timestamp values with a non-empty timezone\n * can be compared and ordered directly, since they all share the same\n * well-known point of reference (the Unix epoch).\n *\n * Timestamps with an unset / empty timezone\n * -----------------------------------------\n *\n * If a Timestamp column has no timezone value, its epoch is\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in an *unknown* timezone.\n *\n * Therefore, timestamp values without a timezone cannot be meaningfully\n * interpreted as physical points in time, but only as calendar / clock\n * indications (\"wall clock time\") in an unspecified timezone.\n *\n *   For example, the timestamp value 0 with an empty timezone string\n *   corresponds to \"January 1st 1970, 00h00\" in an unknown timezone: there\n *   is not enough information to interpret it as a well-defined physical\n *   point in time.\n *\n * One consequence is that timestamp values without a timezone cannot\n * be reliably compared or ordered, since they may have different points of\n * reference.  In particular, it is *not* possible to interpret an unset\n * or empty timezone as the same as \"UTC\".\n *\n * Conversion between timezones\n * ----------------------------\n *\n * If a Timestamp column has a non-empty timezone, changing the timezone\n * to a different non-empty value is a metadata-only operation:\n * the timestamp values need not change as their point of reference remains\n * the same (the Unix epoch).\n *\n * However, if a Timestamp column has no timezone value, changing it to a\n * non-empty value requires to think about the desired semantics.\n * One possibility is to assume that the original timestamp values are\n * relative to the epoch of the timezone being set; timestamp values should\n * then adjusted to the Unix epoch (for example, changing the timezone from\n * empty to \"Europe/Paris\" would require converting the timestamp values\n * from \"Europe/Paris\" to \"UTC\", which seems counter-intuitive but is\n * nevertheless correct).\n *\n * Guidelines for encoding data from external libraries\n * ----------------------------------------------------\n *\n * Date & time libraries often have multiple different data types for temporal\n * data. In order to ease interoperability between different implementations the\n * Arrow project has some recommendations for encoding these types into a Timestamp\n * column.\n *\n * An \"instant\" represents a physical point in time that has no relevant timezone\n * (for example, astronomical data). To encode an instant, use a Timestamp with\n * the timezone string set to \"UTC\", and make sure the Timestamp values\n * are relative to the UTC epoch (January 1st 1970, midnight).\n *\n * A \"zoned date-time\" represents a physical point in time annotated with an\n * informative timezone (for example, the timezone in which the data was\n * recorded).  To encode a zoned date-time, use a Timestamp with the timezone\n * string set to the name of the timezone, and make sure the Timestamp values\n * are relative to the UTC epoch (January 1st 1970, midnight).\n *\n *  (There is some ambiguity between an instant and a zoned date-time with the\n *   UTC timezone.  Both of these are stored the same in Arrow.  Typically,\n *   this distinction does not matter.  If it does, then an application should\n *   use custom metadata or an extension type to distinguish between the two cases.)\n *\n * An \"offset date-time\" represents a physical point in time combined with an\n * explicit offset from UTC.  To encode an offset date-time, use a Timestamp\n * with the timezone string set to the numeric timezone offset string\n * (e.g. \"+03:00\"), and make sure the Timestamp values are relative to\n * the UTC epoch (January 1st 1970, midnight).\n *\n * A \"naive date-time\" (also called \"local date-time\" in some libraries)\n * represents a wall clock time combined with a calendar date, but with\n * no indication of how to map this information to a physical point in time.\n * Naive date-times must be handled with care because of this missing\n * information, and also because daylight saving time (DST) may make\n * some values ambiguous or non-existent. A naive date-time may be\n * stored as a struct with Date and Time fields. However, it may also be\n * encoded into a Timestamp column with an empty timezone. The timestamp\n * values should be computed \"as if\" the timezone of the date-time values\n * was UTC; for example, the naive date-time \"January 1st 1970, 00h00\" would\n * be encoded as timestamp value 0.\n */\nexport class Timestamp {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Timestamp {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {\n  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():TimeUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.SECOND;\n}\n\n/**\n * The timezone is an optional string indicating the name of a timezone,\n * one of:\n *\n * * As used in the Olson timezone database (the \"tz database\" or\n *   \"tzdata\"), such as \"America/New_York\".\n * * An absolute timezone offset of the form \"+XX:XX\" or \"-XX:XX\",\n *   such as \"+07:30\".\n *\n * Whether a timezone string is present indicates different semantics about\n * the data (see above).\n */\ntimezone():string|null\ntimezone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ntimezone(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startTimestamp(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\n  builder.addFieldInt16(0, unit, TimeUnit.SECOND);\n}\n\nstatic addTimezone(builder:flatbuffers.Builder, timezoneOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, timezoneOffset, 0);\n}\n\nstatic endTimestamp(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createTimestamp(builder:flatbuffers.Builder, unit:TimeUnit, timezoneOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Timestamp.startTimestamp(builder);\n  Timestamp.addUnit(builder, unit);\n  Timestamp.addTimezone(builder, timezoneOffset);\n  return Timestamp.endTimestamp(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { UnionMode } from './union-mode.mjs';\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child `typeIds[offset]` is the id used in the type vector\n */\nexport class Union {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsUnion(bb, obj) {\n        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsUnion(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    mode() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : UnionMode.Sparse;\n    }\n    typeIds(index) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n    typeIdsLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    typeIdsArray() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    static startUnion(builder) {\n        builder.startObject(2);\n    }\n    static addMode(builder, mode) {\n        builder.addFieldInt16(0, mode, UnionMode.Sparse);\n    }\n    static addTypeIds(builder, typeIdsOffset) {\n        builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n    static createTypeIdsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt32(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startTypeIdsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endUnion(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createUnion(builder, mode, typeIdsOffset) {\n        Union.startUnion(builder);\n        Union.addMode(builder, mode);\n        Union.addTypeIds(builder, typeIdsOffset);\n        return Union.endUnion(builder);\n    }\n}\n\n//# sourceMappingURL=union.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { UnionMode } from './union-mode.js';\n\n\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child `typeIds[offset]` is the id used in the type vector\n */\nexport class Union {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Union {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsUnion(bb:flatbuffers.ByteBuffer, obj?:Union):Union {\n  return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsUnion(bb:flatbuffers.ByteBuffer, obj?:Union):Union {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nmode():UnionMode {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : UnionMode.Sparse;\n}\n\ntypeIds(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n}\n\ntypeIdsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\ntypeIdsArray():Int32Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nstatic startUnion(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addMode(builder:flatbuffers.Builder, mode:UnionMode) {\n  builder.addFieldInt16(0, mode, UnionMode.Sparse);\n}\n\nstatic addTypeIds(builder:flatbuffers.Builder, typeIdsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, typeIdsOffset, 0);\n}\n\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt32(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startTypeIdsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endUnion(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createUnion(builder:flatbuffers.Builder, mode:UnionMode, typeIdsOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Union.startUnion(builder);\n  Union.addMode(builder, mode);\n  Union.addTypeIds(builder, typeIdsOffset);\n  return Union.endUnion(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var UnionMode;\n(function (UnionMode) {\n    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n})(UnionMode || (UnionMode = {}));\n\n//# sourceMappingURL=union-mode.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum UnionMode{\n  Sparse = 0,\n  Dense = 1\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Unicode with UTF-8 encoding\n */\nexport class Utf8 {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsUtf8(bb, obj) {\n        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsUtf8(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static startUtf8(builder) {\n        builder.startObject(0);\n    }\n    static endUtf8(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createUtf8(builder) {\n        Utf8.startUtf8(builder);\n        return Utf8.endUtf8(builder);\n    }\n}\n\n//# sourceMappingURL=utf8.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Unicode with UTF-8 encoding\n */\nexport class Utf8 {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Utf8 {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsUtf8(bb:flatbuffers.ByteBuffer, obj?:Utf8):Utf8 {\n  return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsUtf8(bb:flatbuffers.ByteBuffer, obj?:Utf8):Utf8 {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startUtf8(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endUtf8(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createUtf8(builder:flatbuffers.Builder):flatbuffers.Offset {\n  Utf8.startUtf8(builder);\n  return Utf8.endUtf8(builder);\n}\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncGenerator, __await, __awaiter } from \"tslib\";\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer.mjs';\n/** @ignore */\nexport default {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromDOMStream(source) {\n        return pump(fromDOMStream(source));\n    },\n    fromNodeStream(stream) {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream(source, options) {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream(source, options) {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    const it = toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = Number.isNaN(size - bufferLength) ?\n                it.next() : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return(null));\n    }\n    return null;\n}\n/** @ignore */\nfunction fromAsyncIterable(source) {\n    return __asyncGenerator(this, arguments, function* fromAsyncIterable_1() {\n        let done, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before creating the source AsyncIterator\n        ({ cmd, size } = (yield yield __await(null)));\n        // initialize the iterator\n        const it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                    ? yield __await(it.next())\n                    : yield __await(it.next(size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (typeof it.throw === 'function') && (yield __await(it.throw(e)));\n        }\n        finally {\n            (threw === false) && (typeof it.return === 'function') && (yield __await(it.return(new Uint8Array(0))));\n        }\n        return yield __await(null);\n    });\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nfunction fromDOMStream(source) {\n    return __asyncGenerator(this, arguments, function* fromDOMStream_1() {\n        let done = false, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we establish the ReadableStream lock\n        ({ cmd, size } = yield yield __await(null));\n        // initialize the reader and lock the stream\n        const it = new AdaptiveByteReader(source);\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                    ? yield __await(it['read']())\n                    : yield __await(it['read'](size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(toUint8Array(buffer));\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (yield __await(it['cancel'](e)));\n        }\n        finally {\n            (threw === false) ? (yield __await(it['cancel']()))\n                : source['locked'] && it.releaseLock();\n        }\n        return yield __await(null);\n    });\n}\n/** @ignore */\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.reader = null;\n        this.reader = this.source['getReader']();\n        // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n        // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n        // about why these errors are raised, but I'm sure there's some important spec reason that\n        // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n        // only solution in this case :/\n        this.reader['closed'].catch(() => { });\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = null;\n    }\n    cancel(reason) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { reader, source } = this;\n            reader && (yield reader['cancel'](reason).catch(() => { }));\n            source && (source['locked'] && this.releaseLock());\n        });\n    }\n    read(size) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (size === 0) {\n                return { done: this.reader == null, value: new Uint8Array(0) };\n            }\n            const result = yield this.reader.read();\n            !result.done && (result.value = toUint8Array(result));\n            return result;\n        });\n    }\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n    const handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nfunction fromNodeStream(stream) {\n    return __asyncGenerator(this, arguments, function* fromNodeStream_1() {\n        const events = [];\n        let event = 'error';\n        let done = false, err = null;\n        let cmd, size, bufferLength = 0;\n        let buffers = [], buffer;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we\n        // add the listener for the source stream's 'readable' event.\n        ({ cmd, size } = yield yield __await(null));\n        // ignore stdin if it's a TTY\n        if (stream['isTTY']) {\n            yield yield __await(new Uint8Array(0));\n            return yield __await(null);\n        }\n        try {\n            // initialize the stream event handlers\n            events[0] = onEvent(stream, 'end');\n            events[1] = onEvent(stream, 'error');\n            do {\n                events[2] = onEvent(stream, 'readable');\n                // wait on the first message event from the stream\n                [event, err] = yield __await(Promise.race(events.map((x) => x[2])));\n                // if the stream emitted an Error, rethrow it\n                if (event === 'error') {\n                    break;\n                }\n                if (!(done = event === 'end')) {\n                    // If the size is NaN, request to read everything in the stream's internal buffer\n                    if (!Number.isFinite(size - bufferLength)) {\n                        buffer = toUint8Array(stream['read']());\n                    }\n                    else {\n                        buffer = toUint8Array(stream['read'](size - bufferLength));\n                        // If the byteLength is 0, then the requested amount is more than the stream has\n                        // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                        // continue emitting readable events, so request to read everything the stream\n                        // has in its internal buffer right now.\n                        if (buffer.byteLength < (size - bufferLength)) {\n                            buffer = toUint8Array(stream['read']());\n                        }\n                    }\n                    // if chunk is not null or empty, push it onto the queue\n                    if (buffer.byteLength > 0) {\n                        buffers.push(buffer);\n                        bufferLength += buffer.byteLength;\n                    }\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        finally {\n            yield __await(cleanup(events, event === 'error' ? err : null));\n        }\n        return yield __await(null);\n        function cleanup(events, err) {\n            buffer = buffers = null;\n            return new Promise((resolve, reject) => {\n                for (const [evt, fn] of events) {\n                    stream['off'](evt, fn);\n                }\n                try {\n                    // Some stream implementations don't call the destroy callback,\n                    // because it's really a node-internal API. Just calling `destroy`\n                    // here should be enough to conform to the ReadableStream contract\n                    const destroy = stream['destroy'];\n                    destroy && destroy.call(stream, err);\n                    err = undefined;\n                }\n                catch (e) {\n                    err = e || err;\n                }\n                finally {\n                    err != null ? reject(err) : resolve();\n                }\n            });\n        }\n    });\n}\n\n//# sourceMappingURL=adapters.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer.js';\n\nimport { ReadableDOMStreamOptions } from './interfaces.js';\n\ntype Uint8ArrayGenerator = Generator<Uint8Array, null, { cmd: 'peek' | 'read'; size: number }>;\ntype AsyncUint8ArrayGenerator = AsyncGenerator<Uint8Array, null, { cmd: 'peek' | 'read'; size: number }>;\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Uint8ArrayGenerator | AsyncUint8ArrayGenerator>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any>null);\n\n    // initialize the iterator\n    const it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = Number.isNaN(size - bufferLength) ?\n                it.next() : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return(null!));\n    }\n    return null;\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = (yield <any>null)!);\n\n    // initialize the iterator\n    const it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                ? await it.next()\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return(new Uint8Array(0)));\n    }\n    return null;\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any>null);\n\n    // initialize the reader and lock the stream\n    const it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                ? await it['read']()\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n    return null;\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private reader: ReadableStreamDefaultReader<T> | null = null;\n\n    constructor(private source: ReadableStream<T>) {\n        this.reader = this.source['getReader']();\n        // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n        // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n        // about why these errors are raised, but I'm sure there's some important spec reason that\n        // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n        // only solution in this case :/\n        this.reader['closed'].catch(() => { });\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => { }));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadValueResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) } as ReadableStreamReadValueResult<Uint8Array>;\n        }\n        const result = await this.reader!.read() as ReadableStreamReadValueResult<any>;\n        !result.done && (result.value = toUint8Array(result));\n        return result;\n    }\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    const handler = (_: any) => resolve([event, _]);\n    let resolve: (value: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n\n    const events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any>null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) {\n        yield new Uint8Array(0);\n        return null;\n    }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!Number.isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read']());\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if ((buffer as Uint8Array).byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read']());\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if ((buffer as Uint8Array).byteLength > 0) {\n                    buffers.push(buffer as Uint8Array);\n                    bufferLength += (buffer as Uint8Array).byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    return null;\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any>null;\n        return new Promise<void>((resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e as T || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncValues, __awaiter } from \"tslib\";\nimport streamAdapters from './adapters.mjs';\nimport { decodeUtf8 } from '../util/utf8.mjs';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces.mjs';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer.mjs';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat.mjs';\n/** @ignore */\nexport class AsyncByteQueue extends AsyncQueue {\n    write(value) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value);\n        }\n    }\n    toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values)[0] : (() => __awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            const buffers = [];\n            let byteLength = 0;\n            try {\n                for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {\n                    const chunk = _c.value;\n                    buffers.push(chunk);\n                    byteLength += chunk.byteLength;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        }))();\n    }\n}\n/** @ignore */\nexport class ByteStream {\n    constructor(source) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/** @ignore */\nexport class AsyncByteStream {\n    constructor(source) {\n        if (source instanceof AsyncByteStream) {\n            this.source = source.source;\n        }\n        else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        }\n        else if (isReadableDOMStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n        else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n        }\n        else if (isIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        }\n        else if (isPromise(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isAsyncIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    get closed() { return this.source.closed; }\n    cancel(reason) { return this.source.cancel(reason); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/** @ignore */\nclass ByteStreamSource {\n    constructor(source) {\n        this.source = source;\n    }\n    cancel(reason) { this.return(reason); }\n    peek(size) { return this.next(size, 'peek').value; }\n    read(size) { return this.next(size, 'read').value; }\n    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }\n    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n/** @ignore */\nclass AsyncByteStreamSource {\n    constructor(source) {\n        this.source = source;\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    cancel(reason) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.return(reason); });\n    }\n    get closed() { return this._closedPromise; }\n    read(size) {\n        return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });\n    }\n    peek(size) {\n        return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });\n    }\n    next(size, cmd = 'read') {\n        return __awaiter(this, void 0, void 0, function* () { return (yield this.source.next({ cmd, size })); });\n    }\n    throw(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = (this.source.throw && (yield this.source.throw(value))) || ITERATOR_DONE;\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n    return(value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = (this.source.return && (yield this.source.return(value))) || ITERATOR_DONE;\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n}\n\n//# sourceMappingURL=stream.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters.js';\nimport { decodeUtf8 } from '../util/utf8.js';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces.js';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer.js';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat.js';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            const buffers = [];\n            let byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    declare private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    declare private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ntype ByteStreamSourceIterator<T> = Generator<T, null, { cmd: 'peek' | 'read'; size?: number | null }>;\n/** @ignore */\ntype AsyncByteStreamSourceIterator<T> = AsyncGenerator<T, null, { cmd: 'peek' | 'read'; size?: number | null }>;\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) { }\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor(protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __awaiter } from \"tslib\";\nimport streamAdapters from './adapters.mjs';\n/** @ignore */\nexport const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });\n/** @ignore */\nexport class ArrowJSON {\n    constructor(_json) {\n        this._json = _json;\n    }\n    get schema() { return this._json['schema']; }\n    get batches() { return (this._json['batches'] || []); }\n    get dictionaries() { return (this._json['dictionaries'] || []); }\n}\n/** @ignore */\nexport class ReadableInterop {\n    tee() {\n        return this._getDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) { return this._getDOMStream().pipeTo(writable, options); }\n    pipeThrough(duplex, options) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n    _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n    _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n/** @ignore */\nexport class AsyncQueue extends ReadableInterop {\n    constructor() {\n        super();\n        this._values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    get closed() { return this._closedPromise; }\n    cancel(reason) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.return(reason); });\n    }\n    write(value) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift().resolve({ done: false, value }));\n        }\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift().reject({ done: true, value }));\n        }\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift().resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    toDOMStream(options) {\n        return streamAdapters.toDOMStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    toNodeStream(options) {\n        return streamAdapters.toNodeStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    throw(_) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.abort(_); return ITERATOR_DONE; });\n    }\n    return(_) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.close(); return ITERATOR_DONE; });\n    }\n    read(size) {\n        return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });\n    }\n    peek(size) {\n        return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });\n    }\n    next(..._args) {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift() });\n        }\n        else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        }\n        else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`AsyncQueue is closed`);\n    }\n}\n\n//# sourceMappingURL=interfaces.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters.js';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[] };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined; autoAllocateChunkSize?: number; highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    constructor(private _json: ArrowJSONLike) { }\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: StreamPipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>; readable: R }, options?: StreamPipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value: T | PromiseLike<T>) => void; reject: (reason?: any) => void };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`AsyncQueue is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __awaiter } from \"tslib\";\nimport { ByteStream, AsyncByteStream } from './stream.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    constructor(buffer, byteLength) {\n        super();\n        this.position = 0;\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    readInt32(position) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Number.POSITIVE_INFINITY;\n            }\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() { this.buffer && (this.buffer = null); }\n    throw(value) { this.close(); return { done: true, value }; }\n    return(value) { this.close(); return { done: true, value }; }\n}\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    constructor(file, byteLength) {\n        super();\n        this.position = 0;\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        }\n        else {\n            this._pending = (() => __awaiter(this, void 0, void 0, function* () {\n                this.size = (yield file.stat()).size;\n                delete this._pending;\n            }))();\n        }\n    }\n    readInt32(position) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { buffer, byteOffset } = yield this.readAt(position, 4);\n            return new DataView(buffer, byteOffset).getInt32(0, true);\n        });\n    }\n    seek(position) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._pending && (yield this._pending);\n            this.position = Math.min(position, this.size);\n            return position < this.size;\n        });\n    }\n    read(nBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._pending && (yield this._pending);\n            const { _handle: file, size, position } = this;\n            if (file && position < size) {\n                if (typeof nBytes !== 'number') {\n                    nBytes = Number.POSITIVE_INFINITY;\n                }\n                let pos = position, offset = 0, bytesRead = 0;\n                const end = Math.min(size, pos + Math.min(size - pos, nBytes));\n                const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n                while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                    ({ bytesRead } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));\n                }\n                return buffer;\n            }\n            return null;\n        });\n    }\n    readAt(position, nBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._pending && (yield this._pending);\n            const { _handle: file, size } = this;\n            if (file && (position + nBytes) < size) {\n                const end = Math.min(size, position + nBytes);\n                const buffer = new Uint8Array(end - position);\n                return (yield file.read(buffer, 0, nBytes, position)).buffer;\n            }\n            return new Uint8Array(nBytes);\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () { const f = this._handle; this._handle = null; f && (yield f.close()); });\n    }\n    throw(value) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });\n    }\n    return(value) {\n        return __awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });\n    }\n}\n\n//# sourceMappingURL=file.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces.js';\nimport { ByteStream, AsyncByteStream } from './stream.js';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer.js';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer!.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Number.POSITIVE_INFINITY; }\n            this.position = Math.min(size,\n                position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    declare public size: number;\n    public position = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Number.POSITIVE_INFINITY; }\n            let pos = position, offset = 0, bytesRead = 0;\n            const end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { makeData } from '../data.mjs';\nimport { Field } from '../schema.mjs';\nimport { DataType } from '../type.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { packBools } from '../util/bit.mjs';\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { Int64, Int128 } from '../util/int.mjs';\nimport { UnionMode, DateUnit } from '../enum.mjs';\nimport { toArrayBufferView } from '../util/buffer.mjs';\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    constructor(bytes, nodes, buffers, dictionaries) {\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n    visit(node) {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n    visitNull(type, { length } = this.nextFieldNode()) {\n        return makeData({ type, length });\n    }\n    visitBool(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitInt(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitFloat(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitUtf8(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    visitBinary(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitDate(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitTime(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitDecimal(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitList(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n    visitStruct(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), children: this.visitMany(type.children) });\n    }\n    visitUnion(type) {\n        return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n    }\n    visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), valueOffsets: this.readOffsets(type), children: this.visitMany(type.children) });\n    }\n    visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), children: this.visitMany(type.children) });\n    }\n    visitDictionary(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type.indices), dictionary: this.readDictionary(type) });\n    }\n    visitInterval(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), 'child': this.visit(type.children[0]) });\n    }\n    visitMap(type, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n    nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    readDictionary(type) {\n        return this.dictionaries.get(type.id);\n    }\n}\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    constructor(sources, nodes, buffers, dictionaries) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    readData(type, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n        }\n        else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset]);\n        }\n        else if (DataType.isBool(type)) {\n            return packBools(sources[offset]);\n        }\n        else if (DataType.isUtf8(type)) {\n            return encodeUtf8(sources[offset].join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);\n    }\n    return data;\n}\n\n//# sourceMappingURL=vectorloader.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, makeData } from '../data.js';\nimport * as type from '../type.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { DataType } from '../type.js';\nimport { Visitor } from '../visitor.js';\nimport { packBools } from '../util/bit.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { Int64, Int128 } from '../util/int.js';\nimport { UnionMode, DateUnit } from '../enum.js';\nimport { toArrayBufferView } from '../util/buffer.js';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.js';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull<T extends type.Null>(type: T, { length } = this.nextFieldNode()) {\n        return makeData({ type, length });\n    }\n    public visitBool<T extends type.Bool>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitInt<T extends type.Int>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitFloat<T extends type.Float>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitUtf8<T extends type.Utf8>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    public visitBinary<T extends type.Binary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitDate<T extends type.Date_>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitTimestamp<T extends type.Timestamp>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitTime<T extends type.Time>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitDecimal<T extends type.Decimal>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitList<T extends type.List>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n    public visitStruct<T extends type.Struct>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), children: this.visitMany(type.children) });\n    }\n    public visitUnion<T extends type.Union>(type: T) {\n        return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);\n    }\n    public visitDenseUnion<T extends type.DenseUnion>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), valueOffsets: this.readOffsets(type), children: this.visitMany(type.children) });\n    }\n    public visitSparseUnion<T extends type.SparseUnion>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), children: this.visitMany(type.children) });\n    }\n    public visitDictionary<T extends type.Dictionary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type.indices), dictionary: this.readDictionary(type) });\n    }\n    public visitInterval<T extends type.Interval>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), 'child': this.visit(type.children[0]) });\n    }\n    public visitMap<T extends type.Map_>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [\n    1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000\n];\n/** @ignore */\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        const out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const this_high = this.buffer[1] << 0;\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        const out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n/** @ignore */\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        const sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        const high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        const sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(4)) {\n        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        const out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n\n//# sourceMappingURL=int.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [\n    1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000\n];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor(protected buffer: Uint32Array) { }\n\n    public high(): number { return this.buffer[1]; }\n    public low(): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n    }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof (val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        const out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string | number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const this_high = this.buffer[1] << 0;\n        // eslint-disable-next-line unicorn/prefer-math-trunc\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof (val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        const out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string | number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor(private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        const sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        const high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        const sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof (val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        const out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string | number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __awaiter } from \"tslib\";\nimport { MessageHeader } from '../enum.mjs';\nimport { ByteBuffer } from 'flatbuffers';\nimport { Message } from './metadata/message.mjs';\nimport { isFileHandle } from '../util/compat.mjs';\nimport { AsyncRandomAccessFile } from '../io/file.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\nimport { ByteStream, AsyncByteStream } from '../io/stream.mjs';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces.mjs';\n/** @ignore */ const invalidMessageType = (type) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage = (type) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n/** @ignore */\nexport class MessageReader {\n    constructor(source) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message === null || message === void 0 ? void 0 : message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;\n        return { done: len === 0, value: len };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n/** @ignore */\nexport class AsyncMessageReader {\n    constructor(source, byteLength) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n                ? new AsyncRandomAccessFile(source, byteLength)\n                : new AsyncByteStream(source);\n    }\n    [Symbol.asyncIterator]() { return this; }\n    next() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let r;\n            if ((r = yield this.readMetadataLength()).done) {\n                return ITERATOR_DONE;\n            }\n            // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n            // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n            // pre-v0.15 message, where the first 4 bytes are the metadata length.\n            if ((r.value === -1) &&\n                (r = yield this.readMetadataLength()).done) {\n                return ITERATOR_DONE;\n            }\n            if ((r = yield this.readMetadata(r.value)).done) {\n                return ITERATOR_DONE;\n            }\n            return r;\n        });\n    }\n    throw(value) {\n        return __awaiter(this, void 0, void 0, function* () { return yield this.source.throw(value); });\n    }\n    return(value) {\n        return __awaiter(this, void 0, void 0, function* () { return yield this.source.return(value); });\n    }\n    readMessage(type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let r;\n            if ((r = yield this.next()).done) {\n                return null;\n            }\n            if ((type != null) && r.value.headerType !== type) {\n                throw new Error(invalidMessageType(type));\n            }\n            return r.value;\n        });\n    }\n    readMessageBody(bodyLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (bodyLength <= 0) {\n                return new Uint8Array(0);\n            }\n            const buf = toUint8Array(yield this.source.read(bodyLength));\n            if (buf.byteLength < bodyLength) {\n                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n            }\n            // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n            // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n            return /* 1. */ (buf.byteOffset % 8 === 0) &&\n                /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n        });\n    }\n    readSchema(throwIfNull = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const type = MessageHeader.Schema;\n            const message = yield this.readMessage(type);\n            const schema = message === null || message === void 0 ? void 0 : message.header();\n            if (throwIfNull && !schema) {\n                throw new Error(nullMessage(type));\n            }\n            return schema;\n        });\n    }\n    readMetadataLength() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.source.read(PADDING);\n            const bb = buf && new ByteBuffer(buf);\n            const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;\n            return { done: len === 0, value: len };\n        });\n    }\n    readMetadata(metadataLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.source.read(metadataLength);\n            if (!buf) {\n                return ITERATOR_DONE;\n            }\n            if (buf.byteLength < metadataLength) {\n                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n            }\n            return { done: false, value: Message.decode(buf) };\n        });\n    }\n}\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    constructor(source) {\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message === null || message === void 0 ? void 0 : message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1) {\n    MAGIC[i] = MAGIC_STR.codePointAt(i);\n}\n/** @ignore */\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=message.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum.js';\nimport { ByteBuffer } from 'flatbuffers';\nimport { Message } from './metadata/message.js';\nimport { isFileHandle } from '../util/compat.js';\nimport { AsyncRandomAccessFile } from '../io/file.js';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer.js';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream.js';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces.js';\n\n/** @ignore */ const invalidMessageType = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any>r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message?.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb?.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n                ? new AsyncRandomAccessFile(source, byteLength!)\n                : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any>r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message?.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb?.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message?.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1) {\n    MAGIC[i] = MAGIC_STR.codePointAt(i)!;\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */\nimport * as flatbuffers from 'flatbuffers';\nimport { Schema as _Schema } from '../../fb/schema.mjs';\nimport { Int as _Int } from '../../fb/int.mjs';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.mjs';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.mjs';\nimport { Buffer as _Buffer } from '../../fb/buffer.mjs';\nimport { Field as _Field } from '../../fb/field.mjs';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.mjs';\nimport { Type } from '../../fb/type.mjs';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.mjs';\nimport { Endianness as _Endianness } from '../../fb/endianness.mjs';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.mjs';\nimport { Decimal as _Decimal } from '../../fb/decimal.mjs';\nimport { Date as _Date } from '../../fb/date.mjs';\nimport { Time as _Time } from '../../fb/time.mjs';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.mjs';\nimport { Interval as _Interval } from '../../fb/interval.mjs';\nimport { Union as _Union } from '../../fb/union.mjs';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.mjs';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.mjs';\nimport { Map as _Map } from '../../fb/map.mjs';\nimport { Message as _Message } from '../../fb/message.mjs';\nimport { Schema, Field } from '../../schema.mjs';\nimport { toUint8Array } from '../../util/buffer.mjs';\nimport { MessageHeader, MetadataVersion } from '../../enum.mjs';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.mjs';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.mjs';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type.mjs';\n/**\n * @ignore\n * @private\n **/\nexport class Message {\n    constructor(bodyLength, version, headerType, header) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static fromJSON(msg, headerType) {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static encode(message) {\n        const b = new Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header());\n        }\n        else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header());\n        }\n        else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header());\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */\n    static from(header, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() { return this.headerType; }\n    get version() { return this._version; }\n    get headerType() { return this._headerType; }\n    get bodyLength() { return this._bodyLength; }\n    header() { return this._createHeader(); }\n    isSchema() { return this.headerType === MessageHeader.Schema; }\n    isRecordBatch() { return this.headerType === MessageHeader.RecordBatch; }\n    isDictionaryBatch() { return this.headerType === MessageHeader.DictionaryBatch; }\n}\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    constructor(length, nodes, buffers) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n    get nodes() { return this._nodes; }\n    get length() { return this._length; }\n    get buffers() { return this._buffers; }\n}\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n    constructor(data, id, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n    get id() { return this._id; }\n    get data() { return this._data; }\n    get isDelta() { return this._isDelta; }\n    get length() { return this.data.length; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n}\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema()));\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema, dictionaries = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n    if (batch.compression() !== null) {\n        throw new Error('Record batch compression not implemented');\n    }\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n    return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n    const nodes = [];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n    const bufferRegions = [];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n            // If this Arrow buffer was written before version 4,\n            // advance the buffer's bb_pos 8 bytes to skip past\n            // the now-removed page_id field\n            if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n    const fields = [];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n    const children = [];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n    return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch (typeId) {\n        case Type['NONE']: return new Null();\n        case Type['Null']: return new Null();\n        case Type['Binary']: return new Binary();\n        case Type['Utf8']: return new Utf8();\n        case Type['Bool']: return new Bool();\n        case Type['List']: return new List((children || [])[0]);\n        case Type['Struct_']: return new Struct(children || []);\n    }\n    switch (typeId) {\n        case Type['Int']: {\n            const t = f.type(new _Int());\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type['FloatingPoint']: {\n            const t = f.type(new _FloatingPoint());\n            return new Float(t.precision());\n        }\n        case Type['Decimal']: {\n            const t = f.type(new _Decimal());\n            return new Decimal(t.scale(), t.precision(), t.bitWidth());\n        }\n        case Type['Date']: {\n            const t = f.type(new _Date());\n            return new Date_(t.unit());\n        }\n        case Type['Time']: {\n            const t = f.type(new _Time());\n            return new Time(t.unit(), t.bitWidth());\n        }\n        case Type['Timestamp']: {\n            const t = f.type(new _Timestamp());\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type['Interval']: {\n            const t = f.type(new _Interval());\n            return new Interval(t.unit());\n        }\n        case Type['Union']: {\n            const t = f.type(new _Union());\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type['FixedSizeBinary']: {\n            const t = f.type(new _FixedSizeBinary());\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type['FixedSizeList']: {\n            const t = f.type(new _FixedSizeList());\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type['Map']: {\n            const t = f.type(new _Map());\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n    if (metadataOffset !== -1) {\n        _Schema.addCustomMetadata(b, metadataOffset);\n    }\n    return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    const type = field.type;\n    let typeId = field.typeId;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b);\n    }\n    else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b);\n        typeOffset = typeAssembler.visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) {\n        _Field.addName(b, nameOffset);\n    }\n    if (dictionaryOffset !== -1) {\n        _Field.addDictionary(b, dictionaryOffset);\n    }\n    if (metadataOffset !== -1) {\n        _Field.addCustomMetadata(b, metadataOffset);\n    }\n    return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    _RecordBatch.startNodesVector(b, nodes.length);\n    for (const n of nodes.slice().reverse())\n        FieldNode.encode(b, n);\n    const nodesVectorOffset = b.endVector();\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    for (const b_ of buffers.slice().reverse())\n        BufferRegion.encode(b, b_);\n    const buffersVectorOffset = b.endVector();\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=message.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Schema as _Schema } from '../../fb/schema.js';\nimport { Int as _Int } from '../../fb/int.js';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.js';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.js';\nimport { Buffer as _Buffer } from '../../fb/buffer.js';\nimport { Field as _Field } from '../../fb/field.js';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.js';\nimport { DictionaryEncoding as _DictionaryEncoding } from '../../fb/dictionary-encoding.js';\nimport { Type } from '../../fb/type.js';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.js';\nimport { Endianness as _Endianness } from '../../fb/endianness.js';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.js';\nimport { Decimal as _Decimal } from '../../fb/decimal.js';\nimport { Date as _Date } from '../../fb/date.js';\nimport { Time as _Time } from '../../fb/time.js';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.js';\nimport { Interval as _Interval } from '../../fb/interval.js';\nimport { Union as _Union } from '../../fb/union.js';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.js';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.js';\nimport { Map as _Map } from '../../fb/map.js';\nimport { Message as _Message } from '../../fb/message.js';\n\nimport { Schema, Field } from '../../schema.js';\nimport { toUint8Array } from '../../util/buffer.js';\nimport { ArrayBufferViewInput } from '../../util/buffer.js';\nimport { MessageHeader, MetadataVersion } from '../../enum.js';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.js';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.js';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type.js';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        const b = new Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    declare protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    if (batch.compression() !== null) {\n        throw new Error('Record batch compression not implemented');\n    }\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n            // If this Arrow buffer was written before version 4,\n            // advance the buffer's bb_pos 8 bytes to skip past\n            // the now-removed page_id field\n            if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type['NONE']: return new Null();\n        case Type['Null']: return new Null();\n        case Type['Binary']: return new Binary();\n        case Type['Utf8']: return new Utf8();\n        case Type['Bool']: return new Bool();\n        case Type['List']: return new List((children || [])[0]);\n        case Type['Struct_']: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type['Int']: {\n            const t = f.type(new _Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type['FloatingPoint']: {\n            const t = f.type(new _FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type['Decimal']: {\n            const t = f.type(new _Decimal())!;\n            return new Decimal(t.scale(), t.precision(), t.bitWidth());\n        }\n        case Type['Date']: {\n            const t = f.type(new _Date())!;\n            return new Date_(t.unit());\n        }\n        case Type['Time']: {\n            const t = f.type(new _Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type['Timestamp']: {\n            const t = f.type(new _Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type['Interval']: {\n            const t = f.type(new _Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type['Union']: {\n            const t = f.type(new _Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type['FixedSizeBinary']: {\n            const t = f.type(new _FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type['FixedSizeList']: {\n            const t = f.type(new _FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type['Map']: {\n            const t = f.type(new _Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    const type = field.type;\n    let typeId: Type = <any>field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n    : T extends MessageHeader.RecordBatch ? RecordBatch\n    : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompression } from './body-compression.mjs';\nimport { Buffer } from './buffer.mjs';\nimport { FieldNode } from './field-node.mjs';\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n */\nexport class RecordBatch {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsRecordBatch(bb, obj) {\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsRecordBatch(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     */\n    length() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     */\n    nodes(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    nodesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     */\n    buffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    buffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Optional compression of the message body\n     */\n    compression(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    static startRecordBatch(builder) {\n        builder.startObject(4);\n    }\n    static addLength(builder, length) {\n        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n    static addNodes(builder, nodesOffset) {\n        builder.addFieldOffset(1, nodesOffset, 0);\n    }\n    static startNodesVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addBuffers(builder, buffersOffset) {\n        builder.addFieldOffset(2, buffersOffset, 0);\n    }\n    static startBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addCompression(builder, compressionOffset) {\n        builder.addFieldOffset(3, compressionOffset, 0);\n    }\n    static endRecordBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=record-batch.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { BodyCompression } from './body-compression.js';\nimport { Buffer } from './buffer.js';\nimport { FieldNode } from './field-node.js';\n\n\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n */\nexport class RecordBatch {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):RecordBatch {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsRecordBatch(bb:flatbuffers.ByteBuffer, obj?:RecordBatch):RecordBatch {\n  return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsRecordBatch(bb:flatbuffers.ByteBuffer, obj?:RecordBatch):RecordBatch {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * number of records / rows. The arrays in the batch should all have this\n * length\n */\nlength():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * Nodes correspond to the pre-ordered flattened logical schema\n */\nnodes(index: number, obj?:FieldNode):FieldNode|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new FieldNode()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nnodesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Buffers correspond to the pre-ordered flattened buffer tree\n *\n * The number of buffers appended to this list depends on the schema. For\n * example, most primitive arrays will have 2 buffers, 1 for the validity\n * bitmap and 1 for the values. For struct arrays, there will only be a\n * single buffer for the validity (nulls) bitmap\n */\nbuffers(index: number, obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Buffer()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nbuffersLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Optional compression of the message body\n */\ncompression(obj?:BodyCompression):BodyCompression|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? (obj || new BodyCompression()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\nstatic startRecordBatch(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addLength(builder:flatbuffers.Builder, length:flatbuffers.Long) {\n  builder.addFieldInt64(0, length, builder.createLong(0, 0));\n}\n\nstatic addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, nodesOffset, 0);\n}\n\nstatic startNodesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addBuffers(builder:flatbuffers.Builder, buffersOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, buffersOffset, 0);\n}\n\nstatic startBuffersVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addCompression(builder:flatbuffers.Builder, compressionOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, compressionOffset, 0);\n}\n\nstatic endRecordBatch(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompressionMethod } from './body-compression-method.mjs';\nimport { CompressionType } from './compression-type.mjs';\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n */\nexport class BodyCompression {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBodyCompression(bb, obj) {\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBodyCompression(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Compressor library.\n     * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n     */\n    codec() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n    }\n    /**\n     * Indicates the way the record batch body was compressed\n     */\n    method() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n    }\n    static startBodyCompression(builder) {\n        builder.startObject(2);\n    }\n    static addCodec(builder, codec) {\n        builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n    }\n    static addMethod(builder, method) {\n        builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n    }\n    static endBodyCompression(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBodyCompression(builder, codec, method) {\n        BodyCompression.startBodyCompression(builder);\n        BodyCompression.addCodec(builder, codec);\n        BodyCompression.addMethod(builder, method);\n        return BodyCompression.endBodyCompression(builder);\n    }\n}\n\n//# sourceMappingURL=body-compression.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { BodyCompressionMethod } from './body-compression-method.js';\nimport { CompressionType } from './compression-type.js';\n\n\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n */\nexport class BodyCompression {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):BodyCompression {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Compressor library.\n * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n */\ncodec():CompressionType {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n}\n\n/**\n * Indicates the way the record batch body was compressed\n */\nmethod():BodyCompressionMethod {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n}\n\nstatic startBodyCompression(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addCodec(builder:flatbuffers.Builder, codec:CompressionType) {\n  builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n}\n\nstatic addMethod(builder:flatbuffers.Builder, method:BodyCompressionMethod) {\n  builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n}\n\nstatic endBodyCompression(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createBodyCompression(builder:flatbuffers.Builder, codec:CompressionType, method:BodyCompressionMethod):flatbuffers.Offset {\n  BodyCompression.startBodyCompression(builder);\n  BodyCompression.addCodec(builder, codec);\n  BodyCompression.addMethod(builder, method);\n  return BodyCompression.endBodyCompression(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * Provided for forward compatibility in case we need to support different\n * strategies for compressing the IPC message body (like whole-body\n * compression rather than buffer-level) in the future\n */\nexport var BodyCompressionMethod;\n(function (BodyCompressionMethod) {\n    /**\n     * Each constituent buffer is first compressed with the indicated\n     * compressor, and then written with the uncompressed length in the first 8\n     * bytes as a 64-bit little-endian signed integer followed by the compressed\n     * buffer bytes (and then padding as required by the protocol). The\n     * uncompressed length may be set to -1 to indicate that the data that\n     * follows is not compressed, which can be useful for cases where\n     * compression does not yield appreciable savings.\n     */\n    BodyCompressionMethod[BodyCompressionMethod[\"BUFFER\"] = 0] = \"BUFFER\";\n})(BodyCompressionMethod || (BodyCompressionMethod = {}));\n\n//# sourceMappingURL=body-compression-method.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/**\n * Provided for forward compatibility in case we need to support different\n * strategies for compressing the IPC message body (like whole-body\n * compression rather than buffer-level) in the future\n */\nexport enum BodyCompressionMethod{\n  /**\n   * Each constituent buffer is first compressed with the indicated\n   * compressor, and then written with the uncompressed length in the first 8\n   * bytes as a 64-bit little-endian signed integer followed by the compressed\n   * buffer bytes (and then padding as required by the protocol). The\n   * uncompressed length may be set to -1 to indicate that the data that\n   * follows is not compressed, which can be useful for cases where\n   * compression does not yield appreciable savings.\n   */\n  BUFFER = 0\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var CompressionType;\n(function (CompressionType) {\n    CompressionType[CompressionType[\"LZ4_FRAME\"] = 0] = \"LZ4_FRAME\";\n    CompressionType[CompressionType[\"ZSTD\"] = 1] = \"ZSTD\";\n})(CompressionType || (CompressionType = {}));\n\n//# sourceMappingURL=compression-type.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum CompressionType{\n  LZ4_FRAME = 0,\n  ZSTD = 1\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n */\nexport class Buffer {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     */\n    offset() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive). When building\n     * messages using the encapsulated IPC message, padding bytes may be written\n     * after a buffer, but such padding bytes do not need to be accounted for in\n     * the size here.\n     */\n    length() {\n        return this.bb.readInt64(this.bb_pos + 8);\n    }\n    static sizeOf() {\n        return 16;\n    }\n    static createBuffer(builder, offset, length) {\n        builder.prep(8, 16);\n        builder.writeInt64(length);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n}\n\n//# sourceMappingURL=buffer.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n */\nexport class Buffer {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Buffer {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\n/**\n * The relative offset into the shared memory page where the bytes for this\n * buffer starts\n */\noffset():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos);\n}\n\n/**\n * The absolute length (in bytes) of the memory buffer. The memory is found\n * from offset (inclusive) to offset + length (non-inclusive). When building\n * messages using the encapsulated IPC message, padding bytes may be written\n * after a buffer, but such padding bytes do not need to be accounted for in\n * the size here.\n */\nlength():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos + 8);\n}\n\nstatic sizeOf():number {\n  return 16;\n}\n\nstatic createBuffer(builder:flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long):flatbuffers.Offset {\n  builder.prep(8, 16);\n  builder.writeInt64(length);\n  builder.writeInt64(offset);\n  return builder.offset();\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n */\nexport class FieldNode {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     */\n    length() {\n        return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     */\n    nullCount() {\n        return this.bb.readInt64(this.bb_pos + 8);\n    }\n    static sizeOf() {\n        return 16;\n    }\n    static createFieldNode(builder, length, null_count) {\n        builder.prep(8, 16);\n        builder.writeInt64(null_count);\n        builder.writeInt64(length);\n        return builder.offset();\n    }\n}\n\n//# sourceMappingURL=field-node.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n */\nexport class FieldNode {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):FieldNode {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\n/**\n * The number of value slots in the Arrow array at this level of a nested\n * tree\n */\nlength():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos);\n}\n\n/**\n * The number of observed nulls. Fields with null_count == 0 may choose not\n * to write their physical validity bitmap out as a materialized buffer,\n * instead setting the length of the bitmap buffer to 0.\n */\nnullCount():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos + 8);\n}\n\nstatic sizeOf():number {\n  return 16;\n}\n\nstatic createFieldNode(builder:flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long):flatbuffers.Offset {\n  builder.prep(8, 16);\n  builder.writeInt64(null_count);\n  builder.writeInt64(length);\n  return builder.offset();\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { RecordBatch } from './record-batch.mjs';\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n */\nexport class DictionaryBatch {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryBatch(bb, obj) {\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryBatch(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id. If isDelta is false this dictionary\n     * should replace the existing dictionary.\n     */\n    isDelta() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startDictionaryBatch(builder) {\n        builder.startObject(3);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldOffset(1, dataOffset, 0);\n    }\n    static addIsDelta(builder, isDelta) {\n        builder.addFieldInt8(2, +isDelta, +false);\n    }\n    static endDictionaryBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=dictionary-batch.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { RecordBatch } from './record-batch.js';\n\n\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n */\nexport class DictionaryBatch {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):DictionaryBatch {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nid():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\ndata(obj?:RecordBatch):RecordBatch|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new RecordBatch()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * If isDelta is true the values in the dictionary are to be appended to a\n * dictionary with the indicated id. If isDelta is false this dictionary\n * should replace the existing dictionary.\n */\nisDelta():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nstatic startDictionaryBatch(builder:flatbuffers.Builder) {\n  builder.startObject(3);\n}\n\nstatic addId(builder:flatbuffers.Builder, id:flatbuffers.Long) {\n  builder.addFieldInt64(0, id, builder.createLong(0, 0));\n}\n\nstatic addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, dataOffset, 0);\n}\n\nstatic addIsDelta(builder:flatbuffers.Builder, isDelta:boolean) {\n  builder.addFieldInt8(2, +isDelta, +false);\n}\n\nstatic endDictionaryBatch(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { KeyValue } from './key-value.mjs';\nimport { MessageHeader } from './message-header.mjs';\nimport { MetadataVersion } from './metadata-version.mjs';\nexport class Message {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsMessage(bb, obj) {\n        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsMessage(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    version() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : MetadataVersion.V1;\n    }\n    headerType() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : MessageHeader.NONE;\n    }\n    // @ts-ignore\n    header(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    bodyLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    customMetadata(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    customMetadataLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    static startMessage(builder) {\n        builder.startObject(5);\n    }\n    static addVersion(builder, version) {\n        builder.addFieldInt16(0, version, MetadataVersion.V1);\n    }\n    static addHeaderType(builder, headerType) {\n        builder.addFieldInt8(1, headerType, MessageHeader.NONE);\n    }\n    static addHeader(builder, headerOffset) {\n        builder.addFieldOffset(2, headerOffset, 0);\n    }\n    static addBodyLength(builder, bodyLength) {\n        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n    static addCustomMetadata(builder, customMetadataOffset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n    static createCustomMetadataVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startCustomMetadataVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endMessage(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static finishMessageBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedMessageBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n        Message.startMessage(builder);\n        Message.addVersion(builder, version);\n        Message.addHeaderType(builder, headerType);\n        Message.addHeader(builder, headerOffset);\n        Message.addBodyLength(builder, bodyLength);\n        Message.addCustomMetadata(builder, customMetadataOffset);\n        return Message.endMessage(builder);\n    }\n}\n\n//# sourceMappingURL=message.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { KeyValue } from './key-value.js';\nimport { MessageHeader } from './message-header.js';\nimport { MetadataVersion } from './metadata-version.js';\n\n\nexport class Message {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Message {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {\n  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nversion():MetadataVersion {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : MetadataVersion.V1;\n}\n\nheaderType():MessageHeader {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessageHeader.NONE;\n}\n\n// @ts-ignore\nheader<T extends flatbuffers.Table>(obj:any):any|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n}\n\nbodyLength():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\ncustomMetadata(index: number, obj?:KeyValue):KeyValue|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncustomMetadataLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startMessage(builder:flatbuffers.Builder) {\n  builder.startObject(5);\n}\n\nstatic addVersion(builder:flatbuffers.Builder, version:MetadataVersion) {\n  builder.addFieldInt16(0, version, MetadataVersion.V1);\n}\n\nstatic addHeaderType(builder:flatbuffers.Builder, headerType:MessageHeader) {\n  builder.addFieldInt8(1, headerType, MessageHeader.NONE);\n}\n\nstatic addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, headerOffset, 0);\n}\n\nstatic addBodyLength(builder:flatbuffers.Builder, bodyLength:flatbuffers.Long) {\n  builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n}\n\nstatic addCustomMetadata(builder:flatbuffers.Builder, customMetadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, customMetadataOffset, 0);\n}\n\nstatic createCustomMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startCustomMetadataVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\nstatic createMessage(builder:flatbuffers.Builder, version:MetadataVersion, headerType:MessageHeader, headerOffset:flatbuffers.Offset, bodyLength:flatbuffers.Long, customMetadataOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Message.startMessage(builder);\n  Message.addVersion(builder, version);\n  Message.addHeaderType(builder, headerType);\n  Message.addHeader(builder, headerOffset);\n  Message.addBodyLength(builder, bodyLength);\n  Message.addCustomMetadata(builder, customMetadataOffset);\n  return Message.endMessage(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport { DictionaryBatch } from './dictionary-batch.mjs';\nimport { RecordBatch } from './record-batch.mjs';\nimport { Schema } from './schema.mjs';\nimport { SparseTensor } from './sparse-tensor.mjs';\nimport { Tensor } from './tensor.mjs';\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n */\nexport var MessageHeader;\n(function (MessageHeader) {\n    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n    MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n})(MessageHeader || (MessageHeader = {}));\nexport function unionToMessageHeader(type, accessor) {\n    switch (MessageHeader[type]) {\n        case 'NONE': return null;\n        case 'Schema': return accessor(new Schema());\n        case 'DictionaryBatch': return accessor(new DictionaryBatch());\n        case 'RecordBatch': return accessor(new RecordBatch());\n        case 'Tensor': return accessor(new Tensor());\n        case 'SparseTensor': return accessor(new SparseTensor());\n        default: return null;\n    }\n}\nexport function unionListToMessageHeader(type, accessor, index) {\n    switch (MessageHeader[type]) {\n        case 'NONE': return null;\n        case 'Schema': return accessor(index, new Schema());\n        case 'DictionaryBatch': return accessor(index, new DictionaryBatch());\n        case 'RecordBatch': return accessor(index, new RecordBatch());\n        case 'Tensor': return accessor(index, new Tensor());\n        case 'SparseTensor': return accessor(index, new SparseTensor());\n        default: return null;\n    }\n}\n\n//# sourceMappingURL=message-header.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { DictionaryBatch } from './dictionary-batch.js';\nimport { RecordBatch } from './record-batch.js';\nimport { Schema } from './schema.js';\nimport { SparseTensor } from './sparse-tensor.js';\nimport { Tensor } from './tensor.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n */\nexport enum MessageHeader{\n  NONE = 0,\n  Schema = 1,\n  DictionaryBatch = 2,\n  RecordBatch = 3,\n  Tensor = 4,\n  SparseTensor = 5\n}\n\nexport function unionToMessageHeader(\n  type: MessageHeader,\n  accessor: (obj:DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor) => DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor|null\n): DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor|null {\n  switch(MessageHeader[type]) {\n    case 'NONE': return null;\n    case 'Schema': return accessor(new Schema())! as Schema;\n    case 'DictionaryBatch': return accessor(new DictionaryBatch())! as DictionaryBatch;\n    case 'RecordBatch': return accessor(new RecordBatch())! as RecordBatch;\n    case 'Tensor': return accessor(new Tensor())! as Tensor;\n    case 'SparseTensor': return accessor(new SparseTensor())! as SparseTensor;\n    default: return null;\n  }\n}\n\nexport function unionListToMessageHeader(\n  type: MessageHeader,\n  accessor: (index: number, obj:DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor) => DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor|null,\n  index: number\n): DictionaryBatch|RecordBatch|Schema|SparseTensor|Tensor|null {\n  switch(MessageHeader[type]) {\n    case 'NONE': return null;\n    case 'Schema': return accessor(index, new Schema())! as Schema;\n    case 'DictionaryBatch': return accessor(index, new DictionaryBatch())! as DictionaryBatch;\n    case 'RecordBatch': return accessor(index, new RecordBatch())! as RecordBatch;\n    case 'Tensor': return accessor(index, new Tensor())! as Tensor;\n    case 'SparseTensor': return accessor(index, new SparseTensor())! as SparseTensor;\n    default: return null;\n  }\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Buffer } from './buffer.mjs';\nimport { SparseTensorIndex } from './sparse-tensor-index.mjs';\nimport { TensorDim } from './tensor-dim.mjs';\nimport { Type } from './type.mjs';\nexport class SparseTensor {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensor(bb, obj) {\n        return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensor(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : Type.NONE;\n    }\n    /**\n     * The type of data contained in a value cell.\n     * Currently only fixed-width value types are supported,\n     * no strings or nested types.\n     */\n    // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The dimensions of the tensor, optionally named.\n     */\n    shape(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new TensorDim()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    shapeLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The number of non-zero values in a sparse tensor.\n     */\n    nonZeroLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    sparseIndexType() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : SparseTensorIndex.NONE;\n    }\n    /**\n     * Sparse tensor index\n     */\n    // @ts-ignore\n    sparseIndex(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The location and size of the tensor's data\n     */\n    data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startSparseTensor(builder) {\n        builder.startObject(7);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(0, typeType, Type.NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(1, typeOffset, 0);\n    }\n    static addShape(builder, shapeOffset) {\n        builder.addFieldOffset(2, shapeOffset, 0);\n    }\n    static createShapeVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startShapeVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addNonZeroLength(builder, nonZeroLength) {\n        builder.addFieldInt64(3, nonZeroLength, builder.createLong(0, 0));\n    }\n    static addSparseIndexType(builder, sparseIndexType) {\n        builder.addFieldInt8(4, sparseIndexType, SparseTensorIndex.NONE);\n    }\n    static addSparseIndex(builder, sparseIndexOffset) {\n        builder.addFieldOffset(5, sparseIndexOffset, 0);\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldStruct(6, dataOffset, 0);\n    }\n    static endSparseTensor(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // type\n        builder.requiredField(offset, 8); // shape\n        builder.requiredField(offset, 14); // sparseIndex\n        builder.requiredField(offset, 16); // data\n        return offset;\n    }\n    static finishSparseTensorBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedSparseTensorBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n//# sourceMappingURL=sparse-tensor.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Buffer } from './buffer.js';\nimport { SparseTensorIndex } from './sparse-tensor-index.js';\nimport { TensorDim } from './tensor-dim.js';\nimport { Type } from './type.js';\n\n\nexport class SparseTensor {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):SparseTensor {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsSparseTensor(bb:flatbuffers.ByteBuffer, obj?:SparseTensor):SparseTensor {\n  return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsSparseTensor(bb:flatbuffers.ByteBuffer, obj?:SparseTensor):SparseTensor {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\ntypeType():Type {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Type.NONE;\n}\n\n/**\n * The type of data contained in a value cell.\n * Currently only fixed-width value types are supported,\n * no strings or nested types.\n */\n// @ts-ignore\ntype<T extends flatbuffers.Table>(obj:any):any|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n}\n\n/**\n * The dimensions of the tensor, optionally named.\n */\nshape(index: number, obj?:TensorDim):TensorDim|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new TensorDim()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\nshapeLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * The number of non-zero values in a sparse tensor.\n */\nnonZeroLength():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\nsparseIndexType():SparseTensorIndex {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SparseTensorIndex.NONE;\n}\n\n/**\n * Sparse tensor index\n */\n// @ts-ignore\nsparseIndex<T extends flatbuffers.Table>(obj:any):any|null {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n}\n\n/**\n * The location and size of the tensor's data\n */\ndata(obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb!) : null;\n}\n\nstatic startSparseTensor(builder:flatbuffers.Builder) {\n  builder.startObject(7);\n}\n\nstatic addTypeType(builder:flatbuffers.Builder, typeType:Type) {\n  builder.addFieldInt8(0, typeType, Type.NONE);\n}\n\nstatic addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, typeOffset, 0);\n}\n\nstatic addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, shapeOffset, 0);\n}\n\nstatic createShapeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startShapeVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addNonZeroLength(builder:flatbuffers.Builder, nonZeroLength:flatbuffers.Long) {\n  builder.addFieldInt64(3, nonZeroLength, builder.createLong(0, 0));\n}\n\nstatic addSparseIndexType(builder:flatbuffers.Builder, sparseIndexType:SparseTensorIndex) {\n  builder.addFieldInt8(4, sparseIndexType, SparseTensorIndex.NONE);\n}\n\nstatic addSparseIndex(builder:flatbuffers.Builder, sparseIndexOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(5, sparseIndexOffset, 0);\n}\n\nstatic addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {\n  builder.addFieldStruct(6, dataOffset, 0);\n}\n\nstatic endSparseTensor(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 6) // type\n  builder.requiredField(offset, 8) // shape\n  builder.requiredField(offset, 14) // sparseIndex\n  builder.requiredField(offset, 16) // data\n  return offset;\n}\n\nstatic finishSparseTensorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedSparseTensorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport { SparseMatrixIndexCSX } from './sparse-matrix-index-c-s-x.mjs';\nimport { SparseTensorIndexCOO } from './sparse-tensor-index-c-o-o.mjs';\nimport { SparseTensorIndexCSF } from './sparse-tensor-index-c-s-f.mjs';\nexport var SparseTensorIndex;\n(function (SparseTensorIndex) {\n    SparseTensorIndex[SparseTensorIndex[\"NONE\"] = 0] = \"NONE\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseTensorIndexCOO\"] = 1] = \"SparseTensorIndexCOO\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseMatrixIndexCSX\"] = 2] = \"SparseMatrixIndexCSX\";\n    SparseTensorIndex[SparseTensorIndex[\"SparseTensorIndexCSF\"] = 3] = \"SparseTensorIndexCSF\";\n})(SparseTensorIndex || (SparseTensorIndex = {}));\nexport function unionToSparseTensorIndex(type, accessor) {\n    switch (SparseTensorIndex[type]) {\n        case 'NONE': return null;\n        case 'SparseTensorIndexCOO': return accessor(new SparseTensorIndexCOO());\n        case 'SparseMatrixIndexCSX': return accessor(new SparseMatrixIndexCSX());\n        case 'SparseTensorIndexCSF': return accessor(new SparseTensorIndexCSF());\n        default: return null;\n    }\n}\nexport function unionListToSparseTensorIndex(type, accessor, index) {\n    switch (SparseTensorIndex[type]) {\n        case 'NONE': return null;\n        case 'SparseTensorIndexCOO': return accessor(index, new SparseTensorIndexCOO());\n        case 'SparseMatrixIndexCSX': return accessor(index, new SparseMatrixIndexCSX());\n        case 'SparseTensorIndexCSF': return accessor(index, new SparseTensorIndexCSF());\n        default: return null;\n    }\n}\n\n//# sourceMappingURL=sparse-tensor-index.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { SparseMatrixIndexCSX } from './sparse-matrix-index-c-s-x.js';\nimport { SparseTensorIndexCOO } from './sparse-tensor-index-c-o-o.js';\nimport { SparseTensorIndexCSF } from './sparse-tensor-index-c-s-f.js';\n\n\nexport enum SparseTensorIndex{\n  NONE = 0,\n  SparseTensorIndexCOO = 1,\n  SparseMatrixIndexCSX = 2,\n  SparseTensorIndexCSF = 3\n}\n\nexport function unionToSparseTensorIndex(\n  type: SparseTensorIndex,\n  accessor: (obj:SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF) => SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF|null\n): SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF|null {\n  switch(SparseTensorIndex[type]) {\n    case 'NONE': return null;\n    case 'SparseTensorIndexCOO': return accessor(new SparseTensorIndexCOO())! as SparseTensorIndexCOO;\n    case 'SparseMatrixIndexCSX': return accessor(new SparseMatrixIndexCSX())! as SparseMatrixIndexCSX;\n    case 'SparseTensorIndexCSF': return accessor(new SparseTensorIndexCSF())! as SparseTensorIndexCSF;\n    default: return null;\n  }\n}\n\nexport function unionListToSparseTensorIndex(\n  type: SparseTensorIndex,\n  accessor: (index: number, obj:SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF) => SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF|null,\n  index: number\n): SparseMatrixIndexCSX|SparseTensorIndexCOO|SparseTensorIndexCSF|null {\n  switch(SparseTensorIndex[type]) {\n    case 'NONE': return null;\n    case 'SparseTensorIndexCOO': return accessor(index, new SparseTensorIndexCOO())! as SparseTensorIndexCOO;\n    case 'SparseMatrixIndexCSX': return accessor(index, new SparseMatrixIndexCSX())! as SparseMatrixIndexCSX;\n    case 'SparseTensorIndexCSF': return accessor(index, new SparseTensorIndexCSF())! as SparseTensorIndexCSF;\n    default: return null;\n  }\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Buffer } from './buffer.mjs';\nimport { Int } from './int.mjs';\nimport { SparseMatrixCompressedAxis } from './sparse-matrix-compressed-axis.mjs';\n/**\n * Compressed Sparse format, that is matrix-specific.\n */\nexport class SparseMatrixIndexCSX {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseMatrixIndexCSX(bb, obj) {\n        return (obj || new SparseMatrixIndexCSX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseMatrixIndexCSX(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new SparseMatrixIndexCSX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Which axis, row or column, is compressed\n     */\n    compressedAxis() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : SparseMatrixCompressedAxis.Row;\n    }\n    /**\n     * The type of values in indptrBuffer\n     */\n    indptrType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indptrBuffer stores the location and size of indptr array that\n     * represents the range of the rows.\n     * The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.\n     * The length of this array is 1 + (the number of rows), and the type\n     * of index value is long.\n     *\n     * For example, let X be the following 6x4 matrix:\n     * ```text\n     *   X := [[0, 1, 2, 0],\n     *         [0, 0, 3, 0],\n     *         [0, 4, 0, 5],\n     *         [0, 0, 0, 0],\n     *         [6, 0, 7, 8],\n     *         [0, 9, 0, 0]].\n     * ```\n     * The array of non-zero values in X is:\n     * ```text\n     *   values(X) = [1, 2, 3, 4, 5, 6, 7, 8, 9].\n     * ```\n     * And the indptr of X is:\n     * ```text\n     *   indptr(X) = [0, 2, 3, 5, 5, 8, 10].\n     * ```\n     */\n    indptrBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    /**\n     * The type of values in indicesBuffer\n     */\n    indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indicesBuffer stores the location and size of the array that\n     * contains the column indices of the corresponding non-zero values.\n     * The type of index value is long.\n     *\n     * For example, the indices of the above X is:\n     * ```text\n     *   indices(X) = [1, 2, 2, 1, 3, 0, 2, 3, 1].\n     * ```\n     * Note that the indices are sorted in lexicographical order for each row.\n     */\n    indicesBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startSparseMatrixIndexCSX(builder) {\n        builder.startObject(5);\n    }\n    static addCompressedAxis(builder, compressedAxis) {\n        builder.addFieldInt16(0, compressedAxis, SparseMatrixCompressedAxis.Row);\n    }\n    static addIndptrType(builder, indptrTypeOffset) {\n        builder.addFieldOffset(1, indptrTypeOffset, 0);\n    }\n    static addIndptrBuffer(builder, indptrBufferOffset) {\n        builder.addFieldStruct(2, indptrBufferOffset, 0);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(3, indicesTypeOffset, 0);\n    }\n    static addIndicesBuffer(builder, indicesBufferOffset) {\n        builder.addFieldStruct(4, indicesBufferOffset, 0);\n    }\n    static endSparseMatrixIndexCSX(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // indptrType\n        builder.requiredField(offset, 8); // indptrBuffer\n        builder.requiredField(offset, 10); // indicesType\n        builder.requiredField(offset, 12); // indicesBuffer\n        return offset;\n    }\n}\n\n//# sourceMappingURL=sparse-matrix-index-c-s-x.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Buffer } from './buffer.js';\nimport { Int } from './int.js';\nimport { SparseMatrixCompressedAxis } from './sparse-matrix-compressed-axis.js';\n\n\n/**\n * Compressed Sparse format, that is matrix-specific.\n */\nexport class SparseMatrixIndexCSX {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):SparseMatrixIndexCSX {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsSparseMatrixIndexCSX(bb:flatbuffers.ByteBuffer, obj?:SparseMatrixIndexCSX):SparseMatrixIndexCSX {\n  return (obj || new SparseMatrixIndexCSX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsSparseMatrixIndexCSX(bb:flatbuffers.ByteBuffer, obj?:SparseMatrixIndexCSX):SparseMatrixIndexCSX {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new SparseMatrixIndexCSX()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Which axis, row or column, is compressed\n */\ncompressedAxis():SparseMatrixCompressedAxis {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : SparseMatrixCompressedAxis.Row;\n}\n\n/**\n * The type of values in indptrBuffer\n */\nindptrType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * indptrBuffer stores the location and size of indptr array that\n * represents the range of the rows.\n * The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.\n * The length of this array is 1 + (the number of rows), and the type\n * of index value is long.\n *\n * For example, let X be the following 6x4 matrix:\n * ```text\n *   X := [[0, 1, 2, 0],\n *         [0, 0, 3, 0],\n *         [0, 4, 0, 5],\n *         [0, 0, 0, 0],\n *         [6, 0, 7, 8],\n *         [0, 9, 0, 0]].\n * ```\n * The array of non-zero values in X is:\n * ```text\n *   values(X) = [1, 2, 3, 4, 5, 6, 7, 8, 9].\n * ```\n * And the indptr of X is:\n * ```text\n *   indptr(X) = [0, 2, 3, 5, 5, 8, 10].\n * ```\n */\nindptrBuffer(obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb!) : null;\n}\n\n/**\n * The type of values in indicesBuffer\n */\nindicesType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * indicesBuffer stores the location and size of the array that\n * contains the column indices of the corresponding non-zero values.\n * The type of index value is long.\n *\n * For example, the indices of the above X is:\n * ```text\n *   indices(X) = [1, 2, 2, 1, 3, 0, 2, 3, 1].\n * ```\n * Note that the indices are sorted in lexicographical order for each row.\n */\nindicesBuffer(obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb!) : null;\n}\n\nstatic startSparseMatrixIndexCSX(builder:flatbuffers.Builder) {\n  builder.startObject(5);\n}\n\nstatic addCompressedAxis(builder:flatbuffers.Builder, compressedAxis:SparseMatrixCompressedAxis) {\n  builder.addFieldInt16(0, compressedAxis, SparseMatrixCompressedAxis.Row);\n}\n\nstatic addIndptrType(builder:flatbuffers.Builder, indptrTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, indptrTypeOffset, 0);\n}\n\nstatic addIndptrBuffer(builder:flatbuffers.Builder, indptrBufferOffset:flatbuffers.Offset) {\n  builder.addFieldStruct(2, indptrBufferOffset, 0);\n}\n\nstatic addIndicesType(builder:flatbuffers.Builder, indicesTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, indicesTypeOffset, 0);\n}\n\nstatic addIndicesBuffer(builder:flatbuffers.Builder, indicesBufferOffset:flatbuffers.Offset) {\n  builder.addFieldStruct(4, indicesBufferOffset, 0);\n}\n\nstatic endSparseMatrixIndexCSX(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 6) // indptrType\n  builder.requiredField(offset, 8) // indptrBuffer\n  builder.requiredField(offset, 10) // indicesType\n  builder.requiredField(offset, 12) // indicesBuffer\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nexport var SparseMatrixCompressedAxis;\n(function (SparseMatrixCompressedAxis) {\n    SparseMatrixCompressedAxis[SparseMatrixCompressedAxis[\"Row\"] = 0] = \"Row\";\n    SparseMatrixCompressedAxis[SparseMatrixCompressedAxis[\"Column\"] = 1] = \"Column\";\n})(SparseMatrixCompressedAxis || (SparseMatrixCompressedAxis = {}));\n\n//# sourceMappingURL=sparse-matrix-compressed-axis.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nexport enum SparseMatrixCompressedAxis{\n  Row = 0,\n  Column = 1\n}\n\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Buffer } from './buffer.mjs';\nimport { Int } from './int.mjs';\n/**\n * ----------------------------------------------------------------------\n * EXPERIMENTAL: Data structures for sparse tensors\n * Coordinate (COO) format of sparse tensor index.\n *\n * COO's index list are represented as a NxM matrix,\n * where N is the number of non-zero values,\n * and M is the number of dimensions of a sparse tensor.\n *\n * indicesBuffer stores the location and size of the data of this indices\n * matrix.  The value type and the stride of the indices matrix is\n * specified in indicesType and indicesStrides fields.\n *\n * For example, let X be a 2x3x4x5 tensor, and it has the following\n * 6 non-zero values:\n * ```text\n *   X[0, 1, 2, 0] := 1\n *   X[1, 1, 2, 3] := 2\n *   X[0, 2, 1, 0] := 3\n *   X[0, 1, 3, 0] := 4\n *   X[0, 1, 2, 1] := 5\n *   X[1, 2, 0, 4] := 6\n * ```\n * In COO format, the index matrix of X is the following 4x6 matrix:\n * ```text\n *   [[0, 0, 0, 0, 1, 1],\n *    [1, 1, 1, 2, 1, 2],\n *    [2, 2, 3, 1, 2, 0],\n *    [0, 1, 0, 0, 3, 4]]\n * ```\n * When isCanonical is true, the indices is sorted in lexicographical order\n * (row-major order), and it does not have duplicated entries.  Otherwise,\n * the indices may not be sorted, or may have duplicated entries.\n */\nexport class SparseTensorIndexCOO {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensorIndexCOO(bb, obj) {\n        return (obj || new SparseTensorIndexCOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensorIndexCOO(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new SparseTensorIndexCOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * The type of values in indicesBuffer\n     */\n    indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * Non-negative byte offsets to advance one value cell along each dimension\n     * If omitted, default to row-major order (C-like).\n     */\n    indicesStrides(index) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    indicesStridesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The location and size of the indices matrix's data\n     */\n    indicesBuffer(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    /**\n     * This flag is true if and only if the indices matrix is sorted in\n     * row-major order, and does not have duplicated entries.\n     * This sort order is the same as of Tensorflow's SparseTensor,\n     * but it is inverse order of SciPy's canonical coo_matrix\n     * (SciPy employs column-major order for its coo_matrix).\n     */\n    isCanonical() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startSparseTensorIndexCOO(builder) {\n        builder.startObject(4);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(0, indicesTypeOffset, 0);\n    }\n    static addIndicesStrides(builder, indicesStridesOffset) {\n        builder.addFieldOffset(1, indicesStridesOffset, 0);\n    }\n    static createIndicesStridesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt64(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startIndicesStridesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static addIndicesBuffer(builder, indicesBufferOffset) {\n        builder.addFieldStruct(2, indicesBufferOffset, 0);\n    }\n    static addIsCanonical(builder, isCanonical) {\n        builder.addFieldInt8(3, +isCanonical, +false);\n    }\n    static endSparseTensorIndexCOO(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 4); // indicesType\n        builder.requiredField(offset, 8); // indicesBuffer\n        return offset;\n    }\n}\n\n//# sourceMappingURL=sparse-tensor-index-c-o-o.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Buffer } from './buffer.js';\nimport { Int } from './int.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * EXPERIMENTAL: Data structures for sparse tensors\n * Coordinate (COO) format of sparse tensor index.\n *\n * COO's index list are represented as a NxM matrix,\n * where N is the number of non-zero values,\n * and M is the number of dimensions of a sparse tensor.\n *\n * indicesBuffer stores the location and size of the data of this indices\n * matrix.  The value type and the stride of the indices matrix is\n * specified in indicesType and indicesStrides fields.\n *\n * For example, let X be a 2x3x4x5 tensor, and it has the following\n * 6 non-zero values:\n * ```text\n *   X[0, 1, 2, 0] := 1\n *   X[1, 1, 2, 3] := 2\n *   X[0, 2, 1, 0] := 3\n *   X[0, 1, 3, 0] := 4\n *   X[0, 1, 2, 1] := 5\n *   X[1, 2, 0, 4] := 6\n * ```\n * In COO format, the index matrix of X is the following 4x6 matrix:\n * ```text\n *   [[0, 0, 0, 0, 1, 1],\n *    [1, 1, 1, 2, 1, 2],\n *    [2, 2, 3, 1, 2, 0],\n *    [0, 1, 0, 0, 3, 4]]\n * ```\n * When isCanonical is true, the indices is sorted in lexicographical order\n * (row-major order), and it does not have duplicated entries.  Otherwise,\n * the indices may not be sorted, or may have duplicated entries.\n */\nexport class SparseTensorIndexCOO {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):SparseTensorIndexCOO {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsSparseTensorIndexCOO(bb:flatbuffers.ByteBuffer, obj?:SparseTensorIndexCOO):SparseTensorIndexCOO {\n  return (obj || new SparseTensorIndexCOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsSparseTensorIndexCOO(bb:flatbuffers.ByteBuffer, obj?:SparseTensorIndexCOO):SparseTensorIndexCOO {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new SparseTensorIndexCOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * The type of values in indicesBuffer\n */\nindicesType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * Non-negative byte offsets to advance one value cell along each dimension\n * If omitted, default to row-major order (C-like).\n */\nindicesStrides(index: number):flatbuffers.Long|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : this.bb!.createLong(0, 0);\n}\n\nindicesStridesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * The location and size of the indices matrix's data\n */\nindicesBuffer(obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb!) : null;\n}\n\n/**\n * This flag is true if and only if the indices matrix is sorted in\n * row-major order, and does not have duplicated entries.\n * This sort order is the same as of Tensorflow's SparseTensor,\n * but it is inverse order of SciPy's canonical coo_matrix\n * (SciPy employs column-major order for its coo_matrix).\n */\nisCanonical():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nstatic startSparseTensorIndexCOO(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addIndicesType(builder:flatbuffers.Builder, indicesTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, indicesTypeOffset, 0);\n}\n\nstatic addIndicesStrides(builder:flatbuffers.Builder, indicesStridesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, indicesStridesOffset, 0);\n}\n\nstatic createIndicesStridesVector(builder:flatbuffers.Builder, data:flatbuffers.Long[]):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startIndicesStridesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addIndicesBuffer(builder:flatbuffers.Builder, indicesBufferOffset:flatbuffers.Offset) {\n  builder.addFieldStruct(2, indicesBufferOffset, 0);\n}\n\nstatic addIsCanonical(builder:flatbuffers.Builder, isCanonical:boolean) {\n  builder.addFieldInt8(3, +isCanonical, +false);\n}\n\nstatic endSparseTensorIndexCOO(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 4) // indicesType\n  builder.requiredField(offset, 8) // indicesBuffer\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Buffer } from './buffer.mjs';\nimport { Int } from './int.mjs';\n/**\n * Compressed Sparse Fiber (CSF) sparse tensor index.\n */\nexport class SparseTensorIndexCSF {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsSparseTensorIndexCSF(bb, obj) {\n        return (obj || new SparseTensorIndexCSF()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsSparseTensorIndexCSF(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new SparseTensorIndexCSF()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * CSF is a generalization of compressed sparse row (CSR) index.\n     * See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)\n     *\n     * CSF index recursively compresses each dimension of a tensor into a set\n     * of prefix trees. Each path from a root to leaf forms one tensor\n     * non-zero index. CSF is implemented with two arrays of buffers and one\n     * arrays of integers.\n     *\n     * For example, let X be a 2x3x4x5 tensor and let it have the following\n     * 8 non-zero values:\n     * ```text\n     *   X[0, 0, 0, 1] := 1\n     *   X[0, 0, 0, 2] := 2\n     *   X[0, 1, 0, 0] := 3\n     *   X[0, 1, 0, 2] := 4\n     *   X[0, 1, 1, 0] := 5\n     *   X[1, 1, 1, 0] := 6\n     *   X[1, 1, 1, 1] := 7\n     *   X[1, 1, 1, 2] := 8\n     * ```\n     * As a prefix tree this would be represented as:\n     * ```text\n     *         0          1\n     *        / \\         |\n     *       0   1        1\n     *      /   / \\       |\n     *     0   0   1      1\n     *    /|  /|   |    /| |\n     *   1 2 0 2   0   0 1 2\n     * ```\n     * The type of values in indptrBuffers\n     */\n    indptrType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indptrBuffers stores the sparsity structure.\n     * Each two consecutive dimensions in a tensor correspond to a buffer in\n     * indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`\n     * and `indptrBuffers[dim][i + 1]` signify a range of nodes in\n     * `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.\n     *\n     * For example, the indptrBuffers for the above X is:\n     * ```text\n     *   indptrBuffer(X) = [\n     *                       [0, 2, 3],\n     *                       [0, 1, 3, 4],\n     *                       [0, 2, 4, 5, 8]\n     *                     ].\n     * ```\n     */\n    indptrBuffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    indptrBuffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The type of values in indicesBuffers\n     */\n    indicesType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * indicesBuffers stores values of nodes.\n     * Each tensor dimension corresponds to a buffer in indicesBuffers.\n     * For example, the indicesBuffers for the above X is:\n     * ```text\n     *   indicesBuffer(X) = [\n     *                        [0, 1],\n     *                        [0, 1, 1],\n     *                        [0, 0, 1, 1],\n     *                        [1, 2, 0, 2, 0, 0, 1, 2]\n     *                      ].\n     * ```\n     */\n    indicesBuffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    indicesBuffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * axisOrder stores the sequence in which dimensions were traversed to\n     * produce the prefix tree.\n     * For example, the axisOrder for the above X is:\n     * ```text\n     *   axisOrder(X) = [0, 1, 2, 3].\n     * ```\n     */\n    axisOrder(index) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n    axisOrderLength() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    axisOrderArray() {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    static startSparseTensorIndexCSF(builder) {\n        builder.startObject(5);\n    }\n    static addIndptrType(builder, indptrTypeOffset) {\n        builder.addFieldOffset(0, indptrTypeOffset, 0);\n    }\n    static addIndptrBuffers(builder, indptrBuffersOffset) {\n        builder.addFieldOffset(1, indptrBuffersOffset, 0);\n    }\n    static startIndptrBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addIndicesType(builder, indicesTypeOffset) {\n        builder.addFieldOffset(2, indicesTypeOffset, 0);\n    }\n    static addIndicesBuffers(builder, indicesBuffersOffset) {\n        builder.addFieldOffset(3, indicesBuffersOffset, 0);\n    }\n    static startIndicesBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addAxisOrder(builder, axisOrderOffset) {\n        builder.addFieldOffset(4, axisOrderOffset, 0);\n    }\n    static createAxisOrderVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt32(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startAxisOrderVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static endSparseTensorIndexCSF(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 4); // indptrType\n        builder.requiredField(offset, 6); // indptrBuffers\n        builder.requiredField(offset, 8); // indicesType\n        builder.requiredField(offset, 10); // indicesBuffers\n        builder.requiredField(offset, 12); // axisOrder\n        return offset;\n    }\n}\n\n//# sourceMappingURL=sparse-tensor-index-c-s-f.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Buffer } from './buffer.js';\nimport { Int } from './int.js';\n\n\n/**\n * Compressed Sparse Fiber (CSF) sparse tensor index.\n */\nexport class SparseTensorIndexCSF {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):SparseTensorIndexCSF {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsSparseTensorIndexCSF(bb:flatbuffers.ByteBuffer, obj?:SparseTensorIndexCSF):SparseTensorIndexCSF {\n  return (obj || new SparseTensorIndexCSF()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsSparseTensorIndexCSF(bb:flatbuffers.ByteBuffer, obj?:SparseTensorIndexCSF):SparseTensorIndexCSF {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new SparseTensorIndexCSF()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * CSF is a generalization of compressed sparse row (CSR) index.\n * See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)\n *\n * CSF index recursively compresses each dimension of a tensor into a set\n * of prefix trees. Each path from a root to leaf forms one tensor\n * non-zero index. CSF is implemented with two arrays of buffers and one\n * arrays of integers.\n *\n * For example, let X be a 2x3x4x5 tensor and let it have the following\n * 8 non-zero values:\n * ```text\n *   X[0, 0, 0, 1] := 1\n *   X[0, 0, 0, 2] := 2\n *   X[0, 1, 0, 0] := 3\n *   X[0, 1, 0, 2] := 4\n *   X[0, 1, 1, 0] := 5\n *   X[1, 1, 1, 0] := 6\n *   X[1, 1, 1, 1] := 7\n *   X[1, 1, 1, 2] := 8\n * ```\n * As a prefix tree this would be represented as:\n * ```text\n *         0          1\n *        / \\         |\n *       0   1        1\n *      /   / \\       |\n *     0   0   1      1\n *    /|  /|   |    /| |\n *   1 2 0 2   0   0 1 2\n * ```\n * The type of values in indptrBuffers\n */\nindptrType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * indptrBuffers stores the sparsity structure.\n * Each two consecutive dimensions in a tensor correspond to a buffer in\n * indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`\n * and `indptrBuffers[dim][i + 1]` signify a range of nodes in\n * `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.\n *\n * For example, the indptrBuffers for the above X is:\n * ```text\n *   indptrBuffer(X) = [\n *                       [0, 2, 3],\n *                       [0, 1, 3, 4],\n *                       [0, 2, 4, 5, 8]\n *                     ].\n * ```\n */\nindptrBuffers(index: number, obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Buffer()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nindptrBuffersLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * The type of values in indicesBuffers\n */\nindicesType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * indicesBuffers stores values of nodes.\n * Each tensor dimension corresponds to a buffer in indicesBuffers.\n * For example, the indicesBuffers for the above X is:\n * ```text\n *   indicesBuffer(X) = [\n *                        [0, 1],\n *                        [0, 1, 1],\n *                        [0, 0, 1, 1],\n *                        [1, 2, 0, 2, 0, 0, 1, 2]\n *                      ].\n * ```\n */\nindicesBuffers(index: number, obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? (obj || new Buffer()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nindicesBuffersLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * axisOrder stores the sequence in which dimensions were traversed to\n * produce the prefix tree.\n * For example, the axisOrder for the above X is:\n * ```text\n *   axisOrder(X) = [0, 1, 2, 3].\n * ```\n */\naxisOrder(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n}\n\naxisOrderLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\naxisOrderArray():Int32Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nstatic startSparseTensorIndexCSF(builder:flatbuffers.Builder) {\n  builder.startObject(5);\n}\n\nstatic addIndptrType(builder:flatbuffers.Builder, indptrTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, indptrTypeOffset, 0);\n}\n\nstatic addIndptrBuffers(builder:flatbuffers.Builder, indptrBuffersOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, indptrBuffersOffset, 0);\n}\n\nstatic startIndptrBuffersVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addIndicesType(builder:flatbuffers.Builder, indicesTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, indicesTypeOffset, 0);\n}\n\nstatic addIndicesBuffers(builder:flatbuffers.Builder, indicesBuffersOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, indicesBuffersOffset, 0);\n}\n\nstatic startIndicesBuffersVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addAxisOrder(builder:flatbuffers.Builder, axisOrderOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, axisOrderOffset, 0);\n}\n\nstatic createAxisOrderVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createAxisOrderVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createAxisOrderVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt32(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startAxisOrderVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endSparseTensorIndexCSF(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 4) // indptrType\n  builder.requiredField(offset, 6) // indptrBuffers\n  builder.requiredField(offset, 8) // indicesType\n  builder.requiredField(offset, 10) // indicesBuffers\n  builder.requiredField(offset, 12) // axisOrder\n  return offset;\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * ----------------------------------------------------------------------\n * Data structures for dense tensors\n * Shape data for a single axis in a tensor\n */\nexport class TensorDim {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTensorDim(bb, obj) {\n        return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTensorDim(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Length of dimension\n     */\n    size() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    name(optionalEncoding) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    static startTensorDim(builder) {\n        builder.startObject(2);\n    }\n    static addSize(builder, size) {\n        builder.addFieldInt64(0, size, builder.createLong(0, 0));\n    }\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(1, nameOffset, 0);\n    }\n    static endTensorDim(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTensorDim(builder, size, nameOffset) {\n        TensorDim.startTensorDim(builder);\n        TensorDim.addSize(builder, size);\n        TensorDim.addName(builder, nameOffset);\n        return TensorDim.endTensorDim(builder);\n    }\n}\n\n//# sourceMappingURL=tensor-dim.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for dense tensors\n * Shape data for a single axis in a tensor\n */\nexport class TensorDim {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):TensorDim {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTensorDim(bb:flatbuffers.ByteBuffer, obj?:TensorDim):TensorDim {\n  return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTensorDim(bb:flatbuffers.ByteBuffer, obj?:TensorDim):TensorDim {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Length of dimension\n */\nsize():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * Name of the dimension, optional\n */\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startTensorDim(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addSize(builder:flatbuffers.Builder, size:flatbuffers.Long) {\n  builder.addFieldInt64(0, size, builder.createLong(0, 0));\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, nameOffset, 0);\n}\n\nstatic endTensorDim(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createTensorDim(builder:flatbuffers.Builder, size:flatbuffers.Long, nameOffset:flatbuffers.Offset):flatbuffers.Offset {\n  TensorDim.startTensorDim(builder);\n  TensorDim.addSize(builder, size);\n  TensorDim.addName(builder, nameOffset);\n  return TensorDim.endTensorDim(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { Buffer } from './buffer.mjs';\nimport { TensorDim } from './tensor-dim.mjs';\nimport { Type } from './type.mjs';\nexport class Tensor {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTensor(bb, obj) {\n        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTensor(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    typeType() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readUint8(this.bb_pos + offset) : Type.NONE;\n    }\n    /**\n     * The type of data contained in a value cell. Currently only fixed-width\n     * value types are supported, no strings or nested types\n     */\n    // @ts-ignore\n    type(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n    /**\n     * The dimensions of the tensor, optionally named\n     */\n    shape(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new TensorDim()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    shapeLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Non-negative byte offsets to advance one value cell along each dimension\n     * If omitted, default to row-major order (C-like).\n     */\n    strides(index) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    stridesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * The location and size of the tensor's data\n     */\n    data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb) : null;\n    }\n    static startTensor(builder) {\n        builder.startObject(5);\n    }\n    static addTypeType(builder, typeType) {\n        builder.addFieldInt8(0, typeType, Type.NONE);\n    }\n    static addType(builder, typeOffset) {\n        builder.addFieldOffset(1, typeOffset, 0);\n    }\n    static addShape(builder, shapeOffset) {\n        builder.addFieldOffset(2, shapeOffset, 0);\n    }\n    static createShapeVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startShapeVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    static addStrides(builder, stridesOffset) {\n        builder.addFieldOffset(3, stridesOffset, 0);\n    }\n    static createStridesVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt64(data[i]);\n        }\n        return builder.endVector();\n    }\n    static startStridesVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldStruct(4, dataOffset, 0);\n    }\n    static endTensor(builder) {\n        const offset = builder.endObject();\n        builder.requiredField(offset, 6); // type\n        builder.requiredField(offset, 8); // shape\n        builder.requiredField(offset, 12); // data\n        return offset;\n    }\n    static finishTensorBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    static finishSizePrefixedTensorBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n}\n\n//# sourceMappingURL=tensor.mjs.map\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Buffer } from './buffer.js';\nimport { TensorDim } from './tensor-dim.js';\nimport { Type } from './type.js';\n\n\nexport class Tensor {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Tensor {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTensor(bb:flatbuffers.ByteBuffer, obj?:Tensor):Tensor {\n  return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTensor(bb:flatbuffers.ByteBuffer, obj?:Tensor):Tensor {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\ntypeType():Type {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Type.NONE;\n}\n\n/**\n * The type of data contained in a value cell. Currently only fixed-width\n * value types are supported, no strings or nested types\n */\n// @ts-ignore\ntype<T extends flatbuffers.Table>(obj:any):any|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n}\n\n/**\n * The dimensions of the tensor, optionally named\n */\nshape(index: number, obj?:TensorDim):TensorDim|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new TensorDim()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\nshapeLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Non-negative byte offsets to advance one value cell along each dimension\n * If omitted, default to row-major order (C-like).\n */\nstrides(index: number):flatbuffers.Long|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : this.bb!.createLong(0, 0);\n}\n\nstridesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * The location and size of the tensor's data\n */\ndata(obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? (obj || new Buffer()).__init(this.bb_pos + offset, this.bb!) : null;\n}\n\nstatic startTensor(builder:flatbuffers.Builder) {\n  builder.startObject(5);\n}\n\nstatic addTypeType(builder:flatbuffers.Builder, typeType:Type) {\n  builder.addFieldInt8(0, typeType, Type.NONE);\n}\n\nstatic addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, typeOffset, 0);\n}\n\nstatic addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, shapeOffset, 0);\n}\n\nstatic createShapeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startShapeVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addStrides(builder:flatbuffers.Builder, stridesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, stridesOffset, 0);\n}\n\nstatic createStridesVector(builder:flatbuffers.Builder, data:flatbuffers.Long[]):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startStridesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {\n  builder.addFieldStruct(4, dataOffset, 0);\n}\n\nstatic endTensor(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 6) // type\n  builder.requiredField(offset, 8) // shape\n  builder.requiredField(offset, 12) // data\n  return offset;\n}\n\nstatic finishTensorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedTensorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as flatbuffers from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport { Visitor } from '../visitor.mjs';\nimport { Null } from '../fb/null.mjs';\nimport { Int } from '../fb/int.mjs';\nimport { FloatingPoint } from '../fb/floating-point.mjs';\nimport { Binary } from '../fb/binary.mjs';\nimport { Bool } from '../fb/bool.mjs';\nimport { Utf8 } from '../fb/utf8.mjs';\nimport { Decimal } from '../fb/decimal.mjs';\nimport { Date } from '../fb/date.mjs';\nimport { Time } from '../fb/time.mjs';\nimport { Timestamp } from '../fb/timestamp.mjs';\nimport { Interval } from '../fb/interval.mjs';\nimport { List } from '../fb/list.mjs';\nimport { Struct_ as Struct } from '../fb/struct_.mjs';\nimport { Union } from '../fb/union.mjs';\nimport { DictionaryEncoding } from '../fb/dictionary-encoding.mjs';\nimport { FixedSizeBinary } from '../fb/fixed-size-binary.mjs';\nimport { FixedSizeList } from '../fb/fixed-size-list.mjs';\nimport { Map as Map_ } from '../fb/map.mjs';\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    visit(node, builder) {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    visitInt(node, b) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    visitFloat(node, b) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    visitBool(_node, b) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    visitUtf8(_node, b) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        Decimal.addBitWidth(b, node.bitWidth);\n        return Decimal.endDecimal(b);\n    }\n    visitDate(node, b) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    visitTime(node, b) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    visitList(_node, b) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    visitStruct(_node, b) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    visitUnion(node, b) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n/** @ignore */\nexport const instance = new TypeAssembler();\n\n//# sourceMappingURL=typeassembler.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as flatbuffers from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\n\nimport * as type from '../type.js';\nimport { Visitor } from '../visitor.js';\n\nimport { Null } from '../fb/null.js';\nimport { Int } from '../fb/int.js';\nimport { FloatingPoint } from '../fb/floating-point.js';\nimport { Binary } from '../fb/binary.js';\nimport { Bool } from '../fb/bool.js';\nimport { Utf8 } from '../fb/utf8.js';\nimport { Decimal } from '../fb/decimal.js';\nimport { Date } from '../fb/date.js';\nimport { Time } from '../fb/time.js';\nimport { Timestamp } from '../fb/timestamp.js';\nimport { Interval } from '../fb/interval.js';\nimport { List } from '../fb/list.js';\nimport { Struct_ as Struct } from '../fb/struct_.js';\nimport { Union } from '../fb/union.js';\nimport { DictionaryEncoding } from '../fb/dictionary-encoding.js';\nimport { FixedSizeBinary } from '../fb/fixed-size-binary.js';\nimport { FixedSizeList } from '../fb/fixed-size-list.js';\nimport { Map as Map_ } from '../fb/map.js';\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        Decimal.addBitWidth(b, node.bitWidth);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */\nimport { Schema, Field } from '../../schema.mjs';\nimport { Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type.mjs';\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message.mjs';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum.mjs';\n/** @ignore */\nexport function schemaFromJSON(_schema, dictionaries = new Map()) {\n    return new Schema(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema['customMetadata']), dictionaries);\n}\n/** @ignore */\nexport function recordBatchFromJSON(b) {\n    return new RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\n/** @ignore */\nexport function dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema, dictionaries) {\n    return (_schema['fields'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries));\n}\n/** @ignore */\nfunction fieldChildrenFromJSON(_field, dictionaries) {\n    return (_field['children'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries));\n}\n/** @ignore */\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldNode(column['count'], nullCountFromJSON(column['VALIDITY'])),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\n/** @ignore */\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n/** @ignore */\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n/** @ignore */\nexport function fieldFromJSON(_field, dictionaries) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n/** @ignore */\nfunction customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\n/** @ignore */\nfunction indexTypeFromJSON(_type) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n/** @ignore */\nfunction typeFromJSON(f, children) {\n    const typeId = f['type']['name'];\n    switch (typeId) {\n        case 'NONE': return new Null();\n        case 'null': return new Null();\n        case 'binary': return new Binary();\n        case 'utf8': return new Utf8();\n        case 'bool': return new Bool();\n        case 'list': return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth']);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']]);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision'], t['bitWidth']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']]);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']], t['bitWidth']);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']], t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']]);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']], (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n//# sourceMappingURL=json.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport { Schema, Field } from '../../schema.js';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type.js';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message.js';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum.js';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: Record<string, string>) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE': return new Null();\n        case 'null': return new Null();\n        case 'binary': return new Binary();\n        case 'utf8': return new Utf8();\n        case 'bool': return new Bool();\n        case 'list': return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision'], t['bitWidth']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncValues, __awaiter } from \"tslib\";\nimport { Table } from '../table.mjs';\nimport { MAGIC } from './message.mjs';\nimport { Vector } from '../vector.mjs';\nimport { DataType } from '../type.mjs';\nimport { Message } from './metadata/message.mjs';\nimport * as metadata from './metadata/message.mjs';\nimport { FileBlock, Footer } from './metadata/file.mjs';\nimport { MessageHeader, MetadataVersion } from '../enum.mjs';\nimport { compareSchemas } from '../visitor/typecomparator.mjs';\nimport { AsyncByteQueue } from '../io/stream.mjs';\nimport { VectorAssembler } from '../visitor/vectorassembler.mjs';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler.mjs';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.mjs';\nimport { ReadableInterop } from '../io/interfaces.mjs';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat.mjs';\nexport class RecordBatchWriter extends ReadableInterop {\n    constructor(options) {\n        super();\n        this._position = 0;\n        this._started = false;\n        // @ts-ignore\n        this._sink = new AsyncByteQueue();\n        this._schema = null;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toString(sync = false) {\n        return this._sink.toString(sync);\n    }\n    toUint8Array(sync = false) {\n        return this._sink.toUint8Array(sync);\n    }\n    writeAll(input) {\n        if (isPromise(input)) {\n            return input.then((x) => this.writeAll(x));\n        }\n        else if (isAsyncIterable(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, input);\n    }\n    get closed() { return this._sink.closed; }\n    [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    toDOMStream(options) { return this._sink.toDOMStream(options); }\n    toNodeStream(options) { return this._sink.toNodeStream(options); }\n    close() {\n        return this.reset()._sink.close();\n    }\n    abort(reason) {\n        return this.reset()._sink.abort(reason);\n    }\n    finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    reset(sink = this._sink, schema = null) {\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink;\n        }\n        else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            }\n            else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        if (!schema || !(compareSchemas(schema, this._schema))) {\n            if (schema == null) {\n                this._position = 0;\n                this._schema = null;\n            }\n            else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n        return this;\n    }\n    write(payload) {\n        let schema = null;\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        else if (payload == null) {\n            return this.finish() && undefined;\n        }\n        else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n        else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n        if (schema && !compareSchemas(schema, this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        }\n        else if (payload instanceof Table) {\n            this.writeAll(payload.batches);\n        }\n        else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) {\n            this._write(buffer);\n        }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(chunk) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this._writeMessage(Message.from(schema));\n    }\n    // @ts-ignore\n    _writeFooter(schema) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n    _writeMagic() {\n        return this._write(MAGIC);\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n    _writeRecordBatch(batch) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.numRows, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(new Vector([dictionary]));\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n    _writeDictionaries(batch) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset)).length > 0) {\n                for (const data of dictionary.data) {\n                    this._writeDictionaryBatch(data, id, offset > 0);\n                    offset += data.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n/** @ignore */\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(input, options) {\n        const writer = new RecordBatchStreamWriter(options);\n        if (isPromise(input)) {\n            return input.then((x) => writer.writeAll(x));\n        }\n        else if (isAsyncIterable(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n/** @ignore */\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(input) {\n        const writer = new RecordBatchFileWriter();\n        if (isPromise(input)) {\n            return input.then((x) => writer.writeAll(x));\n        }\n        else if (isAsyncIterable(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n    // @ts-ignore\n    _writeSchema(schema) {\n        return this._writeMagic()._writePadding(2);\n    }\n    _writeFooter(schema) {\n        const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n/** @ignore */\nexport class RecordBatchJSONWriter extends RecordBatchWriter {\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n    /** @nocollapse */\n    static writeAll(input) {\n        return new RecordBatchJSONWriter().writeAll(input);\n    }\n    _writeMessage() { return this; }\n    // @ts-ignore\n    _writeFooter(schema) { return this; }\n    _writeSchema(schema) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({ fields: schema.fields.map(field => fieldToJSON(field)) }, null, 2)}`);\n    }\n    _writeDictionaries(batch) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    _writeRecordBatch(batch) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    close() {\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        this._dictionaries = [];\n        this._recordBatches = [];\n        return super.close();\n    }\n}\n/** @ignore */\nfunction writeAll(writer, input) {\n    let chunks = input;\n    if (input instanceof Table) {\n        chunks = input.batches;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n/** @ignore */\nfunction writeAllAsync(writer, batches) {\n    var batches_1, batches_1_1;\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            for (batches_1 = __asyncValues(batches); batches_1_1 = yield batches_1.next(), !batches_1_1.done;) {\n                const batch = batches_1_1.value;\n                writer.write(batch);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return writer.finish();\n    });\n}\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }) {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map((field) => fieldToJSON(field)),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary, id, isDelta = false) {\n    const [columns] = JSONVectorAssembler.assemble(new RecordBatch({ [id]: dictionary }));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n    const [columns] = JSONVectorAssembler.assemble(records);\n    return JSON.stringify({\n        'count': records.numRows,\n        'columns': columns\n    }, null, 2);\n}\n\n//# sourceMappingURL=writer.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Table } from '../table.js';\nimport { MAGIC } from './message.js';\nimport { Vector } from '../vector.js';\nimport { DataType, TypeMap } from '../type.js';\nimport { Schema, Field } from '../schema.js';\nimport { Message } from './metadata/message.js';\nimport * as metadata from './metadata/message.js';\nimport { FileBlock, Footer } from './metadata/file.js';\nimport { MessageHeader, MetadataVersion } from '../enum.js';\nimport { compareSchemas } from '../visitor/typecomparator.js';\nimport { WritableSink, AsyncByteQueue } from '../io/stream.js';\nimport { VectorAssembler } from '../visitor/vectorassembler.js';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler.js';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler.js';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer.js';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.js';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces.js';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat.js';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends TypeMap = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends TypeMap>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number; size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>; readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any>input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(compareSchemas(schema, this._schema))) {\n            if (schema == null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload == null) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !compareSchemas(schema, this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.batches);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.numRows, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Data, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(new Vector([dictionary]));\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary?.slice(offset)).length > 0) {\n                for (const data of dictionary.data) {\n                    this._writeDictionaryBatch(data, id, offset > 0);\n                    offset += data.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends TypeMap = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends TypeMap = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends TypeMap = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends TypeMap = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({ fields: schema.fields.map(field => fieldToJSON(field)) }, null, 2)}`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Data, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends TypeMap = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.batches;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends TypeMap = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): Record<string, unknown> {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map((field: any) => fieldToJSON(field)),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Data, id: number, isDelta = false) {\n    const [columns] = JSONVectorAssembler.assemble(new RecordBatch({ [id]: dictionary }));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    const [columns] = JSONVectorAssembler.assemble(records);\n    return JSON.stringify({\n        'count': records.numRows,\n        'columns': columns\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { UnionMode } from '../enum.mjs';\nimport { RecordBatch } from '../recordbatch.mjs';\nimport { rebaseValueOffsets } from '../util/buffer.mjs';\nimport { packBools, truncateBitmap } from '../util/bit.mjs';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.mjs';\nimport { DataType, } from '../type.mjs';\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n    constructor() {\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */\n    static assemble(...args) {\n        const unwrap = (nodes) => nodes.flatMap((node) => Array.isArray(node) ? unwrap(node) :\n            (node instanceof RecordBatch) ? node.data.children : node.data);\n        const assembler = new VectorAssembler();\n        assembler.visitMany(unwrap(args));\n        return assembler;\n    }\n    visit(data) {\n        if (data instanceof Vector) {\n            this.visitMany(data.data);\n            return this;\n        }\n        const { type } = data;\n        if (!DataType.isDictionary(type)) {\n            const { length, nullCount } = data;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap));\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(data);\n    }\n    visitNull(_null) {\n        return this;\n    }\n    visitDictionary(data) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(data.clone(data.type.indices));\n    }\n    get nodes() { return this._nodes; }\n    get buffers() { return this._buffers; }\n    get byteLength() { return this._byteLength; }\n    get bufferRegions() { return this._bufferRegions; }\n}\n/** @ignore */\nfunction addBuffer(values) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n/** @ignore */\nfunction assembleUnion(data) {\n    const { type, length, typeIds, valueOffsets } = data;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, data);\n    }\n    else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (data.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, data);\n        }\n        else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = data.children[childIndex]) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n/** @ignore */\nfunction assembleBoolVector(data) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (data.nullCount >= data.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    else if ((values = data.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(data.offset, data.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(data.values));\n}\n/** @ignore */\nfunction assembleFlatVector(data) {\n    return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));\n}\n/** @ignore */\nfunction assembleFlatListVector(data) {\n    const { length, values, valueOffsets } = data;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n/** @ignore */\nfunction assembleListVector(data) {\n    const { length, valueOffsets } = data;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(data.children[0]);\n}\n/** @ignore */\nfunction assembleNestedVector(data) {\n    return this.visitMany(data.type.children.map((_, i) => data.children[i]).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;\n\n//# sourceMappingURL=vectorassembler.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { Type, UnionMode } from '../enum.js';\nimport { RecordBatch } from '../recordbatch.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { rebaseValueOffsets } from '../util/buffer.js';\nimport { packBools, truncateBitmap } from '../util/bit.js';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.js';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type.js';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends DataType>(node: Vector<T> | Data<T>): this;\n    visitMany<T extends DataType>(nodes: readonly Data<T>[]): this[];\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>) => this;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (data: Data<T>) => this;\n\n    visitBool<T extends Bool>(data: Data<T>): this;\n    visitInt<T extends Int>(data: Data<T>): this;\n    visitFloat<T extends Float>(data: Data<T>): this;\n    visitUtf8<T extends Utf8>(data: Data<T>): this;\n    visitBinary<T extends Binary>(data: Data<T>): this;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>): this;\n    visitDate<T extends Date_>(data: Data<T>): this;\n    visitTimestamp<T extends Timestamp>(data: Data<T>): this;\n    visitTime<T extends Time>(data: Data<T>): this;\n    visitDecimal<T extends Decimal>(data: Data<T>): this;\n    visitList<T extends List>(data: Data<T>): this;\n    visitStruct<T extends Struct>(data: Data<T>): this;\n    visitUnion<T extends Union>(data: Data<T>): this;\n    visitInterval<T extends Interval>(data: Data<T>): this;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>): this;\n    visitMap<T extends Map_>(data: Data<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const unwrap = (nodes: (T | T[])[]): Data[] =>\n            nodes.flatMap((node: T | T[]) => Array.isArray(node) ? unwrap(node) :\n                (node instanceof RecordBatch) ? node.data.children : node.data);\n        const assembler = new VectorAssembler();\n        assembler.visitMany(unwrap(args));\n        return assembler;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends DataType>(data: Vector<T> | Data<T>): this {\n        if (data instanceof Vector) {\n            this.visitMany(data.data);\n            return this;\n        }\n        const { type } = data;\n        if (!DataType.isDictionary(type)) {\n            const { length, nullCount } = data;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(data);\n    }\n\n    public visitNull<T extends Null>(_null: Data<T>) {\n        return this;\n    }\n\n    public visitDictionary<T extends Dictionary>(data: Data<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(data.clone(data.type.indices));\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, data: Data<T>) {\n    const { type, length, typeIds, valueOffsets } = data;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, data);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (data.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, data);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Data | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = data.children[childIndex]) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, data: Data<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (data.nullCount >= data.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = data.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(data.offset, data.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(data.values));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, data: Data<T>) {\n    return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, data: Data<T>) {\n    const { length, values, valueOffsets } = data;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, data: Data<T>) {\n    const { length, valueOffsets } = data;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(data.children[0]);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, data: Data<T>) {\n    return this.visitMany(data.type.children.map((_, i) => data.children[i]).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\nimport { Type as ArrowType } from '../fb/type.mjs';\nimport { Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum.mjs';\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    visit(node) {\n        return node == null ? undefined : super.visit(node);\n    }\n    visitNull({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitInt({ typeId, bitWidth, isSigned }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    visitFloat({ typeId, precision }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    visitBinary({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitBool({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitUtf8({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitDecimal({ typeId, scale, precision, bitWidth }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision, 'bitWidth': bitWidth };\n    }\n    visitDate({ typeId, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    visitTime({ typeId, unit, bitWidth }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    visitTimestamp({ typeId, timezone, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    visitInterval({ typeId, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    visitList({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitStruct({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitUnion({ typeId, mode, typeIds }) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    visitDictionary(node) {\n        return this.visit(node.dictionary);\n    }\n    visitFixedSizeBinary({ typeId, byteWidth }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    visitFixedSizeList({ typeId, listSize }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    visitMap({ typeId, keysSorted }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n\n//# sourceMappingURL=jsontypeassembler.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type.js';\nimport { Visitor } from '../visitor.js';\nimport { Type as ArrowType } from '../fb/type.js';\nimport { Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum.js';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): Record<string, unknown> | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): Record<string, unknown> | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision, 'bitWidth': bitWidth };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { BufferType } from '../enum.mjs';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum.mjs';\nimport { BitIterator, getBit, getBool } from '../util/bit.mjs';\nimport { DataType, } from '../type.mjs';\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n    /** @nocollapse */\n    static assemble(...batches) {\n        const assemlber = new JSONVectorAssembler();\n        return batches.map(({ schema, data }) => {\n            return assemlber.visitMany(schema.fields, data.children);\n        });\n    }\n    visit({ name }, data) {\n        const { length } = data;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(data.type) ? data.type.indices : data.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return Object.assign({ 'name': name, 'count': length, 'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                    : [...new BitIterator(nullBitmap, offset, length, null, getBit)] }, super.visit(data.clone(type, offset, length, 0, buffers)));\n    }\n    visitNull() { return {}; }\n    visitBool({ values, offset, length }) {\n        return { 'DATA': [...new BitIterator(values, offset, length, null, getBool)] };\n    }\n    visitInt(data) {\n        return {\n            'DATA': data.type.bitWidth < 64\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    visitFloat(data) {\n        return { 'DATA': [...data.values] };\n    }\n    visitUtf8(data) {\n        return { 'DATA': [...new Vector([data])], 'OFFSET': [...data.valueOffsets] };\n    }\n    visitBinary(data) {\n        return { 'DATA': [...binaryToString(new Vector([data]))], OFFSET: [...data.valueOffsets] };\n    }\n    visitFixedSizeBinary(data) {\n        return { 'DATA': [...binaryToString(new Vector([data]))] };\n    }\n    visitDate(data) {\n        return {\n            'DATA': data.type.unit === DateUnit.DAY\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    visitTimestamp(data) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 2)] };\n    }\n    visitTime(data) {\n        return {\n            'DATA': data.type.unit < TimeUnit.MICROSECOND\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    visitDecimal(data) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 4)] };\n    }\n    visitList(data) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitStruct(data) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitUnion(data) {\n        return {\n            'TYPE': [...data.typeIds],\n            'OFFSET': data.type.mode === UnionMode.Dense ? [...data.valueOffsets] : undefined,\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitInterval(data) {\n        return { 'DATA': [...data.values] };\n    }\n    visitFixedSizeList(data) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    visitMap(data) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n}\n/** @ignore */\nfunction* binaryToString(vector) {\n    for (const octets of vector) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n/** @ignore */\nfunction* bigNumsToStrings(values, stride) {\n    const u32s = new Uint32Array(values.buffer);\n    for (let i = -1, n = u32s.length / stride; ++i < n;) {\n        yield `${BN.new(u32s.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n\n//# sourceMappingURL=jsonvectorassembler.mjs.map\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn.js';\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { BufferType } from '../enum.js';\nimport { RecordBatch } from '../recordbatch.js';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum.js';\nimport { BitIterator, getBit, getBool } from '../util/bit.js';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, IntArray,\n} from '../type.js';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit<T extends DataType>(field: Field, node: Data<T>): Record<string, unknown>;\n    visitMany<T extends DataType>(fields: Field[], nodes: readonly Data<T>[]): Record<string, unknown>[];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T>): (data: Data<T>) => { name: string; count: number; VALIDITY: (0 | 1)[]; DATA?: any[]; OFFSET?: number[]; TYPE?: number[]; children?: any[] };\n\n    visitNull<T extends Null>(data: Data<T>): Record<string, never>;\n    visitBool<T extends Bool>(data: Data<T>): { DATA: boolean[] };\n    visitInt<T extends Int>(data: Data<T>): { DATA: number[] | string[] };\n    visitFloat<T extends Float>(data: Data<T>): { DATA: number[] };\n    visitUtf8<T extends Utf8>(data: Data<T>): { DATA: string[]; OFFSET: number[] };\n    visitBinary<T extends Binary>(data: Data<T>): { DATA: string[]; OFFSET: number[] };\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>): { DATA: string[] };\n    visitDate<T extends Date_>(data: Data<T>): { DATA: number[] };\n    visitTimestamp<T extends Timestamp>(data: Data<T>): { DATA: string[] };\n    visitTime<T extends Time>(data: Data<T>): { DATA: number[] };\n    visitDecimal<T extends Decimal>(data: Data<T>): { DATA: string[] };\n    visitList<T extends List>(data: Data<T>): { children: any[]; OFFSET: number[] };\n    visitStruct<T extends Struct>(data: Data<T>): { children: any[] };\n    visitUnion<T extends Union>(data: Data<T>): { children: any[]; TYPE: number[] };\n    visitInterval<T extends Interval>(data: Data<T>): { DATA: number[] };\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>): { children: any[] };\n    visitMap<T extends Map_>(data: Data<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends RecordBatch>(...batches: T[]) {\n        const assemlber = new JSONVectorAssembler();\n        return batches.map(({ schema, data }) => {\n            return assemlber.visitMany(schema.fields, data.children);\n        });\n    }\n\n    public visit<T extends DataType>({ name }: Field, data: Data<T>) {\n        const { length } = data;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(data.type) ? data.type.indices : data.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                    : [...new BitIterator(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(data.clone(type, offset, length, 0, buffers))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: Data<T>) {\n        return { 'DATA': [...new BitIterator(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(data: Data<T>) {\n        return {\n            'DATA': data.type.bitWidth < 64\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitFloat<T extends Float>(data: Data<T>) {\n        return { 'DATA': [...data.values] };\n    }\n    public visitUtf8<T extends Utf8>(data: Data<T>) {\n        return { 'DATA': [...new Vector([data])], 'OFFSET': [...data.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(data: Data<T>) {\n        return { 'DATA': [...binaryToString(new Vector([data]))], OFFSET: [...data.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>) {\n        return { 'DATA': [...binaryToString(new Vector([data]))] };\n    }\n    public visitDate<T extends Date_>(data: Data<T>) {\n        return {\n            'DATA': data.type.unit === DateUnit.DAY\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(data: Data<T>) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 2)] };\n    }\n    public visitTime<T extends Time>(data: Data<T>) {\n        return {\n            'DATA': data.type.unit < TimeUnit.MICROSECOND\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(data: Data<T>) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 4)] };\n    }\n    public visitList<T extends List>(data: Data<T>) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitStruct<T extends Struct>(data: Data<T>) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitUnion<T extends Union>(data: Data<T>) {\n        return {\n            'TYPE': [...data.typeIds],\n            'OFFSET': data.type.mode === UnionMode.Dense ? [...data.valueOffsets] : undefined,\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitInterval<T extends Interval>(data: Data<T>) {\n        return { 'DATA': [...data.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(data: Data<T>) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitMap<T extends Map_>(data: Data<T>) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: BigUint64Array | BigInt64Array | Uint32Array | Int32Array | IntArray, stride: number) {\n    const u32s = new Uint32Array(values.buffer);\n    for (let i = -1, n = u32s.length / stride; ++i < n;) {\n        yield `${BN.new(u32s.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"],"names":["$9aed8ed3a6d26f6b$export$7c62ab5555479924","$9aed8ed3a6d26f6b$export$c10f629a0f9b650f","$6a5b4b7795980060$var$tmp","atomicDictionaryId","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","MessageHeader","Type","BufferType","proto","Encoding","Endianness","DictionaryKind","BodyCompressionMethod","CompressionType","SparseMatrixCompressedAxis","SparseTensorIndex","ComponentMessageType","extendStatics","a","$f79edd7127f4719f$export$12ea6169eb5318ff","$f79edd7127f4719f$export$a82fae803f3856de","$f79edd7127f4719f$export$be201676156f3e60","$f79edd7127f4719f$export$b3f55ef7f087e744","$f79edd7127f4719f$export$d9e59215631231e3","$f79edd7127f4719f$export$dd27fec05eba03b","$f79edd7127f4719f$export$84577d7b7db4f876","$f79edd7127f4719f$export$92738401e1603719","$f79edd7127f4719f$export$a9b603917c4d9863","$e1f67f0adda0ed3e$export$72958ca7c468c63b","$bf29d10dcc5aa496$export$12ea6169eb5318ff","$302f8f848493eb05$export$c590ef2020908539","$5858391da6778b56$export$a3a4dc35292f3fd6","$566cfdc0309a83e7$export$b3f55ef7f087e744","$d39c4f9572a45b90$export$d9e59215631231e3","$158ee7f128ddf007$export$be201676156f3e60","$3be20a208af938f2$export$dd27fec05eba03b","$3863307d08abbf0f$export$a82fae803f3856de","$01b9561b6ed8e117$export$92738401e1603719","$f40c2a144b79e77b$export$55552fe210a97406","$bfcf9a66e7cfbaf2$export$cf7621ba1f62c1fb","$30f17f16e50d5b3b$export$66d12fec0d6538a7","$4d91f622da36b978$export$e2ea2ee89b689b03","$d4deb62bd6e73779$export$84577d7b7db4f876","$002ff0c12d1f9dff$var$ComponentMessageType","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$6b3372b60d35b33f$export$2b8d127b894957b9","$6b3372b60d35b33f$export$cea3a54a6425200c","$6b3372b60d35b33f$export$a7c73072b1a182ae","$6b3372b60d35b33f$export$9f27bc3417b4524d","$6b3372b60d35b33f$export$db77ccec0bb4ccac","$6b3372b60d35b33f$export$8392c0c9d3dcbd35","$6b3372b60d35b33f$export$ffb0004e005737fa","$6b3372b60d35b33f$export$b624eff549462981","$6b3372b60d35b33f$export$7897aa7841a5380c","$6b3372b60d35b33f$export$602eac185826482c","$6b3372b60d35b33f$export$e2c29f18771995cb","$6b3372b60d35b33f$export$5f8d39834fd61797","$6b3372b60d35b33f$export$74bf444e3cd11ea5","$6b3372b60d35b33f$export$92387174baf9b227","$6b3372b60d35b33f$export$ec112efeb987d9c6","$6b3372b60d35b33f$export$b706b080d889d2c9","$6b3372b60d35b33f$export$5be5a87408f70ddc","$6b3372b60d35b33f$export$45a5e7f76e0caa8d","$6b3372b60d35b33f$export$455c2e768291efa6","$6b3372b60d35b33f$export$9522e17588c12572","$6b3372b60d35b33f$export$2110ac352bb060b9","$6b3372b60d35b33f$export$56885ab8b9c456ab","$6b3372b60d35b33f$export$d927fcb6adf8f9de","$6b3372b60d35b33f$export$b82d16f27459e05a","$6b3372b60d35b33f$export$522c17b4f5e123e8","$6b3372b60d35b33f$export$1aabd8a0274ecfd6","$6b3372b60d35b33f$export$9b621391a187a31a","$6b3372b60d35b33f$export$f5bbd400c2f4426f","$6b3372b60d35b33f$var$b","Symbol","for","$6b3372b60d35b33f$var$c","$6b3372b60d35b33f$var$d","$6b3372b60d35b33f$var$e","$6b3372b60d35b33f$var$f","$6b3372b60d35b33f$var$g","$6b3372b60d35b33f$var$h","$6b3372b60d35b33f$var$k","$6b3372b60d35b33f$var$l","$6b3372b60d35b33f$var$m","$6b3372b60d35b33f$var$n","$6b3372b60d35b33f$var$p","$6b3372b60d35b33f$var$q","$6b3372b60d35b33f$var$r","$6b3372b60d35b33f$var$t","$6b3372b60d35b33f$var$v","$6b3372b60d35b33f$var$w","$6b3372b60d35b33f$var$x","$6b3372b60d35b33f$var$y","$6b3372b60d35b33f$var$z","u","$$typeof","type","$6b3372b60d35b33f$var$A","$1c29a66706a62afd$export$dca3b0875bd9a954","$1c29a66706a62afd$export$16fa2f45be04daa8","$1c29a66706a62afd$export$ffb0004e005737fa","$1c29a66706a62afd$export$e2c29f18771995cb","$1c29a66706a62afd$export$221d75b3f55bb0bd","$1c29a66706a62afd$export$5f8d39834fd61797","$1c29a66706a62afd$export$74bf444e3cd11ea5","$1c29a66706a62afd$export$ae55be85d98224ed","$1c29a66706a62afd$export$e530037191fcd5d7","$1c29a66706a62afd$export$fd42f52fd3ae1109","$1c29a66706a62afd$export$c8a8987d4410bf2d","$1c29a66706a62afd$export$d38cd72104c1f0e9","$1c29a66706a62afd$export$7d1e3a5e95ceca43","$1c29a66706a62afd$export$257a8862b851cb5b","$1c29a66706a62afd$export$a8257692ac88316c","$1c29a66706a62afd$export$488013bae63b21da","$1c29a66706a62afd$export$7c73462e0d25e514","$1c29a66706a62afd$export$35808ee640e87ca7","$1c29a66706a62afd$export$fae74005e78b1a27","$1c29a66706a62afd$export$dc8fbce3eb94dc1e","$1c29a66706a62afd$export$6d9c69b0de29b591","$1c29a66706a62afd$export$d5a552a76deda3c2","$1c29a66706a62afd$export$e5c5a5f917a5871c","$1c29a66706a62afd$export$1538c33de8887b59","$1c29a66706a62afd$export$13e3392192263954","$1c29a66706a62afd$export$b8f5890fc79d6aca","$1c29a66706a62afd$export$60241385465d0a34","$1c29a66706a62afd$export$83d89fbfd8236492","$8coUR","$1c29a66706a62afd$var$n","$1c29a66706a62afd$var$p","$1c29a66706a62afd$var$q","$1c29a66706a62afd$var$r","$1c29a66706a62afd$var$t","$1c29a66706a62afd$var$u","$1c29a66706a62afd$var$v","$1c29a66706a62afd$var$w","$1c29a66706a62afd$var$x","$1c29a66706a62afd$var$y","$1c29a66706a62afd$var$z","$1c29a66706a62afd$var$A","$1c29a66706a62afd$var$B","iterator","$1c29a66706a62afd$var$C","b","c","arguments","length","encodeURIComponent","$1c29a66706a62afd$var$D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","$1c29a66706a62afd$var$E","$1c29a66706a62afd$var$F","props","context","refs","updater","$1c29a66706a62afd$var$G","$1c29a66706a62afd$var$H","prototype","isReactComponent","setState","forceUpdate","$1c29a66706a62afd$var$I","constructor","isPureReactComponent","$1c29a66706a62afd$var$J","current","$1c29a66706a62afd$var$K","hasOwnProperty","$1c29a66706a62afd$var$L","key","ref","__self","__source","$1c29a66706a62afd$var$M","d","g","k","f","children","h","Array","m","defaultProps","_owner","$1c29a66706a62afd$var$O","$1c29a66706a62afd$var$P","$1c29a66706a62afd$var$Q","$1c29a66706a62afd$var$R","pop","result","keyPrefix","func","count","$1c29a66706a62afd$var$S","push","$1c29a66706a62afd$var$V","$1c29a66706a62afd$var$T","$1c29a66706a62afd$var$U","isArray","next","done","value","keys","join","replace","toString","$1c29a66706a62afd$var$W","$1c29a66706a62afd$var$aa","$1c29a66706a62afd$var$X","$1c29a66706a62afd$var$Y","$1c29a66706a62afd$var$Z","map","forEach","toArray","only","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","assign","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","bind","render","_ctor","_status","_result","compare","useCallback","useContext","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","$5f82c58e3d599bd6$var$getOwnPropertySymbols","getOwnPropertySymbols","$5f82c58e3d599bd6$var$hasOwnProperty","$5f82c58e3d599bd6$var$propIsEnumerable","propertyIsEnumerable","$5f82c58e3d599bd6$var$shouldUseNative","test1","String","getOwnPropertyNames","test2","i","fromCharCode","order2","test3","split","letter","target","source","from","symbols","to","$5f82c58e3d599bd6$var$toObject","val","TypeError","$3233927aa82734f9$var$t","$3233927aa82734f9$export$b4d10f6001c083c2","ShadowRoot","ShadyCSS","nativeShadow","Document","CSSStyleSheet","$3233927aa82734f9$var$s","$3233927aa82734f9$var$o","WeakMap","$3233927aa82734f9$export$505d1e8739bad805","t","o","_$cssResult$","cssText","styleSheet","replaceSync","$3233927aa82734f9$export$8d80f9cac07cdb3","$3233927aa82734f9$export$dbf350e5966cf602","reduce","$3233927aa82734f9$export$2ca4a66ec4cecb90","adoptedStyleSheets","document","createElement","litNonce","setAttribute","textContent","appendChild","$3233927aa82734f9$export$ee69dfd951e24778","cssRules","is","$27fcf98b67c2a783$var$i","$27fcf98b67c2a783$var$e","getOwnPropertyDescriptor","$27fcf98b67c2a783$var$r","$27fcf98b67c2a783$var$h","$27fcf98b67c2a783$var$o","getPrototypeOf","$27fcf98b67c2a783$var$n","$27fcf98b67c2a783$var$a","$27fcf98b67c2a783$var$c","trustedTypes","$27fcf98b67c2a783$var$l","emptyScript","$27fcf98b67c2a783$var$p","reactiveElementPolyfillSupport","$27fcf98b67c2a783$var$d","$27fcf98b67c2a783$export$7312b35fbf521afb","toAttribute","Boolean","JSON","stringify","fromAttribute","Number","parse","$27fcf98b67c2a783$export$53a6892c50694894","$27fcf98b67c2a783$var$y","attribute","converter","reflect","hasChanged","metadata","litPropertyMetadata","$27fcf98b67c2a783$export$c7c07a37856565d","HTMLElement","addInitializer","_$Ei","l","observedAttributes","finalize","_$Eh","createProperty","state","elementProperties","noAccessor","r","getPropertyDescriptor","requestUpdate","getPropertyOptions","Map","finalized","properties","_$Eu","elementStyles","finalizeStyles","styles","Set","flat","reverse","unshift","toLowerCase","_$Ep","isUpdatePending","hasUpdated","_$Em","_$Ev","_$ES","Promise","enableUpdating","_$AL","_$E_","addController","_$EO","add","renderRoot","isConnected","hostConnected","removeController","delete","size","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","connectedCallback","disconnectedCallback","hostDisconnected","attributeChangedCallback","_$AK","_$EC","removeAttribute","P","_$ET","has","_$Ej","reject","scheduleUpdate","performUpdate","wrapped","shouldUpdate","willUpdate","hostUpdate","update","_$EU","_$AE","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","mode","ReactiveElement","reactiveElementVersions","$e5ed8027d647799b$var$n","$e5ed8027d647799b$var$c","$e5ed8027d647799b$var$h","createPolicy","createHTML","$e5ed8027d647799b$var$f","$e5ed8027d647799b$var$v","Math","random","toFixed","slice","$e5ed8027d647799b$var$m","$e5ed8027d647799b$var$_","$e5ed8027d647799b$var$w","$e5ed8027d647799b$var$lt","createComment","$e5ed8027d647799b$var$st","$e5ed8027d647799b$var$g","$e5ed8027d647799b$var$$","$e5ed8027d647799b$var$x","$e5ed8027d647799b$var$T","$e5ed8027d647799b$var$E","$e5ed8027d647799b$var$k","$e5ed8027d647799b$var$O","RegExp","$e5ed8027d647799b$var$S","$e5ed8027d647799b$var$j","$e5ed8027d647799b$var$M","$e5ed8027d647799b$var$P","_$litType$","strings","values","$e5ed8027d647799b$export$c0bb0b647f701bb5","$e5ed8027d647799b$export$9c068ae9cc5db4e8","$e5ed8027d647799b$export$45b790e32b2810ee","$e5ed8027d647799b$var$V","$e5ed8027d647799b$var$I","createTreeWalker","$e5ed8027d647799b$var$N","$e5ed8027d647799b$var$U","lastIndex","exec","test","startsWith","$e5ed8027d647799b$var$B","parts","el","currentNode","content","firstChild","replaceWith","childNodes","nextNode","nodeType","hasAttributes","getAttributeNames","endsWith","getAttribute","index","name","ctor","$e5ed8027d647799b$var$Y","$e5ed8027d647799b$var$Z","$e5ed8027d647799b$var$q","$e5ed8027d647799b$var$G","tagName","append","data","indexOf","innerHTML","$e5ed8027d647799b$var$z","_$litDirective$","_$AO","_$AT","_$AS","$e5ed8027d647799b$var$F","_$AV","_$AN","_$AD","_$AM","parentNode","_$AU","creationScope","importNode","$e5ed8027d647799b$var$et","nextSibling","$e5ed8027d647799b$var$K","p","_$AI","_$AH","_$AA","_$AB","options","startNode","endNode","_$AR","_","$","T","O","insertBefore","createTextNode","_$AC","_$AP","remove","setConnected","element","fill","j","toggleAttribute","capture","once","passive","removeEventListener","addEventListener","handleEvent","host","$e5ed8027d647799b$var$Re","litHtmlPolyfillSupport","litHtmlVersions","$e5ed8027d647799b$export$b3890eb0ae9dca99","renderBefore","_$litPart$","$fe586ba0757c37f7$export$3f2f9f5909897157","renderOptions","_$litElement$","litElementHydrateSupport","LitElement","$fe586ba0757c37f7$var$f","litElementPolyfillSupport","litElementVersions","$3251146683c5d714$exports","$72623ab6bcb0a33b$var$TYPE_STATICS","ForwardRef","displayName","propTypes","Memo","$76d3ec0b6e8cfdfc$exports","$f61ec9f35ec4c8b9$export$2eb24fc24c69cb4d","$f61ec9f35ec4c8b9$export$bc3644201724b96e","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","$f61ec9f35ec4c8b9$export$8fe42cc5909e16d2","$f61ec9f35ec4c8b9$export$7a94a52a87d12e8d","BigInt64ArrayUnavailableError","BigInt64Array","BYTES_PER_ELEMENT","of","$f61ec9f35ec4c8b9$export$6a03e78e99ced10d","$f61ec9f35ec4c8b9$export$c35d9ef1985b1c4e","BigUint64ArrayUnavailableError","BigUint64Array","$f61ec9f35ec4c8b9$var$isNumber","x","$f61ec9f35ec4c8b9$var$isBoolean","$f61ec9f35ec4c8b9$var$isFunction","$f61ec9f35ec4c8b9$export$a6cdc56e425d0d0a","$f61ec9f35ec4c8b9$export$4369c812aac99591","then","$f61ec9f35ec4c8b9$export$9652023d9040757","$f61ec9f35ec4c8b9$export$edb10ab8dd75a915","asyncIterator","$f61ec9f35ec4c8b9$export$ab2374ca6cd4ece4","$f61ec9f35ec4c8b9$export$84ac258cc3d60dc0","$f61ec9f35ec4c8b9$export$f7fb4208dd02b4db","$f61ec9f35ec4c8b9$export$81f27058be86d7ea","$f61ec9f35ec4c8b9$export$f8bb1f6b773199b7","$f61ec9f35ec4c8b9$var$isReadableInterop","$f61ec9f35ec4c8b9$export$5536d41d90245d51","$f61ec9f35ec4c8b9$export$eec1f46c8eef21a4","$f61ec9f35ec4c8b9$export$2940183a2d5db90f","$f61ec9f35ec4c8b9$export$5851c0f2ca437632","$bf432875b5ef4a3b$var$undf","$bf432875b5ef4a3b$export$7fcada0453713929","toPrimitive","ArrayBuffer","isView","y","$5c96a02c592fcff1$export$1050f835b63b671e","thisArg","_arguments","generator","resolve","fulfilled","step","rejected","adopt","apply","$5c96a02c592fcff1$export$10c90e4f7922046c","$5c96a02c592fcff1$export$e427f37a30a4de9b","q","verb","resume","fulfill","settle","shift","$5c96a02c592fcff1$export$bbd80228419bb833","$5c96a02c592fcff1$export$e3b29a3d6162315f","$5c96a02c592fcff1$export$19a8beecd37a4c45","SuppressedError","$919e3c7689196a2e$var$decoder","TextDecoder","$919e3c7689196a2e$export$72118b85b055afd","buffer","decode","$919e3c7689196a2e$var$encoder","TextEncoder","$919e3c7689196a2e$export$8f647c2204da8484","encode","$6a2dadc936df2dd3$var$SharedArrayBuf","SharedArrayBuffer","$6a2dadc936df2dd3$export$14ee4f6a21e84606","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","byteOffset","src","min","$6a2dadc936df2dd3$export$5f31b60ee74e9ce","chunks","sliced","$6a2dadc936df2dd3$var$collapseContiguousByteRanges","xOffset","yOffset","xLen","yLen","offset","POSITIVE_INFINITY","subarray","$6a2dadc936df2dd3$export$8f34f840217f9551","ArrayBufferViewCtor","input","bytes","$6a2dadc936df2dd3$export$46036e1dd6d3e964","Int32Array","$6a2dadc936df2dd3$export$73470fd2221e6aef","$6a2dadc936df2dd3$var$pump","$6a2dadc936df2dd3$export$93fb14a79c82cede","$6a2dadc936df2dd3$export$92a463899a09551c","ArrayCtor","wrap","buffers","it","$6a2dadc936df2dd3$export$20fc6274387de476","$6a2dadc936df2dd3$export$83b0a4fbce5fd89f","emit","$6a2dadc936df2dd3$export$d83d9287259d394b","valueOffsets","$9aed8ed3a6d26f6b$export$f4ebf2553e430297","$9aed8ed3a6d26f6b$var$BigNum","xs","setPrototypeOf","$9aed8ed3a6d26f6b$var$SignedBigNum","args","$9aed8ed3a6d26f6b$var$UnsignedBigNum","$9aed8ed3a6d26f6b$var$DecimalBigNum","$9aed8ed3a6d26f6b$var$bignumToNumber","bn","signed","words","negative","number","word","$9aed8ed3a6d26f6b$var$decimalToString","digits","base64","Uint32Array","base32","Uint16Array","checks","toJSON","valueOf","hint","create","$9aed8ed3a6d26f6b$export$ed16643e9b9e3dfe","new","num","isSigned","Int8Array","Int16Array","unsigned","decimal","$7101ea1b1020e1ec$export$45c69700ee30a78c","isNull","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","isDictionary","Dictionary","isDenseUnion","Dense","isSparseUnion","Sparse","NONE","toStringTag","ArrayType","$7101ea1b1020e1ec$export$26c9c3a80cd996ae","$7101ea1b1020e1ec$export$fdd676b64b72b00","bitWidth","$7101ea1b1020e1ec$export$493726e231866ac3","$7101ea1b1020e1ec$export$2174b49024d7a91f","$7101ea1b1020e1ec$export$840a40d2c6db4b78","$7101ea1b1020e1ec$export$8a5e19712a0a5deb","$7101ea1b1020e1ec$export$235b973e27367fb2","$7101ea1b1020e1ec$export$e07c60bdce7b4354","$7101ea1b1020e1ec$export$357453df9520abca","$7101ea1b1020e1ec$export$46950b17866d859a","$7101ea1b1020e1ec$export$bb89b76e902dbdb5","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","$7101ea1b1020e1ec$export$c983ffbc243ea128","$7101ea1b1020e1ec$export$d2ee3fd19968539e","$7101ea1b1020e1ec$export$42429e12507a49a2","$7101ea1b1020e1ec$export$dbada097a9bd1de9","$7101ea1b1020e1ec$export$3ee43a596719d7b5","$7101ea1b1020e1ec$export$6e6298e1abe0d5b","$7101ea1b1020e1ec$export$95c991896bef8714","scale","$7101ea1b1020e1ec$export$6d0683f8044360cf","unit","$7101ea1b1020e1ec$export$680ea196effce5f","$7101ea1b1020e1ec$export$d9bcbd5e1ff81430","timezone","$7101ea1b1020e1ec$export$e659c2681d58d45b","$7101ea1b1020e1ec$export$54c2e3dc7acea9f5","child","valueType","valueField","$7101ea1b1020e1ec$export$eabc71f011df675a","$7101ea1b1020e1ec$export$6cbb4f8fa0c4c986","typeIds","typeIdToChildIndex","idx","$7101ea1b1020e1ec$export$acd1628a1dd918f2","byteWidth","$7101ea1b1020e1ec$export$ae9e55e1d8a2f4b7","listSize","$7101ea1b1020e1ec$export$deb68d24b0e86bc0","keysSorted","keyType","childType","$7101ea1b1020e1ec$var$getId","$7101ea1b1020e1ec$export$4ee70ab773570fb9","dictionary","indices","isOrdered","low","$7101ea1b1020e1ec$export$34337cb9c8e6db90","$f311b4df488f5c42$export$9d54d4ec2dd4b364","visitMany","nodes","node","visit","getVisitFn","throwIfNotFound","$f311b4df488f5c42$var$getVisitFn","visitor","$f311b4df488f5c42$var$getVisitFnByTypeId","$f311b4df488f5c42$var$inferDType","getVisitFnByTypeId","visitNull","_node","_args","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","dtype","fn","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","$7a7e4fd849947557$var$f64","$7a7e4fd849947557$var$u32","$7a7e4fd849947557$export$782da64dd3f395f1","expo","sigf","sign","pow","NaN","$7a7e4fd849947557$export$9c71a3ad52f4945a","$02b131079e669552$export$d84e7388ae71a748","$02b131079e669552$var$wrapSet","_1","_2","setValid","$02b131079e669552$export$1899de92e028eca4","epochMs","trunc","$02b131079e669552$export$2611a10fef01c8cc","$02b131079e669552$export$ec0cf2ffa84a3d99","$02b131079e669552$export$64b390a0924023e8","$02b131079e669552$export$1145125b44b096fb","$02b131079e669552$export$949fe9d278523f2a","$02b131079e669552$export$89db590c4cd337d3","$02b131079e669552$export$6f1906b3fdafea24","$02b131079e669552$export$1c2cc1b96b58b1d1","$02b131079e669552$export$bb770250cb177ad2","$02b131079e669552$export$37c190d5a22f51cd","stride","$02b131079e669552$export$566174fa40823587","$02b131079e669552$export$a8df9fe4302d9515","$02b131079e669552$export$b15d4d3e8dc34daf","$02b131079e669552$export$74f399dc684b99dc","$02b131079e669552$export$a669d6701b9d0694","$02b131079e669552$export$92fd42d4569bec0b","$02b131079e669552$export$3f12d34d8a01cbfc","$02b131079e669552$export$9d9527a16c0d803e","$02b131079e669552$export$8a9291bdc36e3d43","$02b131079e669552$export$aa9540ea8a7ac603","$02b131079e669552$export$e5d5e1c1822b6e56","$02b131079e669552$export$68dd22903d458048","$02b131079e669552$var$_setStructArrayValue","$02b131079e669552$var$_setStructVectorValue","$02b131079e669552$var$_setStructMapValue","$02b131079e669552$var$_setStructObjectValue","$02b131079e669552$var$setDenseUnion","childIndex","$02b131079e669552$export$9544d5bb712b01ea","$02b131079e669552$var$setSparseUnion","$02b131079e669552$export$36414baf865a2a5c","$02b131079e669552$export$3c7565d5cdb2d0a1","$02b131079e669552$export$b484089ec0818b04","itr","end","childSetters","$32ea7584b42ab85d$export$9b781de7bf37bf48","_a","entries","$0f04b156032e64c4$var$kParent","$0f04b156032e64c4$var$kRowIndex","$0f04b156032e64c4$export$ce7b327a6152c29c","parent","rowIndex","Proxy","$0f04b156032e64c4$var$StructRowProxyHandler","json","$0f04b156032e64c4$var$StructRowIterator","childFields","numChildren","defineProperties","writable","isExtensible","deleteProperty","preventExtensions","ownKeys","row","findIndex","Reflect","$d281eaf03ad48e28$export$add57bf42f59861d","$d281eaf03ad48e28$var$wrapGet","getValid","$d281eaf03ad48e28$var$epochDaysToMs","$d281eaf03ad48e28$var$epochMillisecondsLongToMs","$d281eaf03ad48e28$var$epochMicrosecondsLongToMs","$d281eaf03ad48e28$var$epochNanosecondsLongToMs","$d281eaf03ad48e28$var$epochMillisecondsToDate","$d281eaf03ad48e28$var$epochDaysToDate","$d281eaf03ad48e28$var$epochMillisecondsLongToDate","$d281eaf03ad48e28$var$getVariableWidthBytes","$d281eaf03ad48e28$var$getDateDay","$d281eaf03ad48e28$var$getDateMillisecond","$d281eaf03ad48e28$var$getNumeric","$d281eaf03ad48e28$var$getBigInts","$d281eaf03ad48e28$var$getTimestampSecond","$d281eaf03ad48e28$var$getTimestampMillisecond","$d281eaf03ad48e28$var$getTimestampMicrosecond","$d281eaf03ad48e28$var$getTimestampNanosecond","$d281eaf03ad48e28$var$getTimeSecond","$d281eaf03ad48e28$var$getTimeMillisecond","$d281eaf03ad48e28$var$getTimeMicrosecond","$d281eaf03ad48e28$var$getTimeNanosecond","$d281eaf03ad48e28$var$getDenseUnion","$d281eaf03ad48e28$export$9544d5bb712b01ea","$d281eaf03ad48e28$var$getSparseUnion","$d281eaf03ad48e28$var$getIntervalDayTime","$d281eaf03ad48e28$var$getIntervalYearMonth","interval","int32s","_data","_index","byte","begin","$aa6ddfab1bbb5566$export$a26b7a6524a708c0","$aa6ddfab1bbb5566$export$a94eaf1d5da8ebe1","$aa6ddfab1bbb5566$export$bacae5c859840b52","memoize","$aa6ddfab1bbb5566$var$MapRowProxyHandler","$aa6ddfab1bbb5566$var$MapRowIterator","vals","keyIndex","numKeys","includes","$6a5b4b7795980060$export$e9d4863bcce07ce9","len","lhs","rhs","$6a5b4b7795980060$var$isNaNFast","$6a5b4b7795980060$export$fe92c9f91b0b7e2e","search","typeofSearch","valueOfSearch","$6a5b4b7795980060$var$createMapComparator","comparators","$6a5b4b7795980060$var$createSubElementsComparator","$6a5b4b7795980060$var$createArrayLikeComparator","$6a5b4b7795980060$var$createVectorComparator","$6a5b4b7795980060$var$createObjectComparator","allowEmpty","$6a5b4b7795980060$var$compareArray","arr","$6a5b4b7795980060$var$compareObject","undefined","$6a5b4b7795980060$var$compareVector","vec","obj","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","return","$93291429152ee31f$export$ef48c5cb02f88b57","numChunks","getChunkIterator","chunkIndex","chunkIterator","$93291429152ee31f$export$66186826dace05d7","nullCount","chunk","$93291429152ee31f$export$dc8ec309c5963567","offsets","$93291429152ee31f$export$aac8c68e61aca8b9","slices","max","$93291429152ee31f$export$2e0ae67339d5f1ac","mid","$93291429152ee31f$export$bbb8f619af0ed78f","$93291429152ee31f$export$a18deb2181038191","chunkedFn","_offsets","$93291429152ee31f$export$534e46eacac9083a","$93291429152ee31f$export$d7a757adef85ea6e","chunkedIndexOf","fromIndex","total","$d76f09d2d6f16785$export$2c6d6dc83860258d","bit","$d76f09d2d6f16785$export$eb7cc99bb8a55d01","$d76f09d2d6f16785$export$c21fe70cd847afb","bitmap","alignedSize","$d76f09d2d6f16785$export$9b04d6b190dfec92","$d76f09d2d6f16785$export$a90f4fb3bdcebd60","byteIndex","$d76f09d2d6f16785$export$b1b7369e2b9b892f","uint32","$16163aaa31ee8eda$export$c4cccb5bc7ae164","$16163aaa31ee8eda$var$indexOfValue","searchElement","$16163aaa31ee8eda$var$indexOfNull","nullBitmap","isValid","$16163aaa31ee8eda$var$indexOfUnion","$16163aaa31ee8eda$export$9544d5bb712b01ea","$5475c8864f011599$export$91ded182d4917d0","$5475c8864f011599$var$vectorIterator","vector","inner","$5475c8864f011599$var$VectorIterator","$5475c8864f011599$export$9544d5bb712b01ea","$5eca7df6080929be$var$sum","$5eca7df6080929be$export$9d632d6351d0be51","____","$5eca7df6080929be$export$9544d5bb712b01ea","getByteLength","$5eca7df6080929be$var$getDenseUnionByteLength","$5eca7df6080929be$var$getSparseUnionByteLength","start","$32ea7584b42ab85d$var$visitorsByTypeId","$32ea7584b42ab85d$var$vectorPrototypesByTypeId","_b","_c","_d","flatMap","some","$e570fe8df119273b$export$2d0294657ab35f1b","unchunkedData","_byteLength","_nullCount","VectorName","concat","others","memo","chunk_length","array","getChild","getChildAt","isMemoized","$32ea7584b42ab85d$var$MemoizedVector","cloned","clone","unmemoize","newData","isConcatSpreadable","filter","cache","cachedValue","floor","nullable","$d76f09d2d6f16785$export$ae9e3f3156236df4","sum","rhsInside","lhsInside","$d76f09d2d6f16785$export$a03ffe68b0ecb4ce","cnt","pos","view","DataView","getUint32","getUint16","getUint8","_changeLengthAndBackfillNullBitmap","childStride","_sliceBuffers","_sliceChildren","newLength","VALIDITY","TYPE","OFFSET","DATA","freeze","$e570fe8df119273b$var$MakeDataVisitor","$e570fe8df119273b$export$7dfaddfcce89fb4f","$f3b63445f9bfe464$export$19342e026b58ebb7","fields","dictionaries","$f3b63445f9bfe464$var$generateDictionaryMap","names","select","fieldNames","selectAt","fieldIndices","other","curFields","$f3b63445f9bfe464$var$mergeMaps","newFields","f2","newDictionaries","$f3b63445f9bfe464$export$a455218a85c89869","m1","m2","field","$7df102b60e872658$var$roundLengthUpToNearest64Bytes","BPE","ceil","$7df102b60e872658$var$sliceOrExtendArray","$7df102b60e872658$export$93654d4f2d6cd524","_resize","reservedLength","reservedByteLength","reserve","extra","reserved","flush","clear","$7df102b60e872658$export$3f83dfa59b669833","last","$7df102b60e872658$export$91586c27411a991e","numValid","numInvalid","cur","$7df102b60e872658$export$63f3a916d2ef3d35","$92fc1b2766556cfd$export$f75e4297694ec637","nulls","finished","nullValues","_nulls","_isValid","fnBody","noNaNs","Function","throughNode","throughDOM","toVector","_values","_typeIds","setValue","_setValue","valid","addChild","finish","$92fc1b2766556cfd$export$ebef77f153499f66","opts","$92fc1b2766556cfd$export$167e7ac1781effdf","_pendingLength","pending","_pending","_flush","pendingLength","_flushPending","$ee2a5f58df34af3c$export$1cb5c9ae30fbd96c","$8ba7fc3982ab191d$export$d9b0a671433716ae","$29c16a07182c22ae$export$9fe142f0e87de5bc","$29c16a07182c22ae$export$4f27f0d9632c6f5d","$29c16a07182c22ae$export$41b87ce3cdd47618","$e6c080d5695016d1$export$adf219ab10fb6c41","$377b5ce0fd3294ab$export$628e18bde876b2cd","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","prev","_dictionary","curr","$2a7250f399918337$export$733e8e293b9ee724","$f9772373175475b9$export$feeb13888b54cbe9","$a7d925de430d83e2$export$3a500ad11bfd245d","$a7d925de430d83e2$export$242eec60e6493184","$a7d925de430d83e2$export$7c1b9e119198ef57","$a7d925de430d83e2$export$2628973cc1f71d3e","$34bd3f5bb46fe9e7$export$b527b14155459814","$34bd3f5bb46fe9e7$export$73c1e138048f16ec","$34bd3f5bb46fe9e7$export$e0109cf28c445da6","$e6a4baca07f8bb33$export$46c5c6ef7892ac23","$e6a4baca07f8bb33$export$722edb96f36cc20a","$e6a4baca07f8bb33$export$a67597dedf4b8148","$e6a4baca07f8bb33$export$c80440a8b659c66a","$e6a4baca07f8bb33$export$f20e1dcda345494b","$e6a4baca07f8bb33$export$7bf8f7287ba44682","$e6a4baca07f8bb33$export$2b0bf54e11427d3e","$e6a4baca07f8bb33$export$5b7c02837d50cfa7","$e6a4baca07f8bb33$export$c9933cee4812c329","$1e247eca7ba17636$export$876cfa3161bef296","$b6977886874704ea$export$d0d6c54035845194","$fd7133930b28e387$export$e9750c3badeefff5","$427d458e7af5d963$export$2945b170a37da4f5","$6ce33a364c97761e$export$e790ce51dc66b576","$6ce33a364c97761e$export$b0c2ec4be506c6aa","$6ce33a364c97761e$export$ca79823af9942544","$6ce33a364c97761e$export$9c2a427308b5ae36","$6ce33a364c97761e$export$1d380b3da3c8c76b","$d21341c0f9e6c31f$export$f73be2da2b0f002b","$d21341c0f9e6c31f$export$187c92789997c87a","$d21341c0f9e6c31f$export$51b75b17a50f7872","$d21341c0f9e6c31f$export$45a1b457dee6163b","$d21341c0f9e6c31f$export$99199143543720e8","$3e37b9cafb92e38e$export$84641dda74d2d68f","_valueToChildTypeId","childTypeId","builder","$3e37b9cafb92e38e$export$ccde3138ec7f6c32","$3e37b9cafb92e38e$export$860ca4a9d3ac64b7","denseIndex","$356d8f614700ac53$export$4253febb603c120c","$29291d2d51c02efb$export$9544d5bb712b01ea","$7f44af34908592fc$export$cd370d004a302752","schema","$7f44af34908592fc$var$ensureSameLengthData","_dictionaries","$7f44af34908592fc$var$collectDictionaries","numCols","numRows","$8aa47498f8e624f2$export$54ec01a60f47d33d","setChild","setChildAt","columnNames","columnIndices","subset","maxLength","col","nullBitmapSize","$7f44af34908592fc$export$9dbf71c289537a87","$d47c8e7f9c21dc9d$export$5512e1e6d5f0dc66","compareSchemas","compareManyFields","every","compareFields","$d47c8e7f9c21dc9d$var$compareConstructor","$d47c8e7f9c21dc9d$var$compareAny","$d47c8e7f9c21dc9d$var$compareInt","$d47c8e7f9c21dc9d$var$compareFloat","$d47c8e7f9c21dc9d$var$compareDate","$d47c8e7f9c21dc9d$var$compareTimestamp","$d47c8e7f9c21dc9d$var$compareTime","$d47c8e7f9c21dc9d$var$compareUnion","$d47c8e7f9c21dc9d$export$9544d5bb712b01ea","$d47c8e7f9c21dc9d$var$compareInterval","$d47c8e7f9c21dc9d$export$fcd775bba374c9dc","$773df4429b03e9d2$export$859d538a84176041","defaultOptions","getChildOptions","$3dd8df82ab2b4707$export$1481174935707bfd","vecs","$3dd8df82ab2b4707$var$uniformlyDistributeChunksAcrossRecordBatches","cols","batches","numBatches","batchLength","numColumns","isFinite","$3dd8df82ab2b4707$var$distributeChildren","columns","unwrap","batch","empty","nameToIndex","columnName","oldToNew","newIdx","$55acd062e3b07133$export$d96a8827a60d6b69","bb","bb_pos","__init","readInt64","metaDataLength","readInt32","bodyLength","sizeOf","createBlock","prep","writeInt64","pad","writeInt32","$0f693df3e668ea5c$export$1d95835383bb05a","$0f693df3e668ea5c$export$1a4bac2aea11f30e","$0f693df3e668ea5c$export$76f82835c9736f87","$0f693df3e668ea5c$export$50a7e2d9fa5ce460","$252e58727f592771$export$12ac1d26449d9c2e","high","ZERO","toFloat64","equals","$b791e9664c1babe0$export$b21dcdb2a0c6c467","bytes_","position_","allocate","byte_size","position","setPosition","capacity","readInt8","readUint8","readInt16","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeInt8","writeUint8","writeInt16","writeUint16","writeUint32","writeUint64","writeFloat32","writeFloat64","getBufferIdentifier","__offset","vtable_offset","vtable","__union","__string","opt_encoding","UTF8_BYTES","codePoint","__union_with_string","__indirect","__vector","__vector_len","__has_identifier","ident","charCodeAt","createLong","createScalarList","listAccessor","listLength","ret","createObjList","unpack","$5d9d3e6dae320589$export$f75e4297694ec637","opt_initial_size","initial_size","minalign","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","string_maps","space","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","notNested","new_buf_size","nbb","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","table_start","vtable_start","startVector","elem_size","num_elems","alignment","endVector","createSharedString","createString","utf8","createObjectOffset","pack","createObjectOffsetList","list","createStructOffsetList","startFunc","$60e61be83537f0a4$export$12b3cc2522c3bba5","getRootAsKeyValue","getSizePrefixedRootAsKeyValue","optionalEncoding","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","createKeyValue","$fbe95b7d2bf7fb98$export$fdd676b64b72b00","getRootAsInt","getSizePrefixedRootAsInt","startInt","addBitWidth","addIsSigned","endInt","createInt","$16a40d7e684a12f1$export$57d09fbdc0927e09","getRootAsDictionaryEncoding","getSizePrefixedRootAsDictionaryEncoding","indexType","dictionaryKind","DenseArray","startDictionaryEncoding","addId","addIndexType","indexTypeOffset","addIsOrdered","addDictionaryKind","endDictionaryEncoding","$94737fb90c929e48$export$dbada097a9bd1de9","getRootAsBinary","getSizePrefixedRootAsBinary","startBinary","endBinary","createBinary","$7115a99830a05127$export$6e6298e1abe0d5b","getRootAsBool","getSizePrefixedRootAsBool","startBool","endBool","createBool","$7c73ec3dc476ef53$export$6341f9a885713487","getRootAsDate","getSizePrefixedRootAsDate","startDate","addUnit","endDate","createDate","$e056555f1b3a6c36$export$95c991896bef8714","getRootAsDecimal","getSizePrefixedRootAsDecimal","startDecimal","addPrecision","addScale","endDecimal","createDecimal","$b20e8c514d226bfe$export$acd1628a1dd918f2","getRootAsFixedSizeBinary","getSizePrefixedRootAsFixedSizeBinary","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","createFixedSizeBinary","$c5dec885bac02404$export$ae9e55e1d8a2f4b7","getRootAsFixedSizeList","getSizePrefixedRootAsFixedSizeList","startFixedSizeList","addListSize","endFixedSizeList","createFixedSizeList","$8b8f66b318af7438$export$257b1589cbfd46ce","getRootAsFloatingPoint","getSizePrefixedRootAsFloatingPoint","startFloatingPoint","endFloatingPoint","createFloatingPoint","$67dfcdbd6df72b46$export$e659c2681d58d45b","getRootAsInterval","getSizePrefixedRootAsInterval","startInterval","endInterval","createInterval","$318f60c1e90e3c35$export$54c2e3dc7acea9f5","getRootAsList","getSizePrefixedRootAsList","startList","endList","createList","$6e1a040cdf3db503$export$a5c7b93649eaf8f8","getRootAsMap","getSizePrefixedRootAsMap","startMap","addKeysSorted","endMap","createMap","$9da36a504a0f9170$export$26c9c3a80cd996ae","getRootAsNull","getSizePrefixedRootAsNull","startNull","endNull","createNull","$958f401a3d4efa97$export$3b43426ee282bc31","getRootAsStruct_","getSizePrefixedRootAsStruct_","startStruct_","endStruct_","createStruct_","$2410d33bb612780a$export$680ea196effce5f","getRootAsTime","getSizePrefixedRootAsTime","startTime","endTime","createTime","$b149de23afe7bc26$export$d9bcbd5e1ff81430","getRootAsTimestamp","getSizePrefixedRootAsTimestamp","startTimestamp","addTimezone","timezoneOffset","endTimestamp","createTimestamp","$970e60b352bbdc20$export$6cbb4f8fa0c4c986","getRootAsUnion","getSizePrefixedRootAsUnion","typeIdsLength","typeIdsArray","startUnion","addMode","addTypeIds","typeIdsOffset","createTypeIdsVector","startTypeIdsVector","numElems","endUnion","createUnion","$98ef8af8e5ac0550$export$3ee43a596719d7b5","getRootAsUtf8","getSizePrefixedRootAsUtf8","startUtf8","endUtf8","createUtf8","$ae377e5d72a755d0$export$a455218a85c89869","getRootAsField","getSizePrefixedRootAsField","typeType","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","addType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","startChildrenVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","$819543e9b63af107$export$19342e026b58ebb7","getRootAsSchema","getSizePrefixedRootAsSchema","endianness","Little","fieldsLength","features","featuresLength","startSchema","addEndianness","addFields","fieldsOffset","createFieldsVector","startFieldsVector","addFeatures","featuresOffset","createFeaturesVector","startFeaturesVector","endSchema","finishSchemaBuffer","finishSizePrefixedSchemaBuffer","createSchema","$f9038961808552d6$export$a06f1c675e846f6f","getRootAsFooter","getSizePrefixedRootAsFooter","version","V1","dictionariesLength","recordBatches","recordBatchesLength","startFooter","addVersion","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","finishSizePrefixedFooterBuffer","$407d155e284267e1$export$a06f1c675e846f6f","V4","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","$407d155e284267e1$var$OffHeapFooter","rb","numRecordBatches","$407d155e284267e1$export$f0973857ccdc167a","db","numDictionaries","dictionaryBatchesOffset","block","getRecordBatch","getDictionaryBatch","_footer","fileBlock","$8a2782f1bb5c945f$export$2e2bcd8739ae039","fromIterable","$8a2782f1bb5c945f$var$pump","$8a2782f1bb5c945f$var$fromIterable","threw","cmd","bufferLength","isNaN","throw","fromAsyncIterable","$8a2782f1bb5c945f$var$fromAsyncIterable","fromDOMStream","$8a2782f1bb5c945f$var$fromDOMStream","$8a2782f1bb5c945f$var$AdaptiveByteReader","releaseLock","fromNodeStream","stream","$8a2782f1bb5c945f$var$fromNodeStream","events","event","$8a2782f1bb5c945f$var$onEvent","race","evt","destroy","toDOMStream","toNodeStream","reader","catch","closed","cancel","reason","read","handler","$38d3e9fec019c197$export$597fde002da0996e","$38d3e9fec019c197$export$b222306c71bb2657","_json","$38d3e9fec019c197$export$cba7c5923fc9b663","tee","_getDOMStream","pipe","_getNodeStream","pipeTo","pipeThrough","duplex","_DOMStream","_nodeStream","$38d3e9fec019c197$export$c24e73273208a9bb","resolvers","_closedPromise","_closedPromiseResolve","write","_ensureOpen","abort","_error","error","close","peek","$44f8cce78045ceee$export$7e4b59827e1829f","sync","toUint8Array","e_1","e_1_1","$44f8cce78045ceee$export$8130652b8df6235f","$44f8cce78045ceee$var$ByteStreamSource","$44f8cce78045ceee$export$acccd0ac6a925199","$44f8cce78045ceee$var$AsyncByteStreamSource","body","$c07b9a56e8c93016$export$f0e578974429970a","readAt","getInt32","seek","nBytes","$c07b9a56e8c93016$export$4c8403cd526f9bff","file","_handle","stat","bytesRead","$92bbd5bee0a4f219$var$intAsHex","$92bbd5bee0a4f219$var$kPowersOfTen","$92bbd5bee0a4f219$export$abbd50bb57d2d77f","_times","L","R","product","_plus","lessThan","greaterThan","hex","$92bbd5bee0a4f219$export$46950b17866d859a","times","plus","out_buffer","fromString","fromNumber","str","out","posn","group","$92bbd5bee0a4f219$var$kInt32DecimalDigits","parseInt","multiple","convertArray","multiply","left","right","rtrn","$92bbd5bee0a4f219$export$8a5e19712a0a5deb","negate","this_high","other_high","$92bbd5bee0a4f219$export$10080978c6e031ea","L0","L1","L2","L3","R0","R1","R2","R3","sums","$df070b5e2232f4c1$export$6f22fd25972f18b8","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","readDictionary","nextBufferRange","_type","$df070b5e2232f4c1$export$447fd3976f575d87","sources","$df070b5e2232f4c1$var$binaryDataFromJSON","joined","$d839acc798eff740$export$e169d91759ed5c6d","getRootAsBodyCompression","getSizePrefixedRootAsBodyCompression","codec","LZ4_FRAME","method","BUFFER","startBodyCompression","addCodec","addMethod","endBodyCompression","createBodyCompression","$a638943281c19bea$export$a143d493d941bafc","createBuffer","$1c7325cb5a3aa4e6$export$e0208c849596fb6a","createFieldNode","null_count","$bab7c05ed448aa03$export$cd370d004a302752","getRootAsRecordBatch","getSizePrefixedRootAsRecordBatch","nodesLength","buffersLength","compression","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","addCompression","compressionOffset","endRecordBatch","$8ebc2d9fda7a9040$export$5e75ba0eb1186f77","getRootAsDictionaryBatch","getSizePrefixedRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","$83185f402e0ee7a6$export$f69c19e57285b83a","getRootAsMessage","getSizePrefixedRootAsMessage","headerType","header","startMessage","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","finishSizePrefixedMessageBuffer","createMessage","$715199850ba413ec$export$9544d5bb712b01ea","$cefb43be799963c6$export$a1d56744d35b97b6","$15c6a7e2cd1ff7b0$export$cd370d004a302752","$cefb43be799963c6$var$fieldNodesFromJSON","fieldNodes","column","$15c6a7e2cd1ff7b0$export$e0208c849596fb6a","validity","$cefb43be799963c6$var$buffersFromJSON","$15c6a7e2cd1ff7b0$export$64d9b66387ab167f","$cefb43be799963c6$var$fieldChildrenFromJSON","_field","fromJSON","$cefb43be799963c6$var$customMetadataFromJSON","_metadata","$cefb43be799963c6$var$indexTypeFromJSON","$cefb43be799963c6$var$typeFromJSON","$15c6a7e2cd1ff7b0$export$f69c19e57285b83a","_version","_headerType","_createHeader","_bodyLength","msg","message","Schema","RecordBatch","DictionaryBatch","$15c6a7e2cd1ff7b0$export$5e75ba0eb1186f77","_message","isSchema","isRecordBatch","isDictionaryBatch","_nodes","_buffers","_length","_isDelta","_id","$15c6a7e2cd1ff7b0$var$decodeFieldChildren","$15c6a7e2cd1ff7b0$var$decodeCustomMetadata","entry","$15c6a7e2cd1ff7b0$var$decodeIndexType","$15c6a7e2cd1ff7b0$var$decodeFieldType","childOffsets","childrenVectorOffset","metadataOffset","dictType","dictMeta","fieldOffsets","fieldsVectorOffset","$15c6a7e2cd1ff7b0$var$platformIsLittleEndian","Big","_schema","$15c6a7e2cd1ff7b0$var$decodeSchemaFields","recordBatch","nodesVectorOffset","b_","buffersVectorOffset","$15c6a7e2cd1ff7b0$var$decodeFieldNodes","$15c6a7e2cd1ff7b0$var$decodeBuffers","bufferRegions","dictionaryBatch","setInt16","$67bd99104835ca40$var$invalidMessageType","$67bd99104835ca40$var$nullMessage","$67bd99104835ca40$var$invalidMessageMetadata","expected","actual","$67bd99104835ca40$var$invalidMessageBodyLength","$67bd99104835ca40$export$c464e0d778ce82be","readMetadataLength","readMetadata","readMessage","readMessageBody","readSchema","throwIfNull","$67bd99104835ca40$export$d3cda41e44a6352b","metadataLength","$67bd99104835ca40$export$1550c5f3206c201c","$67bd99104835ca40$export$ee2b02392f0a0089","_body","_batchIndex","_dictionaryIndex","flattenDataSources","$67bd99104835ca40$export$24cf6d3b9b7108f6","$67bd99104835ca40$export$b5f3c04026ef1f8","codePointAt","$67bd99104835ca40$export$8545348ce176054","$67bd99104835ca40$export$46e067d7c10a9131","$67bd99104835ca40$export$cd8f4fe533c69d26","$67bd99104835ca40$export$bed22c2b3d840db7","$5fa854a93d8dc494$export$5a0dee6589a95d88","impl","_impl","autoDestroy","isFile","isSync","isAsync","isStream","reset","open","opening","readRecordBatch","objectMode","writableStrategy","readableStrategy","$5fa854a93d8dc494$export$6ae70bde35df1f0e","$5fa854a93d8dc494$var$RecordBatchJSONReaderImpl","$5fa854a93d8dc494$var$fromFileHandle","$5fa854a93d8dc494$export$d7ab60d5f5b03dbb","$5fa854a93d8dc494$var$AsyncRecordBatchFileReaderImpl","$5fa854a93d8dc494$export$c09c2de01ec55559","$5fa854a93d8dc494$var$AsyncRecordBatchStreamReaderImpl","$5fa854a93d8dc494$var$fromAsyncByteStream","$5fa854a93d8dc494$export$21b25bf85f17f4ba","$5fa854a93d8dc494$var$RecordBatchFileReaderImpl","$5fa854a93d8dc494$var$fromByteStream","$5fa854a93d8dc494$var$RecordBatchStreamReaderImpl","readAll","$5fa854a93d8dc494$var$readAllSync","$5fa854a93d8dc494$var$readAllAsync","$5fa854a93d8dc494$var$RecordBatchReaderImpl","_recordBatchIndex","_loadRecordBatch","_loadVectors","_loadDictionaryBatch","types","_reader","$5fa854a93d8dc494$var$shouldAutoDestroy","_readNextMessageAndValidate","_readFooter","_readDictionaryBatch","rest","_super","self","$32528265779863d2$export$d099cf3bf6e2bc7b","_bufferRegions","assemble","assembler","RangeError","$32528265779863d2$var$addBuffer","_null","$32528265779863d2$var$assembleFlatVector","$32528265779863d2$var$assembleFlatListVector","firstOffset","lastOffset","$32528265779863d2$var$assembleListVector","$32528265779863d2$var$assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","$3ac5500f0db84a2c$export$f2a6581ee02d5205","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writeAll","$3ac5500f0db84a2c$var$writeAllAsync","$3ac5500f0db84a2c$var$writeAll","sink","_writeFooter","_writeSchema","payload","_writeRecordBatch","_writeMessage","flatbufferSize","prefixSize","nPaddingBytes","_write","_writePadding","_writeMagic","_writeDictionaries","_writeBodyBuffers","_writeDictionaryBatch","padding","$3ac5500f0db84a2c$export$a5292f96f1526f22","writer","$3ac5500f0db84a2c$export$5677695a2f9e2dcf","batches_1","batches_1_1","$5fc0b9883ecba97e$export$c6d1ecf1ac7bfd24","$5fc0b9883ecba97e$export$ddfc347390f432fc","$e98ce2190743c8e4$export$c6fd6ce53f6943cf","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","rows","dataRows","dataColumns","serialize","nanos","$002ff0c12d1f9dff$var$__assign","$002ff0c12d1f9dff$export$e733d124b3a21d3f","Streamlit","API_VERSION","RENDER_EVENT","EventTarget","registeredMessageListener","setComponentReady","window","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","$002ff0c12d1f9dff$var$isTypedArray","isBigIntArray","Uint8ClampedArray","SET_COMPONENT_VALUE","onRenderMessage","console","dataframeArgs","argsDataframeToObject","disabled","theme","$002ff0c12d1f9dff$var$_injectTheme","eventData","CustomEvent","detail","dispatchEvent","argsDataframe","fromEntries","toArrowTable","df","postMessage","isStreamlitMessage","style","head","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","$93d96f1083eaf3c5$var$__extends","__proto__","__","StreamlitComponentBase","componentDidMount","componentDidUpdate","__esModule","default","PureComponent","$35da740d59af89ba$var$MyButton","BUTTON_HEIGHT","handleClick","iframe","frameElement","width","log","customElements","define","global","emptyStringForBooleanAttribute","polyfillSupport","JSCompiler_renameProperty","prop","_obj","defaultConverter","fromValue","notEqual","old","defaultPropertyDeclaration","initializer","this","__prepare","_initializers","__attributeToPropertyMap","descriptor","oldValue","superCtor","propKeys","attr","__attributeNameForProperty","Infinity","getCompatibleStyle","super","__instanceProperties","__reflectingProperty","__initialize","__updatePromise","res","_$changedProperties","__saveInstanceProperties","controller","__controllers","instanceProperties","adoptStyles","_requestedUpdate","_old","_$attributeToProperty","__propertyToAttribute","attrValue","propName","_$changeProperty","__enqueueUpdate","__reflectingProperties","changedProperties","__markUpdated","_$didUpdate","_changedProperties","supportsAdoptingStyleSheets","constructionToken","cssTagCache","CSSResult","safeToken","_strings","_styleSheet","cacheable","unsafeCSS","css","acc","textFromCSSResult","nonce","sheet","rule","cssResultFromStyleSheet","policy","boundAttributeSuffix","marker","markerMatch","nodeMarker","createMarker","isPrimitive","isIterable","SPACE_CHAR","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","html","svg","mathml","noChange","nothing","templateCache","walker","trustFromTemplateString","tsa","stringFromTSA","getTemplateHtml","attrNames","rawTextEndRegex","regex","attrName","match","attrNameEndIndex","Template","nodeIndex","attrNameIndex","partCount","wrapper","realName","statics","PropertyPart","BooleanAttributePart","EventPart","AttributePart","_options","resolveDirective","part","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","_$initialize","_$resolve","TemplateInstance","template","_$parts","_$disconnectableChildren","_$template","_$parent","_$isConnected","_clone","fragment","partIndex","templatePart","ChildPart","ElementPart","_update","_$setValue","__isConnected","_$committedValue","_$startNode","_$endNode","directiveParent","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","_$getTemplate","instance","itemParts","itemPart","item","_$notifyConnectionChanged","valueIndex","noCommit","change","_commitValue","newListener","oldListener","shouldRemoveListener","shouldAddListener","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","container","partOwnerNode","__childPart","_$LE","isServer"],"version":3,"file":"index.e8556962.js.map"}